
Vital_Tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08009cb0  08009cb0  00019cb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a17c  0800a17c  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800a17c  0800a17c  0001a17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a184  0800a184  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a184  0800a184  0001a184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a188  0800a188  0001a188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800a18c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000214  0800a3a0  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  0800a3a0  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c45  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f9b  00000000  00000000  00033e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00036e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  00037d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016263  00000000  00000000  00038ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121cd  00000000  00000000  0004ed2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c91e  00000000  00000000  00060ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd816  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004654  00000000  00000000  000dd86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000214 	.word	0x20000214
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009c94 	.word	0x08009c94

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000218 	.word	0x20000218
 8000104:	08009c94 	.word	0x08009c94

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f847 	bl	80014d0 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff91 	bl	8001374 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f839 	bl	80014d0 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f82f 	bl	80014d0 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ffb3 	bl	80013ec <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ffa9 	bl	80013ec <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	1c08      	adds	r0, r1, #0
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f82e 	bl	8000538 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	0415      	lsls	r5, r2, #16
 80004ec:	0c2d      	lsrs	r5, r5, #16
 80004ee:	000f      	movs	r7, r1
 80004f0:	0001      	movs	r1, r0
 80004f2:	002e      	movs	r6, r5
 80004f4:	46c6      	mov	lr, r8
 80004f6:	4684      	mov	ip, r0
 80004f8:	0400      	lsls	r0, r0, #16
 80004fa:	0c14      	lsrs	r4, r2, #16
 80004fc:	0c00      	lsrs	r0, r0, #16
 80004fe:	0c09      	lsrs	r1, r1, #16
 8000500:	4346      	muls	r6, r0
 8000502:	434d      	muls	r5, r1
 8000504:	4360      	muls	r0, r4
 8000506:	4361      	muls	r1, r4
 8000508:	1940      	adds	r0, r0, r5
 800050a:	0c34      	lsrs	r4, r6, #16
 800050c:	1824      	adds	r4, r4, r0
 800050e:	b500      	push	{lr}
 8000510:	42a5      	cmp	r5, r4
 8000512:	d903      	bls.n	800051c <__aeabi_lmul+0x34>
 8000514:	2080      	movs	r0, #128	; 0x80
 8000516:	0240      	lsls	r0, r0, #9
 8000518:	4680      	mov	r8, r0
 800051a:	4441      	add	r1, r8
 800051c:	0c25      	lsrs	r5, r4, #16
 800051e:	186d      	adds	r5, r5, r1
 8000520:	4661      	mov	r1, ip
 8000522:	4359      	muls	r1, r3
 8000524:	437a      	muls	r2, r7
 8000526:	0430      	lsls	r0, r6, #16
 8000528:	1949      	adds	r1, r1, r5
 800052a:	0424      	lsls	r4, r4, #16
 800052c:	0c00      	lsrs	r0, r0, #16
 800052e:	1820      	adds	r0, r4, r0
 8000530:	1889      	adds	r1, r1, r2
 8000532:	bc80      	pop	{r7}
 8000534:	46b8      	mov	r8, r7
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000538 <__udivmoddi4>:
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053a:	4657      	mov	r7, sl
 800053c:	464e      	mov	r6, r9
 800053e:	4645      	mov	r5, r8
 8000540:	46de      	mov	lr, fp
 8000542:	b5e0      	push	{r5, r6, r7, lr}
 8000544:	0004      	movs	r4, r0
 8000546:	000d      	movs	r5, r1
 8000548:	4692      	mov	sl, r2
 800054a:	4699      	mov	r9, r3
 800054c:	b083      	sub	sp, #12
 800054e:	428b      	cmp	r3, r1
 8000550:	d830      	bhi.n	80005b4 <__udivmoddi4+0x7c>
 8000552:	d02d      	beq.n	80005b0 <__udivmoddi4+0x78>
 8000554:	4649      	mov	r1, r9
 8000556:	4650      	mov	r0, sl
 8000558:	f001 ffc0 	bl	80024dc <__clzdi2>
 800055c:	0029      	movs	r1, r5
 800055e:	0006      	movs	r6, r0
 8000560:	0020      	movs	r0, r4
 8000562:	f001 ffbb 	bl	80024dc <__clzdi2>
 8000566:	1a33      	subs	r3, r6, r0
 8000568:	4698      	mov	r8, r3
 800056a:	3b20      	subs	r3, #32
 800056c:	469b      	mov	fp, r3
 800056e:	d433      	bmi.n	80005d8 <__udivmoddi4+0xa0>
 8000570:	465a      	mov	r2, fp
 8000572:	4653      	mov	r3, sl
 8000574:	4093      	lsls	r3, r2
 8000576:	4642      	mov	r2, r8
 8000578:	001f      	movs	r7, r3
 800057a:	4653      	mov	r3, sl
 800057c:	4093      	lsls	r3, r2
 800057e:	001e      	movs	r6, r3
 8000580:	42af      	cmp	r7, r5
 8000582:	d83a      	bhi.n	80005fa <__udivmoddi4+0xc2>
 8000584:	42af      	cmp	r7, r5
 8000586:	d100      	bne.n	800058a <__udivmoddi4+0x52>
 8000588:	e078      	b.n	800067c <__udivmoddi4+0x144>
 800058a:	465b      	mov	r3, fp
 800058c:	1ba4      	subs	r4, r4, r6
 800058e:	41bd      	sbcs	r5, r7
 8000590:	2b00      	cmp	r3, #0
 8000592:	da00      	bge.n	8000596 <__udivmoddi4+0x5e>
 8000594:	e075      	b.n	8000682 <__udivmoddi4+0x14a>
 8000596:	2200      	movs	r2, #0
 8000598:	2300      	movs	r3, #0
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2301      	movs	r3, #1
 80005a0:	465a      	mov	r2, fp
 80005a2:	4093      	lsls	r3, r2
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2301      	movs	r3, #1
 80005a8:	4642      	mov	r2, r8
 80005aa:	4093      	lsls	r3, r2
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	e028      	b.n	8000602 <__udivmoddi4+0xca>
 80005b0:	4282      	cmp	r2, r0
 80005b2:	d9cf      	bls.n	8000554 <__udivmoddi4+0x1c>
 80005b4:	2200      	movs	r2, #0
 80005b6:	2300      	movs	r3, #0
 80005b8:	9200      	str	r2, [sp, #0]
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <__udivmoddi4+0x8e>
 80005c2:	601c      	str	r4, [r3, #0]
 80005c4:	605d      	str	r5, [r3, #4]
 80005c6:	9800      	ldr	r0, [sp, #0]
 80005c8:	9901      	ldr	r1, [sp, #4]
 80005ca:	b003      	add	sp, #12
 80005cc:	bcf0      	pop	{r4, r5, r6, r7}
 80005ce:	46bb      	mov	fp, r7
 80005d0:	46b2      	mov	sl, r6
 80005d2:	46a9      	mov	r9, r5
 80005d4:	46a0      	mov	r8, r4
 80005d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d8:	4642      	mov	r2, r8
 80005da:	2320      	movs	r3, #32
 80005dc:	1a9b      	subs	r3, r3, r2
 80005de:	4652      	mov	r2, sl
 80005e0:	40da      	lsrs	r2, r3
 80005e2:	4641      	mov	r1, r8
 80005e4:	0013      	movs	r3, r2
 80005e6:	464a      	mov	r2, r9
 80005e8:	408a      	lsls	r2, r1
 80005ea:	0017      	movs	r7, r2
 80005ec:	4642      	mov	r2, r8
 80005ee:	431f      	orrs	r7, r3
 80005f0:	4653      	mov	r3, sl
 80005f2:	4093      	lsls	r3, r2
 80005f4:	001e      	movs	r6, r3
 80005f6:	42af      	cmp	r7, r5
 80005f8:	d9c4      	bls.n	8000584 <__udivmoddi4+0x4c>
 80005fa:	2200      	movs	r2, #0
 80005fc:	2300      	movs	r3, #0
 80005fe:	9200      	str	r2, [sp, #0]
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	4643      	mov	r3, r8
 8000604:	2b00      	cmp	r3, #0
 8000606:	d0d9      	beq.n	80005bc <__udivmoddi4+0x84>
 8000608:	07fb      	lsls	r3, r7, #31
 800060a:	0872      	lsrs	r2, r6, #1
 800060c:	431a      	orrs	r2, r3
 800060e:	4646      	mov	r6, r8
 8000610:	087b      	lsrs	r3, r7, #1
 8000612:	e00e      	b.n	8000632 <__udivmoddi4+0xfa>
 8000614:	42ab      	cmp	r3, r5
 8000616:	d101      	bne.n	800061c <__udivmoddi4+0xe4>
 8000618:	42a2      	cmp	r2, r4
 800061a:	d80c      	bhi.n	8000636 <__udivmoddi4+0xfe>
 800061c:	1aa4      	subs	r4, r4, r2
 800061e:	419d      	sbcs	r5, r3
 8000620:	2001      	movs	r0, #1
 8000622:	1924      	adds	r4, r4, r4
 8000624:	416d      	adcs	r5, r5
 8000626:	2100      	movs	r1, #0
 8000628:	3e01      	subs	r6, #1
 800062a:	1824      	adds	r4, r4, r0
 800062c:	414d      	adcs	r5, r1
 800062e:	2e00      	cmp	r6, #0
 8000630:	d006      	beq.n	8000640 <__udivmoddi4+0x108>
 8000632:	42ab      	cmp	r3, r5
 8000634:	d9ee      	bls.n	8000614 <__udivmoddi4+0xdc>
 8000636:	3e01      	subs	r6, #1
 8000638:	1924      	adds	r4, r4, r4
 800063a:	416d      	adcs	r5, r5
 800063c:	2e00      	cmp	r6, #0
 800063e:	d1f8      	bne.n	8000632 <__udivmoddi4+0xfa>
 8000640:	9800      	ldr	r0, [sp, #0]
 8000642:	9901      	ldr	r1, [sp, #4]
 8000644:	465b      	mov	r3, fp
 8000646:	1900      	adds	r0, r0, r4
 8000648:	4169      	adcs	r1, r5
 800064a:	2b00      	cmp	r3, #0
 800064c:	db24      	blt.n	8000698 <__udivmoddi4+0x160>
 800064e:	002b      	movs	r3, r5
 8000650:	465a      	mov	r2, fp
 8000652:	4644      	mov	r4, r8
 8000654:	40d3      	lsrs	r3, r2
 8000656:	002a      	movs	r2, r5
 8000658:	40e2      	lsrs	r2, r4
 800065a:	001c      	movs	r4, r3
 800065c:	465b      	mov	r3, fp
 800065e:	0015      	movs	r5, r2
 8000660:	2b00      	cmp	r3, #0
 8000662:	db2a      	blt.n	80006ba <__udivmoddi4+0x182>
 8000664:	0026      	movs	r6, r4
 8000666:	409e      	lsls	r6, r3
 8000668:	0033      	movs	r3, r6
 800066a:	0026      	movs	r6, r4
 800066c:	4647      	mov	r7, r8
 800066e:	40be      	lsls	r6, r7
 8000670:	0032      	movs	r2, r6
 8000672:	1a80      	subs	r0, r0, r2
 8000674:	4199      	sbcs	r1, r3
 8000676:	9000      	str	r0, [sp, #0]
 8000678:	9101      	str	r1, [sp, #4]
 800067a:	e79f      	b.n	80005bc <__udivmoddi4+0x84>
 800067c:	42a3      	cmp	r3, r4
 800067e:	d8bc      	bhi.n	80005fa <__udivmoddi4+0xc2>
 8000680:	e783      	b.n	800058a <__udivmoddi4+0x52>
 8000682:	4642      	mov	r2, r8
 8000684:	2320      	movs	r3, #32
 8000686:	2100      	movs	r1, #0
 8000688:	1a9b      	subs	r3, r3, r2
 800068a:	2200      	movs	r2, #0
 800068c:	9100      	str	r1, [sp, #0]
 800068e:	9201      	str	r2, [sp, #4]
 8000690:	2201      	movs	r2, #1
 8000692:	40da      	lsrs	r2, r3
 8000694:	9201      	str	r2, [sp, #4]
 8000696:	e786      	b.n	80005a6 <__udivmoddi4+0x6e>
 8000698:	4642      	mov	r2, r8
 800069a:	2320      	movs	r3, #32
 800069c:	1a9b      	subs	r3, r3, r2
 800069e:	002a      	movs	r2, r5
 80006a0:	4646      	mov	r6, r8
 80006a2:	409a      	lsls	r2, r3
 80006a4:	0023      	movs	r3, r4
 80006a6:	40f3      	lsrs	r3, r6
 80006a8:	4644      	mov	r4, r8
 80006aa:	4313      	orrs	r3, r2
 80006ac:	002a      	movs	r2, r5
 80006ae:	40e2      	lsrs	r2, r4
 80006b0:	001c      	movs	r4, r3
 80006b2:	465b      	mov	r3, fp
 80006b4:	0015      	movs	r5, r2
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	dad4      	bge.n	8000664 <__udivmoddi4+0x12c>
 80006ba:	4642      	mov	r2, r8
 80006bc:	002f      	movs	r7, r5
 80006be:	2320      	movs	r3, #32
 80006c0:	0026      	movs	r6, r4
 80006c2:	4097      	lsls	r7, r2
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	40de      	lsrs	r6, r3
 80006c8:	003b      	movs	r3, r7
 80006ca:	4333      	orrs	r3, r6
 80006cc:	e7cd      	b.n	800066a <__udivmoddi4+0x132>
 80006ce:	46c0      	nop			; (mov r8, r8)

080006d0 <__aeabi_dadd>:
 80006d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d2:	464f      	mov	r7, r9
 80006d4:	46d6      	mov	lr, sl
 80006d6:	4646      	mov	r6, r8
 80006d8:	000d      	movs	r5, r1
 80006da:	0001      	movs	r1, r0
 80006dc:	0018      	movs	r0, r3
 80006de:	b5c0      	push	{r6, r7, lr}
 80006e0:	0017      	movs	r7, r2
 80006e2:	032b      	lsls	r3, r5, #12
 80006e4:	0a5a      	lsrs	r2, r3, #9
 80006e6:	0f4b      	lsrs	r3, r1, #29
 80006e8:	4313      	orrs	r3, r2
 80006ea:	00ca      	lsls	r2, r1, #3
 80006ec:	4691      	mov	r9, r2
 80006ee:	0302      	lsls	r2, r0, #12
 80006f0:	006e      	lsls	r6, r5, #1
 80006f2:	0041      	lsls	r1, r0, #1
 80006f4:	0a52      	lsrs	r2, r2, #9
 80006f6:	0fec      	lsrs	r4, r5, #31
 80006f8:	0f7d      	lsrs	r5, r7, #29
 80006fa:	4315      	orrs	r5, r2
 80006fc:	0d76      	lsrs	r6, r6, #21
 80006fe:	0d49      	lsrs	r1, r1, #21
 8000700:	0fc0      	lsrs	r0, r0, #31
 8000702:	4682      	mov	sl, r0
 8000704:	46ac      	mov	ip, r5
 8000706:	00ff      	lsls	r7, r7, #3
 8000708:	1a72      	subs	r2, r6, r1
 800070a:	4284      	cmp	r4, r0
 800070c:	d100      	bne.n	8000710 <__aeabi_dadd+0x40>
 800070e:	e098      	b.n	8000842 <__aeabi_dadd+0x172>
 8000710:	2a00      	cmp	r2, #0
 8000712:	dc00      	bgt.n	8000716 <__aeabi_dadd+0x46>
 8000714:	e081      	b.n	800081a <__aeabi_dadd+0x14a>
 8000716:	2900      	cmp	r1, #0
 8000718:	d100      	bne.n	800071c <__aeabi_dadd+0x4c>
 800071a:	e0b6      	b.n	800088a <__aeabi_dadd+0x1ba>
 800071c:	49c9      	ldr	r1, [pc, #804]	; (8000a44 <__aeabi_dadd+0x374>)
 800071e:	428e      	cmp	r6, r1
 8000720:	d100      	bne.n	8000724 <__aeabi_dadd+0x54>
 8000722:	e172      	b.n	8000a0a <__aeabi_dadd+0x33a>
 8000724:	2180      	movs	r1, #128	; 0x80
 8000726:	0028      	movs	r0, r5
 8000728:	0409      	lsls	r1, r1, #16
 800072a:	4308      	orrs	r0, r1
 800072c:	4684      	mov	ip, r0
 800072e:	2a38      	cmp	r2, #56	; 0x38
 8000730:	dd00      	ble.n	8000734 <__aeabi_dadd+0x64>
 8000732:	e15e      	b.n	80009f2 <__aeabi_dadd+0x322>
 8000734:	2a1f      	cmp	r2, #31
 8000736:	dd00      	ble.n	800073a <__aeabi_dadd+0x6a>
 8000738:	e1ee      	b.n	8000b18 <__aeabi_dadd+0x448>
 800073a:	2020      	movs	r0, #32
 800073c:	0039      	movs	r1, r7
 800073e:	4665      	mov	r5, ip
 8000740:	1a80      	subs	r0, r0, r2
 8000742:	4087      	lsls	r7, r0
 8000744:	40d1      	lsrs	r1, r2
 8000746:	4085      	lsls	r5, r0
 8000748:	430d      	orrs	r5, r1
 800074a:	0039      	movs	r1, r7
 800074c:	1e4f      	subs	r7, r1, #1
 800074e:	41b9      	sbcs	r1, r7
 8000750:	4667      	mov	r7, ip
 8000752:	40d7      	lsrs	r7, r2
 8000754:	4329      	orrs	r1, r5
 8000756:	1bdb      	subs	r3, r3, r7
 8000758:	464a      	mov	r2, r9
 800075a:	1a55      	subs	r5, r2, r1
 800075c:	45a9      	cmp	r9, r5
 800075e:	4189      	sbcs	r1, r1
 8000760:	4249      	negs	r1, r1
 8000762:	1a5b      	subs	r3, r3, r1
 8000764:	4698      	mov	r8, r3
 8000766:	4643      	mov	r3, r8
 8000768:	021b      	lsls	r3, r3, #8
 800076a:	d400      	bmi.n	800076e <__aeabi_dadd+0x9e>
 800076c:	e0cc      	b.n	8000908 <__aeabi_dadd+0x238>
 800076e:	4643      	mov	r3, r8
 8000770:	025b      	lsls	r3, r3, #9
 8000772:	0a5b      	lsrs	r3, r3, #9
 8000774:	4698      	mov	r8, r3
 8000776:	4643      	mov	r3, r8
 8000778:	2b00      	cmp	r3, #0
 800077a:	d100      	bne.n	800077e <__aeabi_dadd+0xae>
 800077c:	e12c      	b.n	80009d8 <__aeabi_dadd+0x308>
 800077e:	4640      	mov	r0, r8
 8000780:	f001 fe8e 	bl	80024a0 <__clzsi2>
 8000784:	0001      	movs	r1, r0
 8000786:	3908      	subs	r1, #8
 8000788:	2220      	movs	r2, #32
 800078a:	0028      	movs	r0, r5
 800078c:	4643      	mov	r3, r8
 800078e:	1a52      	subs	r2, r2, r1
 8000790:	408b      	lsls	r3, r1
 8000792:	40d0      	lsrs	r0, r2
 8000794:	408d      	lsls	r5, r1
 8000796:	4303      	orrs	r3, r0
 8000798:	428e      	cmp	r6, r1
 800079a:	dd00      	ble.n	800079e <__aeabi_dadd+0xce>
 800079c:	e117      	b.n	80009ce <__aeabi_dadd+0x2fe>
 800079e:	1b8e      	subs	r6, r1, r6
 80007a0:	1c72      	adds	r2, r6, #1
 80007a2:	2a1f      	cmp	r2, #31
 80007a4:	dd00      	ble.n	80007a8 <__aeabi_dadd+0xd8>
 80007a6:	e1a7      	b.n	8000af8 <__aeabi_dadd+0x428>
 80007a8:	2120      	movs	r1, #32
 80007aa:	0018      	movs	r0, r3
 80007ac:	002e      	movs	r6, r5
 80007ae:	1a89      	subs	r1, r1, r2
 80007b0:	408d      	lsls	r5, r1
 80007b2:	4088      	lsls	r0, r1
 80007b4:	40d6      	lsrs	r6, r2
 80007b6:	40d3      	lsrs	r3, r2
 80007b8:	1e69      	subs	r1, r5, #1
 80007ba:	418d      	sbcs	r5, r1
 80007bc:	4330      	orrs	r0, r6
 80007be:	4698      	mov	r8, r3
 80007c0:	2600      	movs	r6, #0
 80007c2:	4305      	orrs	r5, r0
 80007c4:	076b      	lsls	r3, r5, #29
 80007c6:	d009      	beq.n	80007dc <__aeabi_dadd+0x10c>
 80007c8:	230f      	movs	r3, #15
 80007ca:	402b      	ands	r3, r5
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	d005      	beq.n	80007dc <__aeabi_dadd+0x10c>
 80007d0:	1d2b      	adds	r3, r5, #4
 80007d2:	42ab      	cmp	r3, r5
 80007d4:	41ad      	sbcs	r5, r5
 80007d6:	426d      	negs	r5, r5
 80007d8:	44a8      	add	r8, r5
 80007da:	001d      	movs	r5, r3
 80007dc:	4643      	mov	r3, r8
 80007de:	021b      	lsls	r3, r3, #8
 80007e0:	d400      	bmi.n	80007e4 <__aeabi_dadd+0x114>
 80007e2:	e094      	b.n	800090e <__aeabi_dadd+0x23e>
 80007e4:	4b97      	ldr	r3, [pc, #604]	; (8000a44 <__aeabi_dadd+0x374>)
 80007e6:	1c72      	adds	r2, r6, #1
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d100      	bne.n	80007ee <__aeabi_dadd+0x11e>
 80007ec:	e09d      	b.n	800092a <__aeabi_dadd+0x25a>
 80007ee:	4641      	mov	r1, r8
 80007f0:	4b95      	ldr	r3, [pc, #596]	; (8000a48 <__aeabi_dadd+0x378>)
 80007f2:	08ed      	lsrs	r5, r5, #3
 80007f4:	4019      	ands	r1, r3
 80007f6:	000b      	movs	r3, r1
 80007f8:	0552      	lsls	r2, r2, #21
 80007fa:	0749      	lsls	r1, r1, #29
 80007fc:	025b      	lsls	r3, r3, #9
 80007fe:	4329      	orrs	r1, r5
 8000800:	0b1b      	lsrs	r3, r3, #12
 8000802:	0d52      	lsrs	r2, r2, #21
 8000804:	0512      	lsls	r2, r2, #20
 8000806:	4313      	orrs	r3, r2
 8000808:	07e4      	lsls	r4, r4, #31
 800080a:	4323      	orrs	r3, r4
 800080c:	0008      	movs	r0, r1
 800080e:	0019      	movs	r1, r3
 8000810:	bce0      	pop	{r5, r6, r7}
 8000812:	46ba      	mov	sl, r7
 8000814:	46b1      	mov	r9, r6
 8000816:	46a8      	mov	r8, r5
 8000818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081a:	2a00      	cmp	r2, #0
 800081c:	d043      	beq.n	80008a6 <__aeabi_dadd+0x1d6>
 800081e:	1b8a      	subs	r2, r1, r6
 8000820:	2e00      	cmp	r6, #0
 8000822:	d000      	beq.n	8000826 <__aeabi_dadd+0x156>
 8000824:	e12a      	b.n	8000a7c <__aeabi_dadd+0x3ac>
 8000826:	464c      	mov	r4, r9
 8000828:	431c      	orrs	r4, r3
 800082a:	d100      	bne.n	800082e <__aeabi_dadd+0x15e>
 800082c:	e1d1      	b.n	8000bd2 <__aeabi_dadd+0x502>
 800082e:	1e54      	subs	r4, r2, #1
 8000830:	2a01      	cmp	r2, #1
 8000832:	d100      	bne.n	8000836 <__aeabi_dadd+0x166>
 8000834:	e21f      	b.n	8000c76 <__aeabi_dadd+0x5a6>
 8000836:	4d83      	ldr	r5, [pc, #524]	; (8000a44 <__aeabi_dadd+0x374>)
 8000838:	42aa      	cmp	r2, r5
 800083a:	d100      	bne.n	800083e <__aeabi_dadd+0x16e>
 800083c:	e272      	b.n	8000d24 <__aeabi_dadd+0x654>
 800083e:	0022      	movs	r2, r4
 8000840:	e123      	b.n	8000a8a <__aeabi_dadd+0x3ba>
 8000842:	2a00      	cmp	r2, #0
 8000844:	dc00      	bgt.n	8000848 <__aeabi_dadd+0x178>
 8000846:	e098      	b.n	800097a <__aeabi_dadd+0x2aa>
 8000848:	2900      	cmp	r1, #0
 800084a:	d042      	beq.n	80008d2 <__aeabi_dadd+0x202>
 800084c:	497d      	ldr	r1, [pc, #500]	; (8000a44 <__aeabi_dadd+0x374>)
 800084e:	428e      	cmp	r6, r1
 8000850:	d100      	bne.n	8000854 <__aeabi_dadd+0x184>
 8000852:	e0da      	b.n	8000a0a <__aeabi_dadd+0x33a>
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	0028      	movs	r0, r5
 8000858:	0409      	lsls	r1, r1, #16
 800085a:	4308      	orrs	r0, r1
 800085c:	4684      	mov	ip, r0
 800085e:	2a38      	cmp	r2, #56	; 0x38
 8000860:	dd00      	ble.n	8000864 <__aeabi_dadd+0x194>
 8000862:	e129      	b.n	8000ab8 <__aeabi_dadd+0x3e8>
 8000864:	2a1f      	cmp	r2, #31
 8000866:	dc00      	bgt.n	800086a <__aeabi_dadd+0x19a>
 8000868:	e187      	b.n	8000b7a <__aeabi_dadd+0x4aa>
 800086a:	0011      	movs	r1, r2
 800086c:	4665      	mov	r5, ip
 800086e:	3920      	subs	r1, #32
 8000870:	40cd      	lsrs	r5, r1
 8000872:	2a20      	cmp	r2, #32
 8000874:	d004      	beq.n	8000880 <__aeabi_dadd+0x1b0>
 8000876:	2040      	movs	r0, #64	; 0x40
 8000878:	4661      	mov	r1, ip
 800087a:	1a82      	subs	r2, r0, r2
 800087c:	4091      	lsls	r1, r2
 800087e:	430f      	orrs	r7, r1
 8000880:	0039      	movs	r1, r7
 8000882:	1e4f      	subs	r7, r1, #1
 8000884:	41b9      	sbcs	r1, r7
 8000886:	430d      	orrs	r5, r1
 8000888:	e11b      	b.n	8000ac2 <__aeabi_dadd+0x3f2>
 800088a:	0029      	movs	r1, r5
 800088c:	4339      	orrs	r1, r7
 800088e:	d100      	bne.n	8000892 <__aeabi_dadd+0x1c2>
 8000890:	e0b5      	b.n	80009fe <__aeabi_dadd+0x32e>
 8000892:	1e51      	subs	r1, r2, #1
 8000894:	2a01      	cmp	r2, #1
 8000896:	d100      	bne.n	800089a <__aeabi_dadd+0x1ca>
 8000898:	e1ab      	b.n	8000bf2 <__aeabi_dadd+0x522>
 800089a:	486a      	ldr	r0, [pc, #424]	; (8000a44 <__aeabi_dadd+0x374>)
 800089c:	4282      	cmp	r2, r0
 800089e:	d100      	bne.n	80008a2 <__aeabi_dadd+0x1d2>
 80008a0:	e1b2      	b.n	8000c08 <__aeabi_dadd+0x538>
 80008a2:	000a      	movs	r2, r1
 80008a4:	e743      	b.n	800072e <__aeabi_dadd+0x5e>
 80008a6:	4969      	ldr	r1, [pc, #420]	; (8000a4c <__aeabi_dadd+0x37c>)
 80008a8:	1c75      	adds	r5, r6, #1
 80008aa:	420d      	tst	r5, r1
 80008ac:	d000      	beq.n	80008b0 <__aeabi_dadd+0x1e0>
 80008ae:	e0cf      	b.n	8000a50 <__aeabi_dadd+0x380>
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_dadd+0x1e6>
 80008b4:	e193      	b.n	8000bde <__aeabi_dadd+0x50e>
 80008b6:	4649      	mov	r1, r9
 80008b8:	4319      	orrs	r1, r3
 80008ba:	d100      	bne.n	80008be <__aeabi_dadd+0x1ee>
 80008bc:	e1d1      	b.n	8000c62 <__aeabi_dadd+0x592>
 80008be:	4661      	mov	r1, ip
 80008c0:	4339      	orrs	r1, r7
 80008c2:	d000      	beq.n	80008c6 <__aeabi_dadd+0x1f6>
 80008c4:	e1e3      	b.n	8000c8e <__aeabi_dadd+0x5be>
 80008c6:	4649      	mov	r1, r9
 80008c8:	0758      	lsls	r0, r3, #29
 80008ca:	08c9      	lsrs	r1, r1, #3
 80008cc:	4301      	orrs	r1, r0
 80008ce:	08db      	lsrs	r3, r3, #3
 80008d0:	e026      	b.n	8000920 <__aeabi_dadd+0x250>
 80008d2:	0029      	movs	r1, r5
 80008d4:	4339      	orrs	r1, r7
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x20a>
 80008d8:	e091      	b.n	80009fe <__aeabi_dadd+0x32e>
 80008da:	1e51      	subs	r1, r2, #1
 80008dc:	2a01      	cmp	r2, #1
 80008de:	d005      	beq.n	80008ec <__aeabi_dadd+0x21c>
 80008e0:	4858      	ldr	r0, [pc, #352]	; (8000a44 <__aeabi_dadd+0x374>)
 80008e2:	4282      	cmp	r2, r0
 80008e4:	d100      	bne.n	80008e8 <__aeabi_dadd+0x218>
 80008e6:	e18f      	b.n	8000c08 <__aeabi_dadd+0x538>
 80008e8:	000a      	movs	r2, r1
 80008ea:	e7b8      	b.n	800085e <__aeabi_dadd+0x18e>
 80008ec:	003d      	movs	r5, r7
 80008ee:	444d      	add	r5, r9
 80008f0:	454d      	cmp	r5, r9
 80008f2:	4189      	sbcs	r1, r1
 80008f4:	4463      	add	r3, ip
 80008f6:	4698      	mov	r8, r3
 80008f8:	4249      	negs	r1, r1
 80008fa:	4488      	add	r8, r1
 80008fc:	4643      	mov	r3, r8
 80008fe:	2602      	movs	r6, #2
 8000900:	021b      	lsls	r3, r3, #8
 8000902:	d500      	bpl.n	8000906 <__aeabi_dadd+0x236>
 8000904:	e0eb      	b.n	8000ade <__aeabi_dadd+0x40e>
 8000906:	3e01      	subs	r6, #1
 8000908:	076b      	lsls	r3, r5, #29
 800090a:	d000      	beq.n	800090e <__aeabi_dadd+0x23e>
 800090c:	e75c      	b.n	80007c8 <__aeabi_dadd+0xf8>
 800090e:	4643      	mov	r3, r8
 8000910:	08e9      	lsrs	r1, r5, #3
 8000912:	075a      	lsls	r2, r3, #29
 8000914:	4311      	orrs	r1, r2
 8000916:	0032      	movs	r2, r6
 8000918:	08db      	lsrs	r3, r3, #3
 800091a:	484a      	ldr	r0, [pc, #296]	; (8000a44 <__aeabi_dadd+0x374>)
 800091c:	4282      	cmp	r2, r0
 800091e:	d021      	beq.n	8000964 <__aeabi_dadd+0x294>
 8000920:	031b      	lsls	r3, r3, #12
 8000922:	0552      	lsls	r2, r2, #21
 8000924:	0b1b      	lsrs	r3, r3, #12
 8000926:	0d52      	lsrs	r2, r2, #21
 8000928:	e76c      	b.n	8000804 <__aeabi_dadd+0x134>
 800092a:	2300      	movs	r3, #0
 800092c:	2100      	movs	r1, #0
 800092e:	e769      	b.n	8000804 <__aeabi_dadd+0x134>
 8000930:	002a      	movs	r2, r5
 8000932:	433a      	orrs	r2, r7
 8000934:	d069      	beq.n	8000a0a <__aeabi_dadd+0x33a>
 8000936:	464a      	mov	r2, r9
 8000938:	0758      	lsls	r0, r3, #29
 800093a:	08d1      	lsrs	r1, r2, #3
 800093c:	08da      	lsrs	r2, r3, #3
 800093e:	2380      	movs	r3, #128	; 0x80
 8000940:	031b      	lsls	r3, r3, #12
 8000942:	4308      	orrs	r0, r1
 8000944:	421a      	tst	r2, r3
 8000946:	d007      	beq.n	8000958 <__aeabi_dadd+0x288>
 8000948:	0029      	movs	r1, r5
 800094a:	08ed      	lsrs	r5, r5, #3
 800094c:	421d      	tst	r5, r3
 800094e:	d103      	bne.n	8000958 <__aeabi_dadd+0x288>
 8000950:	002a      	movs	r2, r5
 8000952:	08ff      	lsrs	r7, r7, #3
 8000954:	0748      	lsls	r0, r1, #29
 8000956:	4338      	orrs	r0, r7
 8000958:	0f43      	lsrs	r3, r0, #29
 800095a:	00c1      	lsls	r1, r0, #3
 800095c:	075b      	lsls	r3, r3, #29
 800095e:	08c9      	lsrs	r1, r1, #3
 8000960:	4319      	orrs	r1, r3
 8000962:	0013      	movs	r3, r2
 8000964:	000a      	movs	r2, r1
 8000966:	431a      	orrs	r2, r3
 8000968:	d100      	bne.n	800096c <__aeabi_dadd+0x29c>
 800096a:	e213      	b.n	8000d94 <__aeabi_dadd+0x6c4>
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	0312      	lsls	r2, r2, #12
 8000970:	4313      	orrs	r3, r2
 8000972:	031b      	lsls	r3, r3, #12
 8000974:	4a33      	ldr	r2, [pc, #204]	; (8000a44 <__aeabi_dadd+0x374>)
 8000976:	0b1b      	lsrs	r3, r3, #12
 8000978:	e744      	b.n	8000804 <__aeabi_dadd+0x134>
 800097a:	2a00      	cmp	r2, #0
 800097c:	d04b      	beq.n	8000a16 <__aeabi_dadd+0x346>
 800097e:	1b8a      	subs	r2, r1, r6
 8000980:	2e00      	cmp	r6, #0
 8000982:	d100      	bne.n	8000986 <__aeabi_dadd+0x2b6>
 8000984:	e0e7      	b.n	8000b56 <__aeabi_dadd+0x486>
 8000986:	482f      	ldr	r0, [pc, #188]	; (8000a44 <__aeabi_dadd+0x374>)
 8000988:	4281      	cmp	r1, r0
 800098a:	d100      	bne.n	800098e <__aeabi_dadd+0x2be>
 800098c:	e195      	b.n	8000cba <__aeabi_dadd+0x5ea>
 800098e:	2080      	movs	r0, #128	; 0x80
 8000990:	0400      	lsls	r0, r0, #16
 8000992:	4303      	orrs	r3, r0
 8000994:	2a38      	cmp	r2, #56	; 0x38
 8000996:	dd00      	ble.n	800099a <__aeabi_dadd+0x2ca>
 8000998:	e143      	b.n	8000c22 <__aeabi_dadd+0x552>
 800099a:	2a1f      	cmp	r2, #31
 800099c:	dd00      	ble.n	80009a0 <__aeabi_dadd+0x2d0>
 800099e:	e1db      	b.n	8000d58 <__aeabi_dadd+0x688>
 80009a0:	2020      	movs	r0, #32
 80009a2:	001d      	movs	r5, r3
 80009a4:	464e      	mov	r6, r9
 80009a6:	1a80      	subs	r0, r0, r2
 80009a8:	4085      	lsls	r5, r0
 80009aa:	40d6      	lsrs	r6, r2
 80009ac:	4335      	orrs	r5, r6
 80009ae:	464e      	mov	r6, r9
 80009b0:	4086      	lsls	r6, r0
 80009b2:	0030      	movs	r0, r6
 80009b4:	40d3      	lsrs	r3, r2
 80009b6:	1e46      	subs	r6, r0, #1
 80009b8:	41b0      	sbcs	r0, r6
 80009ba:	449c      	add	ip, r3
 80009bc:	4305      	orrs	r5, r0
 80009be:	19ed      	adds	r5, r5, r7
 80009c0:	42bd      	cmp	r5, r7
 80009c2:	419b      	sbcs	r3, r3
 80009c4:	425b      	negs	r3, r3
 80009c6:	4463      	add	r3, ip
 80009c8:	4698      	mov	r8, r3
 80009ca:	000e      	movs	r6, r1
 80009cc:	e07f      	b.n	8000ace <__aeabi_dadd+0x3fe>
 80009ce:	4a1e      	ldr	r2, [pc, #120]	; (8000a48 <__aeabi_dadd+0x378>)
 80009d0:	1a76      	subs	r6, r6, r1
 80009d2:	4013      	ands	r3, r2
 80009d4:	4698      	mov	r8, r3
 80009d6:	e6f5      	b.n	80007c4 <__aeabi_dadd+0xf4>
 80009d8:	0028      	movs	r0, r5
 80009da:	f001 fd61 	bl	80024a0 <__clzsi2>
 80009de:	0001      	movs	r1, r0
 80009e0:	3118      	adds	r1, #24
 80009e2:	291f      	cmp	r1, #31
 80009e4:	dc00      	bgt.n	80009e8 <__aeabi_dadd+0x318>
 80009e6:	e6cf      	b.n	8000788 <__aeabi_dadd+0xb8>
 80009e8:	002b      	movs	r3, r5
 80009ea:	3808      	subs	r0, #8
 80009ec:	4083      	lsls	r3, r0
 80009ee:	2500      	movs	r5, #0
 80009f0:	e6d2      	b.n	8000798 <__aeabi_dadd+0xc8>
 80009f2:	4662      	mov	r2, ip
 80009f4:	433a      	orrs	r2, r7
 80009f6:	0011      	movs	r1, r2
 80009f8:	1e4f      	subs	r7, r1, #1
 80009fa:	41b9      	sbcs	r1, r7
 80009fc:	e6ac      	b.n	8000758 <__aeabi_dadd+0x88>
 80009fe:	4649      	mov	r1, r9
 8000a00:	0758      	lsls	r0, r3, #29
 8000a02:	08c9      	lsrs	r1, r1, #3
 8000a04:	4301      	orrs	r1, r0
 8000a06:	08db      	lsrs	r3, r3, #3
 8000a08:	e787      	b.n	800091a <__aeabi_dadd+0x24a>
 8000a0a:	4649      	mov	r1, r9
 8000a0c:	075a      	lsls	r2, r3, #29
 8000a0e:	08c9      	lsrs	r1, r1, #3
 8000a10:	4311      	orrs	r1, r2
 8000a12:	08db      	lsrs	r3, r3, #3
 8000a14:	e7a6      	b.n	8000964 <__aeabi_dadd+0x294>
 8000a16:	490d      	ldr	r1, [pc, #52]	; (8000a4c <__aeabi_dadd+0x37c>)
 8000a18:	1c70      	adds	r0, r6, #1
 8000a1a:	4208      	tst	r0, r1
 8000a1c:	d000      	beq.n	8000a20 <__aeabi_dadd+0x350>
 8000a1e:	e0bb      	b.n	8000b98 <__aeabi_dadd+0x4c8>
 8000a20:	2e00      	cmp	r6, #0
 8000a22:	d000      	beq.n	8000a26 <__aeabi_dadd+0x356>
 8000a24:	e114      	b.n	8000c50 <__aeabi_dadd+0x580>
 8000a26:	4649      	mov	r1, r9
 8000a28:	4319      	orrs	r1, r3
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_dadd+0x35e>
 8000a2c:	e175      	b.n	8000d1a <__aeabi_dadd+0x64a>
 8000a2e:	0029      	movs	r1, r5
 8000a30:	4339      	orrs	r1, r7
 8000a32:	d000      	beq.n	8000a36 <__aeabi_dadd+0x366>
 8000a34:	e17e      	b.n	8000d34 <__aeabi_dadd+0x664>
 8000a36:	4649      	mov	r1, r9
 8000a38:	0758      	lsls	r0, r3, #29
 8000a3a:	08c9      	lsrs	r1, r1, #3
 8000a3c:	4301      	orrs	r1, r0
 8000a3e:	08db      	lsrs	r3, r3, #3
 8000a40:	e76e      	b.n	8000920 <__aeabi_dadd+0x250>
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	000007ff 	.word	0x000007ff
 8000a48:	ff7fffff 	.word	0xff7fffff
 8000a4c:	000007fe 	.word	0x000007fe
 8000a50:	4649      	mov	r1, r9
 8000a52:	1bcd      	subs	r5, r1, r7
 8000a54:	4661      	mov	r1, ip
 8000a56:	1a58      	subs	r0, r3, r1
 8000a58:	45a9      	cmp	r9, r5
 8000a5a:	4189      	sbcs	r1, r1
 8000a5c:	4249      	negs	r1, r1
 8000a5e:	4688      	mov	r8, r1
 8000a60:	0001      	movs	r1, r0
 8000a62:	4640      	mov	r0, r8
 8000a64:	1a09      	subs	r1, r1, r0
 8000a66:	4688      	mov	r8, r1
 8000a68:	0209      	lsls	r1, r1, #8
 8000a6a:	d500      	bpl.n	8000a6e <__aeabi_dadd+0x39e>
 8000a6c:	e0a6      	b.n	8000bbc <__aeabi_dadd+0x4ec>
 8000a6e:	4641      	mov	r1, r8
 8000a70:	4329      	orrs	r1, r5
 8000a72:	d000      	beq.n	8000a76 <__aeabi_dadd+0x3a6>
 8000a74:	e67f      	b.n	8000776 <__aeabi_dadd+0xa6>
 8000a76:	2300      	movs	r3, #0
 8000a78:	2400      	movs	r4, #0
 8000a7a:	e751      	b.n	8000920 <__aeabi_dadd+0x250>
 8000a7c:	4cc7      	ldr	r4, [pc, #796]	; (8000d9c <__aeabi_dadd+0x6cc>)
 8000a7e:	42a1      	cmp	r1, r4
 8000a80:	d100      	bne.n	8000a84 <__aeabi_dadd+0x3b4>
 8000a82:	e0c7      	b.n	8000c14 <__aeabi_dadd+0x544>
 8000a84:	2480      	movs	r4, #128	; 0x80
 8000a86:	0424      	lsls	r4, r4, #16
 8000a88:	4323      	orrs	r3, r4
 8000a8a:	2a38      	cmp	r2, #56	; 0x38
 8000a8c:	dc54      	bgt.n	8000b38 <__aeabi_dadd+0x468>
 8000a8e:	2a1f      	cmp	r2, #31
 8000a90:	dd00      	ble.n	8000a94 <__aeabi_dadd+0x3c4>
 8000a92:	e0cc      	b.n	8000c2e <__aeabi_dadd+0x55e>
 8000a94:	2420      	movs	r4, #32
 8000a96:	4648      	mov	r0, r9
 8000a98:	1aa4      	subs	r4, r4, r2
 8000a9a:	001d      	movs	r5, r3
 8000a9c:	464e      	mov	r6, r9
 8000a9e:	40a0      	lsls	r0, r4
 8000aa0:	40d6      	lsrs	r6, r2
 8000aa2:	40a5      	lsls	r5, r4
 8000aa4:	0004      	movs	r4, r0
 8000aa6:	40d3      	lsrs	r3, r2
 8000aa8:	4662      	mov	r2, ip
 8000aaa:	4335      	orrs	r5, r6
 8000aac:	1e66      	subs	r6, r4, #1
 8000aae:	41b4      	sbcs	r4, r6
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	469c      	mov	ip, r3
 8000ab4:	4325      	orrs	r5, r4
 8000ab6:	e044      	b.n	8000b42 <__aeabi_dadd+0x472>
 8000ab8:	4662      	mov	r2, ip
 8000aba:	433a      	orrs	r2, r7
 8000abc:	0015      	movs	r5, r2
 8000abe:	1e6f      	subs	r7, r5, #1
 8000ac0:	41bd      	sbcs	r5, r7
 8000ac2:	444d      	add	r5, r9
 8000ac4:	454d      	cmp	r5, r9
 8000ac6:	4189      	sbcs	r1, r1
 8000ac8:	4249      	negs	r1, r1
 8000aca:	4688      	mov	r8, r1
 8000acc:	4498      	add	r8, r3
 8000ace:	4643      	mov	r3, r8
 8000ad0:	021b      	lsls	r3, r3, #8
 8000ad2:	d400      	bmi.n	8000ad6 <__aeabi_dadd+0x406>
 8000ad4:	e718      	b.n	8000908 <__aeabi_dadd+0x238>
 8000ad6:	4bb1      	ldr	r3, [pc, #708]	; (8000d9c <__aeabi_dadd+0x6cc>)
 8000ad8:	3601      	adds	r6, #1
 8000ada:	429e      	cmp	r6, r3
 8000adc:	d049      	beq.n	8000b72 <__aeabi_dadd+0x4a2>
 8000ade:	4642      	mov	r2, r8
 8000ae0:	4baf      	ldr	r3, [pc, #700]	; (8000da0 <__aeabi_dadd+0x6d0>)
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	401a      	ands	r2, r3
 8000ae6:	0013      	movs	r3, r2
 8000ae8:	086a      	lsrs	r2, r5, #1
 8000aea:	400d      	ands	r5, r1
 8000aec:	4315      	orrs	r5, r2
 8000aee:	07d9      	lsls	r1, r3, #31
 8000af0:	085b      	lsrs	r3, r3, #1
 8000af2:	4698      	mov	r8, r3
 8000af4:	430d      	orrs	r5, r1
 8000af6:	e665      	b.n	80007c4 <__aeabi_dadd+0xf4>
 8000af8:	0018      	movs	r0, r3
 8000afa:	3e1f      	subs	r6, #31
 8000afc:	40f0      	lsrs	r0, r6
 8000afe:	2a20      	cmp	r2, #32
 8000b00:	d003      	beq.n	8000b0a <__aeabi_dadd+0x43a>
 8000b02:	2140      	movs	r1, #64	; 0x40
 8000b04:	1a8a      	subs	r2, r1, r2
 8000b06:	4093      	lsls	r3, r2
 8000b08:	431d      	orrs	r5, r3
 8000b0a:	1e69      	subs	r1, r5, #1
 8000b0c:	418d      	sbcs	r5, r1
 8000b0e:	2300      	movs	r3, #0
 8000b10:	2600      	movs	r6, #0
 8000b12:	4698      	mov	r8, r3
 8000b14:	4305      	orrs	r5, r0
 8000b16:	e6f7      	b.n	8000908 <__aeabi_dadd+0x238>
 8000b18:	0011      	movs	r1, r2
 8000b1a:	4665      	mov	r5, ip
 8000b1c:	3920      	subs	r1, #32
 8000b1e:	40cd      	lsrs	r5, r1
 8000b20:	2a20      	cmp	r2, #32
 8000b22:	d004      	beq.n	8000b2e <__aeabi_dadd+0x45e>
 8000b24:	2040      	movs	r0, #64	; 0x40
 8000b26:	4661      	mov	r1, ip
 8000b28:	1a82      	subs	r2, r0, r2
 8000b2a:	4091      	lsls	r1, r2
 8000b2c:	430f      	orrs	r7, r1
 8000b2e:	0039      	movs	r1, r7
 8000b30:	1e4f      	subs	r7, r1, #1
 8000b32:	41b9      	sbcs	r1, r7
 8000b34:	4329      	orrs	r1, r5
 8000b36:	e60f      	b.n	8000758 <__aeabi_dadd+0x88>
 8000b38:	464a      	mov	r2, r9
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	001d      	movs	r5, r3
 8000b3e:	1e6b      	subs	r3, r5, #1
 8000b40:	419d      	sbcs	r5, r3
 8000b42:	1b7d      	subs	r5, r7, r5
 8000b44:	42af      	cmp	r7, r5
 8000b46:	419b      	sbcs	r3, r3
 8000b48:	4662      	mov	r2, ip
 8000b4a:	425b      	negs	r3, r3
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	4698      	mov	r8, r3
 8000b50:	4654      	mov	r4, sl
 8000b52:	000e      	movs	r6, r1
 8000b54:	e607      	b.n	8000766 <__aeabi_dadd+0x96>
 8000b56:	4648      	mov	r0, r9
 8000b58:	4318      	orrs	r0, r3
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_dadd+0x48e>
 8000b5c:	e0b3      	b.n	8000cc6 <__aeabi_dadd+0x5f6>
 8000b5e:	1e50      	subs	r0, r2, #1
 8000b60:	2a01      	cmp	r2, #1
 8000b62:	d100      	bne.n	8000b66 <__aeabi_dadd+0x496>
 8000b64:	e10d      	b.n	8000d82 <__aeabi_dadd+0x6b2>
 8000b66:	4d8d      	ldr	r5, [pc, #564]	; (8000d9c <__aeabi_dadd+0x6cc>)
 8000b68:	42aa      	cmp	r2, r5
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_dadd+0x49e>
 8000b6c:	e0a5      	b.n	8000cba <__aeabi_dadd+0x5ea>
 8000b6e:	0002      	movs	r2, r0
 8000b70:	e710      	b.n	8000994 <__aeabi_dadd+0x2c4>
 8000b72:	0032      	movs	r2, r6
 8000b74:	2300      	movs	r3, #0
 8000b76:	2100      	movs	r1, #0
 8000b78:	e644      	b.n	8000804 <__aeabi_dadd+0x134>
 8000b7a:	2120      	movs	r1, #32
 8000b7c:	0038      	movs	r0, r7
 8000b7e:	1a89      	subs	r1, r1, r2
 8000b80:	4665      	mov	r5, ip
 8000b82:	408f      	lsls	r7, r1
 8000b84:	408d      	lsls	r5, r1
 8000b86:	40d0      	lsrs	r0, r2
 8000b88:	1e79      	subs	r1, r7, #1
 8000b8a:	418f      	sbcs	r7, r1
 8000b8c:	4305      	orrs	r5, r0
 8000b8e:	433d      	orrs	r5, r7
 8000b90:	4667      	mov	r7, ip
 8000b92:	40d7      	lsrs	r7, r2
 8000b94:	19db      	adds	r3, r3, r7
 8000b96:	e794      	b.n	8000ac2 <__aeabi_dadd+0x3f2>
 8000b98:	4a80      	ldr	r2, [pc, #512]	; (8000d9c <__aeabi_dadd+0x6cc>)
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_dadd+0x4d0>
 8000b9e:	e0ec      	b.n	8000d7a <__aeabi_dadd+0x6aa>
 8000ba0:	0039      	movs	r1, r7
 8000ba2:	4449      	add	r1, r9
 8000ba4:	4549      	cmp	r1, r9
 8000ba6:	4192      	sbcs	r2, r2
 8000ba8:	4463      	add	r3, ip
 8000baa:	4252      	negs	r2, r2
 8000bac:	189b      	adds	r3, r3, r2
 8000bae:	07dd      	lsls	r5, r3, #31
 8000bb0:	0849      	lsrs	r1, r1, #1
 8000bb2:	085b      	lsrs	r3, r3, #1
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	0006      	movs	r6, r0
 8000bb8:	430d      	orrs	r5, r1
 8000bba:	e6a5      	b.n	8000908 <__aeabi_dadd+0x238>
 8000bbc:	464a      	mov	r2, r9
 8000bbe:	1abd      	subs	r5, r7, r2
 8000bc0:	42af      	cmp	r7, r5
 8000bc2:	4189      	sbcs	r1, r1
 8000bc4:	4662      	mov	r2, ip
 8000bc6:	4249      	negs	r1, r1
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	1a5b      	subs	r3, r3, r1
 8000bcc:	4698      	mov	r8, r3
 8000bce:	4654      	mov	r4, sl
 8000bd0:	e5d1      	b.n	8000776 <__aeabi_dadd+0xa6>
 8000bd2:	076c      	lsls	r4, r5, #29
 8000bd4:	08f9      	lsrs	r1, r7, #3
 8000bd6:	4321      	orrs	r1, r4
 8000bd8:	08eb      	lsrs	r3, r5, #3
 8000bda:	0004      	movs	r4, r0
 8000bdc:	e69d      	b.n	800091a <__aeabi_dadd+0x24a>
 8000bde:	464a      	mov	r2, r9
 8000be0:	431a      	orrs	r2, r3
 8000be2:	d175      	bne.n	8000cd0 <__aeabi_dadd+0x600>
 8000be4:	4661      	mov	r1, ip
 8000be6:	4339      	orrs	r1, r7
 8000be8:	d114      	bne.n	8000c14 <__aeabi_dadd+0x544>
 8000bea:	2380      	movs	r3, #128	; 0x80
 8000bec:	2400      	movs	r4, #0
 8000bee:	031b      	lsls	r3, r3, #12
 8000bf0:	e6bc      	b.n	800096c <__aeabi_dadd+0x29c>
 8000bf2:	464a      	mov	r2, r9
 8000bf4:	1bd5      	subs	r5, r2, r7
 8000bf6:	45a9      	cmp	r9, r5
 8000bf8:	4189      	sbcs	r1, r1
 8000bfa:	4662      	mov	r2, ip
 8000bfc:	4249      	negs	r1, r1
 8000bfe:	1a9b      	subs	r3, r3, r2
 8000c00:	1a5b      	subs	r3, r3, r1
 8000c02:	4698      	mov	r8, r3
 8000c04:	2601      	movs	r6, #1
 8000c06:	e5ae      	b.n	8000766 <__aeabi_dadd+0x96>
 8000c08:	464a      	mov	r2, r9
 8000c0a:	08d1      	lsrs	r1, r2, #3
 8000c0c:	075a      	lsls	r2, r3, #29
 8000c0e:	4311      	orrs	r1, r2
 8000c10:	08db      	lsrs	r3, r3, #3
 8000c12:	e6a7      	b.n	8000964 <__aeabi_dadd+0x294>
 8000c14:	4663      	mov	r3, ip
 8000c16:	08f9      	lsrs	r1, r7, #3
 8000c18:	075a      	lsls	r2, r3, #29
 8000c1a:	4654      	mov	r4, sl
 8000c1c:	4311      	orrs	r1, r2
 8000c1e:	08db      	lsrs	r3, r3, #3
 8000c20:	e6a0      	b.n	8000964 <__aeabi_dadd+0x294>
 8000c22:	464a      	mov	r2, r9
 8000c24:	4313      	orrs	r3, r2
 8000c26:	001d      	movs	r5, r3
 8000c28:	1e6b      	subs	r3, r5, #1
 8000c2a:	419d      	sbcs	r5, r3
 8000c2c:	e6c7      	b.n	80009be <__aeabi_dadd+0x2ee>
 8000c2e:	0014      	movs	r4, r2
 8000c30:	001e      	movs	r6, r3
 8000c32:	3c20      	subs	r4, #32
 8000c34:	40e6      	lsrs	r6, r4
 8000c36:	2a20      	cmp	r2, #32
 8000c38:	d005      	beq.n	8000c46 <__aeabi_dadd+0x576>
 8000c3a:	2440      	movs	r4, #64	; 0x40
 8000c3c:	1aa2      	subs	r2, r4, r2
 8000c3e:	4093      	lsls	r3, r2
 8000c40:	464a      	mov	r2, r9
 8000c42:	431a      	orrs	r2, r3
 8000c44:	4691      	mov	r9, r2
 8000c46:	464d      	mov	r5, r9
 8000c48:	1e6b      	subs	r3, r5, #1
 8000c4a:	419d      	sbcs	r5, r3
 8000c4c:	4335      	orrs	r5, r6
 8000c4e:	e778      	b.n	8000b42 <__aeabi_dadd+0x472>
 8000c50:	464a      	mov	r2, r9
 8000c52:	431a      	orrs	r2, r3
 8000c54:	d000      	beq.n	8000c58 <__aeabi_dadd+0x588>
 8000c56:	e66b      	b.n	8000930 <__aeabi_dadd+0x260>
 8000c58:	076b      	lsls	r3, r5, #29
 8000c5a:	08f9      	lsrs	r1, r7, #3
 8000c5c:	4319      	orrs	r1, r3
 8000c5e:	08eb      	lsrs	r3, r5, #3
 8000c60:	e680      	b.n	8000964 <__aeabi_dadd+0x294>
 8000c62:	4661      	mov	r1, ip
 8000c64:	4339      	orrs	r1, r7
 8000c66:	d054      	beq.n	8000d12 <__aeabi_dadd+0x642>
 8000c68:	4663      	mov	r3, ip
 8000c6a:	08f9      	lsrs	r1, r7, #3
 8000c6c:	075c      	lsls	r4, r3, #29
 8000c6e:	4321      	orrs	r1, r4
 8000c70:	08db      	lsrs	r3, r3, #3
 8000c72:	0004      	movs	r4, r0
 8000c74:	e654      	b.n	8000920 <__aeabi_dadd+0x250>
 8000c76:	464a      	mov	r2, r9
 8000c78:	1abd      	subs	r5, r7, r2
 8000c7a:	42af      	cmp	r7, r5
 8000c7c:	4189      	sbcs	r1, r1
 8000c7e:	4662      	mov	r2, ip
 8000c80:	4249      	negs	r1, r1
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	1a5b      	subs	r3, r3, r1
 8000c86:	4698      	mov	r8, r3
 8000c88:	0004      	movs	r4, r0
 8000c8a:	2601      	movs	r6, #1
 8000c8c:	e56b      	b.n	8000766 <__aeabi_dadd+0x96>
 8000c8e:	464a      	mov	r2, r9
 8000c90:	1bd5      	subs	r5, r2, r7
 8000c92:	45a9      	cmp	r9, r5
 8000c94:	4189      	sbcs	r1, r1
 8000c96:	4662      	mov	r2, ip
 8000c98:	4249      	negs	r1, r1
 8000c9a:	1a9a      	subs	r2, r3, r2
 8000c9c:	1a52      	subs	r2, r2, r1
 8000c9e:	4690      	mov	r8, r2
 8000ca0:	0212      	lsls	r2, r2, #8
 8000ca2:	d532      	bpl.n	8000d0a <__aeabi_dadd+0x63a>
 8000ca4:	464a      	mov	r2, r9
 8000ca6:	1abd      	subs	r5, r7, r2
 8000ca8:	42af      	cmp	r7, r5
 8000caa:	4189      	sbcs	r1, r1
 8000cac:	4662      	mov	r2, ip
 8000cae:	4249      	negs	r1, r1
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	1a5b      	subs	r3, r3, r1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	0004      	movs	r4, r0
 8000cb8:	e584      	b.n	80007c4 <__aeabi_dadd+0xf4>
 8000cba:	4663      	mov	r3, ip
 8000cbc:	08f9      	lsrs	r1, r7, #3
 8000cbe:	075a      	lsls	r2, r3, #29
 8000cc0:	4311      	orrs	r1, r2
 8000cc2:	08db      	lsrs	r3, r3, #3
 8000cc4:	e64e      	b.n	8000964 <__aeabi_dadd+0x294>
 8000cc6:	08f9      	lsrs	r1, r7, #3
 8000cc8:	0768      	lsls	r0, r5, #29
 8000cca:	4301      	orrs	r1, r0
 8000ccc:	08eb      	lsrs	r3, r5, #3
 8000cce:	e624      	b.n	800091a <__aeabi_dadd+0x24a>
 8000cd0:	4662      	mov	r2, ip
 8000cd2:	433a      	orrs	r2, r7
 8000cd4:	d100      	bne.n	8000cd8 <__aeabi_dadd+0x608>
 8000cd6:	e698      	b.n	8000a0a <__aeabi_dadd+0x33a>
 8000cd8:	464a      	mov	r2, r9
 8000cda:	08d1      	lsrs	r1, r2, #3
 8000cdc:	075a      	lsls	r2, r3, #29
 8000cde:	4311      	orrs	r1, r2
 8000ce0:	08da      	lsrs	r2, r3, #3
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	031b      	lsls	r3, r3, #12
 8000ce6:	421a      	tst	r2, r3
 8000ce8:	d008      	beq.n	8000cfc <__aeabi_dadd+0x62c>
 8000cea:	4660      	mov	r0, ip
 8000cec:	08c5      	lsrs	r5, r0, #3
 8000cee:	421d      	tst	r5, r3
 8000cf0:	d104      	bne.n	8000cfc <__aeabi_dadd+0x62c>
 8000cf2:	4654      	mov	r4, sl
 8000cf4:	002a      	movs	r2, r5
 8000cf6:	08f9      	lsrs	r1, r7, #3
 8000cf8:	0743      	lsls	r3, r0, #29
 8000cfa:	4319      	orrs	r1, r3
 8000cfc:	0f4b      	lsrs	r3, r1, #29
 8000cfe:	00c9      	lsls	r1, r1, #3
 8000d00:	075b      	lsls	r3, r3, #29
 8000d02:	08c9      	lsrs	r1, r1, #3
 8000d04:	4319      	orrs	r1, r3
 8000d06:	0013      	movs	r3, r2
 8000d08:	e62c      	b.n	8000964 <__aeabi_dadd+0x294>
 8000d0a:	4641      	mov	r1, r8
 8000d0c:	4329      	orrs	r1, r5
 8000d0e:	d000      	beq.n	8000d12 <__aeabi_dadd+0x642>
 8000d10:	e5fa      	b.n	8000908 <__aeabi_dadd+0x238>
 8000d12:	2300      	movs	r3, #0
 8000d14:	000a      	movs	r2, r1
 8000d16:	2400      	movs	r4, #0
 8000d18:	e602      	b.n	8000920 <__aeabi_dadd+0x250>
 8000d1a:	076b      	lsls	r3, r5, #29
 8000d1c:	08f9      	lsrs	r1, r7, #3
 8000d1e:	4319      	orrs	r1, r3
 8000d20:	08eb      	lsrs	r3, r5, #3
 8000d22:	e5fd      	b.n	8000920 <__aeabi_dadd+0x250>
 8000d24:	4663      	mov	r3, ip
 8000d26:	08f9      	lsrs	r1, r7, #3
 8000d28:	075b      	lsls	r3, r3, #29
 8000d2a:	4319      	orrs	r1, r3
 8000d2c:	4663      	mov	r3, ip
 8000d2e:	0004      	movs	r4, r0
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	e617      	b.n	8000964 <__aeabi_dadd+0x294>
 8000d34:	003d      	movs	r5, r7
 8000d36:	444d      	add	r5, r9
 8000d38:	4463      	add	r3, ip
 8000d3a:	454d      	cmp	r5, r9
 8000d3c:	4189      	sbcs	r1, r1
 8000d3e:	4698      	mov	r8, r3
 8000d40:	4249      	negs	r1, r1
 8000d42:	4488      	add	r8, r1
 8000d44:	4643      	mov	r3, r8
 8000d46:	021b      	lsls	r3, r3, #8
 8000d48:	d400      	bmi.n	8000d4c <__aeabi_dadd+0x67c>
 8000d4a:	e5dd      	b.n	8000908 <__aeabi_dadd+0x238>
 8000d4c:	4642      	mov	r2, r8
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <__aeabi_dadd+0x6d0>)
 8000d50:	2601      	movs	r6, #1
 8000d52:	401a      	ands	r2, r3
 8000d54:	4690      	mov	r8, r2
 8000d56:	e5d7      	b.n	8000908 <__aeabi_dadd+0x238>
 8000d58:	0010      	movs	r0, r2
 8000d5a:	001e      	movs	r6, r3
 8000d5c:	3820      	subs	r0, #32
 8000d5e:	40c6      	lsrs	r6, r0
 8000d60:	2a20      	cmp	r2, #32
 8000d62:	d005      	beq.n	8000d70 <__aeabi_dadd+0x6a0>
 8000d64:	2040      	movs	r0, #64	; 0x40
 8000d66:	1a82      	subs	r2, r0, r2
 8000d68:	4093      	lsls	r3, r2
 8000d6a:	464a      	mov	r2, r9
 8000d6c:	431a      	orrs	r2, r3
 8000d6e:	4691      	mov	r9, r2
 8000d70:	464d      	mov	r5, r9
 8000d72:	1e6b      	subs	r3, r5, #1
 8000d74:	419d      	sbcs	r5, r3
 8000d76:	4335      	orrs	r5, r6
 8000d78:	e621      	b.n	80009be <__aeabi_dadd+0x2ee>
 8000d7a:	0002      	movs	r2, r0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	e540      	b.n	8000804 <__aeabi_dadd+0x134>
 8000d82:	464a      	mov	r2, r9
 8000d84:	19d5      	adds	r5, r2, r7
 8000d86:	42bd      	cmp	r5, r7
 8000d88:	4189      	sbcs	r1, r1
 8000d8a:	4463      	add	r3, ip
 8000d8c:	4698      	mov	r8, r3
 8000d8e:	4249      	negs	r1, r1
 8000d90:	4488      	add	r8, r1
 8000d92:	e5b3      	b.n	80008fc <__aeabi_dadd+0x22c>
 8000d94:	2100      	movs	r1, #0
 8000d96:	4a01      	ldr	r2, [pc, #4]	; (8000d9c <__aeabi_dadd+0x6cc>)
 8000d98:	000b      	movs	r3, r1
 8000d9a:	e533      	b.n	8000804 <__aeabi_dadd+0x134>
 8000d9c:	000007ff 	.word	0x000007ff
 8000da0:	ff7fffff 	.word	0xff7fffff

08000da4 <__aeabi_ddiv>:
 8000da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000da6:	4657      	mov	r7, sl
 8000da8:	464e      	mov	r6, r9
 8000daa:	4645      	mov	r5, r8
 8000dac:	46de      	mov	lr, fp
 8000dae:	b5e0      	push	{r5, r6, r7, lr}
 8000db0:	4681      	mov	r9, r0
 8000db2:	0005      	movs	r5, r0
 8000db4:	030c      	lsls	r4, r1, #12
 8000db6:	0048      	lsls	r0, r1, #1
 8000db8:	4692      	mov	sl, r2
 8000dba:	001f      	movs	r7, r3
 8000dbc:	b085      	sub	sp, #20
 8000dbe:	0b24      	lsrs	r4, r4, #12
 8000dc0:	0d40      	lsrs	r0, r0, #21
 8000dc2:	0fce      	lsrs	r6, r1, #31
 8000dc4:	2800      	cmp	r0, #0
 8000dc6:	d059      	beq.n	8000e7c <__aeabi_ddiv+0xd8>
 8000dc8:	4b87      	ldr	r3, [pc, #540]	; (8000fe8 <__aeabi_ddiv+0x244>)
 8000dca:	4298      	cmp	r0, r3
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_ddiv+0x2c>
 8000dce:	e098      	b.n	8000f02 <__aeabi_ddiv+0x15e>
 8000dd0:	0f6b      	lsrs	r3, r5, #29
 8000dd2:	00e4      	lsls	r4, r4, #3
 8000dd4:	431c      	orrs	r4, r3
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	041b      	lsls	r3, r3, #16
 8000dda:	4323      	orrs	r3, r4
 8000ddc:	4698      	mov	r8, r3
 8000dde:	4b83      	ldr	r3, [pc, #524]	; (8000fec <__aeabi_ddiv+0x248>)
 8000de0:	00ed      	lsls	r5, r5, #3
 8000de2:	469b      	mov	fp, r3
 8000de4:	2300      	movs	r3, #0
 8000de6:	4699      	mov	r9, r3
 8000de8:	4483      	add	fp, r0
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	033c      	lsls	r4, r7, #12
 8000dee:	007b      	lsls	r3, r7, #1
 8000df0:	4650      	mov	r0, sl
 8000df2:	0b24      	lsrs	r4, r4, #12
 8000df4:	0d5b      	lsrs	r3, r3, #21
 8000df6:	0fff      	lsrs	r7, r7, #31
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d067      	beq.n	8000ecc <__aeabi_ddiv+0x128>
 8000dfc:	4a7a      	ldr	r2, [pc, #488]	; (8000fe8 <__aeabi_ddiv+0x244>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d018      	beq.n	8000e34 <__aeabi_ddiv+0x90>
 8000e02:	497a      	ldr	r1, [pc, #488]	; (8000fec <__aeabi_ddiv+0x248>)
 8000e04:	0f42      	lsrs	r2, r0, #29
 8000e06:	468c      	mov	ip, r1
 8000e08:	00e4      	lsls	r4, r4, #3
 8000e0a:	4659      	mov	r1, fp
 8000e0c:	4314      	orrs	r4, r2
 8000e0e:	2280      	movs	r2, #128	; 0x80
 8000e10:	4463      	add	r3, ip
 8000e12:	0412      	lsls	r2, r2, #16
 8000e14:	1acb      	subs	r3, r1, r3
 8000e16:	4314      	orrs	r4, r2
 8000e18:	469b      	mov	fp, r3
 8000e1a:	00c2      	lsls	r2, r0, #3
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	0033      	movs	r3, r6
 8000e20:	407b      	eors	r3, r7
 8000e22:	469a      	mov	sl, r3
 8000e24:	464b      	mov	r3, r9
 8000e26:	2b0f      	cmp	r3, #15
 8000e28:	d900      	bls.n	8000e2c <__aeabi_ddiv+0x88>
 8000e2a:	e0ef      	b.n	800100c <__aeabi_ddiv+0x268>
 8000e2c:	4970      	ldr	r1, [pc, #448]	; (8000ff0 <__aeabi_ddiv+0x24c>)
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	58cb      	ldr	r3, [r1, r3]
 8000e32:	469f      	mov	pc, r3
 8000e34:	4b6f      	ldr	r3, [pc, #444]	; (8000ff4 <__aeabi_ddiv+0x250>)
 8000e36:	4652      	mov	r2, sl
 8000e38:	469c      	mov	ip, r3
 8000e3a:	4322      	orrs	r2, r4
 8000e3c:	44e3      	add	fp, ip
 8000e3e:	2a00      	cmp	r2, #0
 8000e40:	d000      	beq.n	8000e44 <__aeabi_ddiv+0xa0>
 8000e42:	e095      	b.n	8000f70 <__aeabi_ddiv+0x1cc>
 8000e44:	4649      	mov	r1, r9
 8000e46:	2302      	movs	r3, #2
 8000e48:	4319      	orrs	r1, r3
 8000e4a:	4689      	mov	r9, r1
 8000e4c:	2400      	movs	r4, #0
 8000e4e:	2002      	movs	r0, #2
 8000e50:	e7e5      	b.n	8000e1e <__aeabi_ddiv+0x7a>
 8000e52:	2300      	movs	r3, #0
 8000e54:	2400      	movs	r4, #0
 8000e56:	2500      	movs	r5, #0
 8000e58:	4652      	mov	r2, sl
 8000e5a:	051b      	lsls	r3, r3, #20
 8000e5c:	4323      	orrs	r3, r4
 8000e5e:	07d2      	lsls	r2, r2, #31
 8000e60:	4313      	orrs	r3, r2
 8000e62:	0028      	movs	r0, r5
 8000e64:	0019      	movs	r1, r3
 8000e66:	b005      	add	sp, #20
 8000e68:	bcf0      	pop	{r4, r5, r6, r7}
 8000e6a:	46bb      	mov	fp, r7
 8000e6c:	46b2      	mov	sl, r6
 8000e6e:	46a9      	mov	r9, r5
 8000e70:	46a0      	mov	r8, r4
 8000e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e74:	2400      	movs	r4, #0
 8000e76:	2500      	movs	r5, #0
 8000e78:	4b5b      	ldr	r3, [pc, #364]	; (8000fe8 <__aeabi_ddiv+0x244>)
 8000e7a:	e7ed      	b.n	8000e58 <__aeabi_ddiv+0xb4>
 8000e7c:	464b      	mov	r3, r9
 8000e7e:	4323      	orrs	r3, r4
 8000e80:	4698      	mov	r8, r3
 8000e82:	d100      	bne.n	8000e86 <__aeabi_ddiv+0xe2>
 8000e84:	e089      	b.n	8000f9a <__aeabi_ddiv+0x1f6>
 8000e86:	2c00      	cmp	r4, #0
 8000e88:	d100      	bne.n	8000e8c <__aeabi_ddiv+0xe8>
 8000e8a:	e1e0      	b.n	800124e <__aeabi_ddiv+0x4aa>
 8000e8c:	0020      	movs	r0, r4
 8000e8e:	f001 fb07 	bl	80024a0 <__clzsi2>
 8000e92:	0001      	movs	r1, r0
 8000e94:	0002      	movs	r2, r0
 8000e96:	390b      	subs	r1, #11
 8000e98:	231d      	movs	r3, #29
 8000e9a:	1a5b      	subs	r3, r3, r1
 8000e9c:	4649      	mov	r1, r9
 8000e9e:	0010      	movs	r0, r2
 8000ea0:	40d9      	lsrs	r1, r3
 8000ea2:	3808      	subs	r0, #8
 8000ea4:	4084      	lsls	r4, r0
 8000ea6:	000b      	movs	r3, r1
 8000ea8:	464d      	mov	r5, r9
 8000eaa:	4323      	orrs	r3, r4
 8000eac:	4698      	mov	r8, r3
 8000eae:	4085      	lsls	r5, r0
 8000eb0:	4851      	ldr	r0, [pc, #324]	; (8000ff8 <__aeabi_ddiv+0x254>)
 8000eb2:	033c      	lsls	r4, r7, #12
 8000eb4:	1a83      	subs	r3, r0, r2
 8000eb6:	469b      	mov	fp, r3
 8000eb8:	2300      	movs	r3, #0
 8000eba:	4699      	mov	r9, r3
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	007b      	lsls	r3, r7, #1
 8000ec0:	4650      	mov	r0, sl
 8000ec2:	0b24      	lsrs	r4, r4, #12
 8000ec4:	0d5b      	lsrs	r3, r3, #21
 8000ec6:	0fff      	lsrs	r7, r7, #31
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d197      	bne.n	8000dfc <__aeabi_ddiv+0x58>
 8000ecc:	4652      	mov	r2, sl
 8000ece:	4322      	orrs	r2, r4
 8000ed0:	d055      	beq.n	8000f7e <__aeabi_ddiv+0x1da>
 8000ed2:	2c00      	cmp	r4, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_ddiv+0x134>
 8000ed6:	e1ca      	b.n	800126e <__aeabi_ddiv+0x4ca>
 8000ed8:	0020      	movs	r0, r4
 8000eda:	f001 fae1 	bl	80024a0 <__clzsi2>
 8000ede:	0002      	movs	r2, r0
 8000ee0:	3a0b      	subs	r2, #11
 8000ee2:	231d      	movs	r3, #29
 8000ee4:	0001      	movs	r1, r0
 8000ee6:	1a9b      	subs	r3, r3, r2
 8000ee8:	4652      	mov	r2, sl
 8000eea:	3908      	subs	r1, #8
 8000eec:	40da      	lsrs	r2, r3
 8000eee:	408c      	lsls	r4, r1
 8000ef0:	4314      	orrs	r4, r2
 8000ef2:	4652      	mov	r2, sl
 8000ef4:	408a      	lsls	r2, r1
 8000ef6:	4b41      	ldr	r3, [pc, #260]	; (8000ffc <__aeabi_ddiv+0x258>)
 8000ef8:	4458      	add	r0, fp
 8000efa:	469b      	mov	fp, r3
 8000efc:	4483      	add	fp, r0
 8000efe:	2000      	movs	r0, #0
 8000f00:	e78d      	b.n	8000e1e <__aeabi_ddiv+0x7a>
 8000f02:	464b      	mov	r3, r9
 8000f04:	4323      	orrs	r3, r4
 8000f06:	4698      	mov	r8, r3
 8000f08:	d140      	bne.n	8000f8c <__aeabi_ddiv+0x1e8>
 8000f0a:	2308      	movs	r3, #8
 8000f0c:	4699      	mov	r9, r3
 8000f0e:	3b06      	subs	r3, #6
 8000f10:	2500      	movs	r5, #0
 8000f12:	4683      	mov	fp, r0
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	e769      	b.n	8000dec <__aeabi_ddiv+0x48>
 8000f18:	46b2      	mov	sl, r6
 8000f1a:	9b00      	ldr	r3, [sp, #0]
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d0a9      	beq.n	8000e74 <__aeabi_ddiv+0xd0>
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d100      	bne.n	8000f26 <__aeabi_ddiv+0x182>
 8000f24:	e211      	b.n	800134a <__aeabi_ddiv+0x5a6>
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d093      	beq.n	8000e52 <__aeabi_ddiv+0xae>
 8000f2a:	4a35      	ldr	r2, [pc, #212]	; (8001000 <__aeabi_ddiv+0x25c>)
 8000f2c:	445a      	add	r2, fp
 8000f2e:	2a00      	cmp	r2, #0
 8000f30:	dc00      	bgt.n	8000f34 <__aeabi_ddiv+0x190>
 8000f32:	e13c      	b.n	80011ae <__aeabi_ddiv+0x40a>
 8000f34:	076b      	lsls	r3, r5, #29
 8000f36:	d000      	beq.n	8000f3a <__aeabi_ddiv+0x196>
 8000f38:	e1a7      	b.n	800128a <__aeabi_ddiv+0x4e6>
 8000f3a:	08ed      	lsrs	r5, r5, #3
 8000f3c:	4643      	mov	r3, r8
 8000f3e:	01db      	lsls	r3, r3, #7
 8000f40:	d506      	bpl.n	8000f50 <__aeabi_ddiv+0x1ac>
 8000f42:	4642      	mov	r2, r8
 8000f44:	4b2f      	ldr	r3, [pc, #188]	; (8001004 <__aeabi_ddiv+0x260>)
 8000f46:	401a      	ands	r2, r3
 8000f48:	4690      	mov	r8, r2
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	00d2      	lsls	r2, r2, #3
 8000f4e:	445a      	add	r2, fp
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <__aeabi_ddiv+0x264>)
 8000f52:	429a      	cmp	r2, r3
 8000f54:	dc8e      	bgt.n	8000e74 <__aeabi_ddiv+0xd0>
 8000f56:	4643      	mov	r3, r8
 8000f58:	0552      	lsls	r2, r2, #21
 8000f5a:	0758      	lsls	r0, r3, #29
 8000f5c:	025c      	lsls	r4, r3, #9
 8000f5e:	4305      	orrs	r5, r0
 8000f60:	0b24      	lsrs	r4, r4, #12
 8000f62:	0d53      	lsrs	r3, r2, #21
 8000f64:	e778      	b.n	8000e58 <__aeabi_ddiv+0xb4>
 8000f66:	46ba      	mov	sl, r7
 8000f68:	46a0      	mov	r8, r4
 8000f6a:	0015      	movs	r5, r2
 8000f6c:	9000      	str	r0, [sp, #0]
 8000f6e:	e7d4      	b.n	8000f1a <__aeabi_ddiv+0x176>
 8000f70:	464a      	mov	r2, r9
 8000f72:	2303      	movs	r3, #3
 8000f74:	431a      	orrs	r2, r3
 8000f76:	4691      	mov	r9, r2
 8000f78:	2003      	movs	r0, #3
 8000f7a:	4652      	mov	r2, sl
 8000f7c:	e74f      	b.n	8000e1e <__aeabi_ddiv+0x7a>
 8000f7e:	4649      	mov	r1, r9
 8000f80:	2301      	movs	r3, #1
 8000f82:	4319      	orrs	r1, r3
 8000f84:	4689      	mov	r9, r1
 8000f86:	2400      	movs	r4, #0
 8000f88:	2001      	movs	r0, #1
 8000f8a:	e748      	b.n	8000e1e <__aeabi_ddiv+0x7a>
 8000f8c:	230c      	movs	r3, #12
 8000f8e:	4699      	mov	r9, r3
 8000f90:	3b09      	subs	r3, #9
 8000f92:	46a0      	mov	r8, r4
 8000f94:	4683      	mov	fp, r0
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	e728      	b.n	8000dec <__aeabi_ddiv+0x48>
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	4699      	mov	r9, r3
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	469b      	mov	fp, r3
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	2500      	movs	r5, #0
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	e720      	b.n	8000dec <__aeabi_ddiv+0x48>
 8000faa:	2300      	movs	r3, #0
 8000fac:	2480      	movs	r4, #128	; 0x80
 8000fae:	469a      	mov	sl, r3
 8000fb0:	2500      	movs	r5, #0
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <__aeabi_ddiv+0x244>)
 8000fb4:	0324      	lsls	r4, r4, #12
 8000fb6:	e74f      	b.n	8000e58 <__aeabi_ddiv+0xb4>
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	4641      	mov	r1, r8
 8000fbc:	031b      	lsls	r3, r3, #12
 8000fbe:	4219      	tst	r1, r3
 8000fc0:	d008      	beq.n	8000fd4 <__aeabi_ddiv+0x230>
 8000fc2:	421c      	tst	r4, r3
 8000fc4:	d106      	bne.n	8000fd4 <__aeabi_ddiv+0x230>
 8000fc6:	431c      	orrs	r4, r3
 8000fc8:	0324      	lsls	r4, r4, #12
 8000fca:	46ba      	mov	sl, r7
 8000fcc:	0015      	movs	r5, r2
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <__aeabi_ddiv+0x244>)
 8000fd0:	0b24      	lsrs	r4, r4, #12
 8000fd2:	e741      	b.n	8000e58 <__aeabi_ddiv+0xb4>
 8000fd4:	2480      	movs	r4, #128	; 0x80
 8000fd6:	4643      	mov	r3, r8
 8000fd8:	0324      	lsls	r4, r4, #12
 8000fda:	431c      	orrs	r4, r3
 8000fdc:	0324      	lsls	r4, r4, #12
 8000fde:	46b2      	mov	sl, r6
 8000fe0:	4b01      	ldr	r3, [pc, #4]	; (8000fe8 <__aeabi_ddiv+0x244>)
 8000fe2:	0b24      	lsrs	r4, r4, #12
 8000fe4:	e738      	b.n	8000e58 <__aeabi_ddiv+0xb4>
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	000007ff 	.word	0x000007ff
 8000fec:	fffffc01 	.word	0xfffffc01
 8000ff0:	08009cfc 	.word	0x08009cfc
 8000ff4:	fffff801 	.word	0xfffff801
 8000ff8:	fffffc0d 	.word	0xfffffc0d
 8000ffc:	000003f3 	.word	0x000003f3
 8001000:	000003ff 	.word	0x000003ff
 8001004:	feffffff 	.word	0xfeffffff
 8001008:	000007fe 	.word	0x000007fe
 800100c:	4544      	cmp	r4, r8
 800100e:	d200      	bcs.n	8001012 <__aeabi_ddiv+0x26e>
 8001010:	e116      	b.n	8001240 <__aeabi_ddiv+0x49c>
 8001012:	d100      	bne.n	8001016 <__aeabi_ddiv+0x272>
 8001014:	e111      	b.n	800123a <__aeabi_ddiv+0x496>
 8001016:	2301      	movs	r3, #1
 8001018:	425b      	negs	r3, r3
 800101a:	469c      	mov	ip, r3
 800101c:	002e      	movs	r6, r5
 800101e:	4640      	mov	r0, r8
 8001020:	2500      	movs	r5, #0
 8001022:	44e3      	add	fp, ip
 8001024:	0223      	lsls	r3, r4, #8
 8001026:	0e14      	lsrs	r4, r2, #24
 8001028:	431c      	orrs	r4, r3
 800102a:	0c1b      	lsrs	r3, r3, #16
 800102c:	4699      	mov	r9, r3
 800102e:	0423      	lsls	r3, r4, #16
 8001030:	0c1f      	lsrs	r7, r3, #16
 8001032:	0212      	lsls	r2, r2, #8
 8001034:	4649      	mov	r1, r9
 8001036:	9200      	str	r2, [sp, #0]
 8001038:	9701      	str	r7, [sp, #4]
 800103a:	f7ff f907 	bl	800024c <__aeabi_uidivmod>
 800103e:	0002      	movs	r2, r0
 8001040:	437a      	muls	r2, r7
 8001042:	040b      	lsls	r3, r1, #16
 8001044:	0c31      	lsrs	r1, r6, #16
 8001046:	4680      	mov	r8, r0
 8001048:	4319      	orrs	r1, r3
 800104a:	428a      	cmp	r2, r1
 800104c:	d90b      	bls.n	8001066 <__aeabi_ddiv+0x2c2>
 800104e:	2301      	movs	r3, #1
 8001050:	425b      	negs	r3, r3
 8001052:	469c      	mov	ip, r3
 8001054:	1909      	adds	r1, r1, r4
 8001056:	44e0      	add	r8, ip
 8001058:	428c      	cmp	r4, r1
 800105a:	d804      	bhi.n	8001066 <__aeabi_ddiv+0x2c2>
 800105c:	428a      	cmp	r2, r1
 800105e:	d902      	bls.n	8001066 <__aeabi_ddiv+0x2c2>
 8001060:	1e83      	subs	r3, r0, #2
 8001062:	4698      	mov	r8, r3
 8001064:	1909      	adds	r1, r1, r4
 8001066:	1a88      	subs	r0, r1, r2
 8001068:	4649      	mov	r1, r9
 800106a:	f7ff f8ef 	bl	800024c <__aeabi_uidivmod>
 800106e:	0409      	lsls	r1, r1, #16
 8001070:	468c      	mov	ip, r1
 8001072:	0431      	lsls	r1, r6, #16
 8001074:	4666      	mov	r6, ip
 8001076:	9a01      	ldr	r2, [sp, #4]
 8001078:	0c09      	lsrs	r1, r1, #16
 800107a:	4342      	muls	r2, r0
 800107c:	0003      	movs	r3, r0
 800107e:	4331      	orrs	r1, r6
 8001080:	428a      	cmp	r2, r1
 8001082:	d904      	bls.n	800108e <__aeabi_ddiv+0x2ea>
 8001084:	1909      	adds	r1, r1, r4
 8001086:	3b01      	subs	r3, #1
 8001088:	428c      	cmp	r4, r1
 800108a:	d800      	bhi.n	800108e <__aeabi_ddiv+0x2ea>
 800108c:	e111      	b.n	80012b2 <__aeabi_ddiv+0x50e>
 800108e:	1a89      	subs	r1, r1, r2
 8001090:	4642      	mov	r2, r8
 8001092:	9e00      	ldr	r6, [sp, #0]
 8001094:	0412      	lsls	r2, r2, #16
 8001096:	431a      	orrs	r2, r3
 8001098:	0c33      	lsrs	r3, r6, #16
 800109a:	001f      	movs	r7, r3
 800109c:	0c10      	lsrs	r0, r2, #16
 800109e:	4690      	mov	r8, r2
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	0413      	lsls	r3, r2, #16
 80010a4:	0432      	lsls	r2, r6, #16
 80010a6:	0c16      	lsrs	r6, r2, #16
 80010a8:	0032      	movs	r2, r6
 80010aa:	0c1b      	lsrs	r3, r3, #16
 80010ac:	435a      	muls	r2, r3
 80010ae:	9603      	str	r6, [sp, #12]
 80010b0:	437b      	muls	r3, r7
 80010b2:	4346      	muls	r6, r0
 80010b4:	4378      	muls	r0, r7
 80010b6:	0c17      	lsrs	r7, r2, #16
 80010b8:	46bc      	mov	ip, r7
 80010ba:	199b      	adds	r3, r3, r6
 80010bc:	4463      	add	r3, ip
 80010be:	429e      	cmp	r6, r3
 80010c0:	d903      	bls.n	80010ca <__aeabi_ddiv+0x326>
 80010c2:	2680      	movs	r6, #128	; 0x80
 80010c4:	0276      	lsls	r6, r6, #9
 80010c6:	46b4      	mov	ip, r6
 80010c8:	4460      	add	r0, ip
 80010ca:	0c1e      	lsrs	r6, r3, #16
 80010cc:	1830      	adds	r0, r6, r0
 80010ce:	0416      	lsls	r6, r2, #16
 80010d0:	041b      	lsls	r3, r3, #16
 80010d2:	0c36      	lsrs	r6, r6, #16
 80010d4:	199e      	adds	r6, r3, r6
 80010d6:	4281      	cmp	r1, r0
 80010d8:	d200      	bcs.n	80010dc <__aeabi_ddiv+0x338>
 80010da:	e09c      	b.n	8001216 <__aeabi_ddiv+0x472>
 80010dc:	d100      	bne.n	80010e0 <__aeabi_ddiv+0x33c>
 80010de:	e097      	b.n	8001210 <__aeabi_ddiv+0x46c>
 80010e0:	1bae      	subs	r6, r5, r6
 80010e2:	1a09      	subs	r1, r1, r0
 80010e4:	42b5      	cmp	r5, r6
 80010e6:	4180      	sbcs	r0, r0
 80010e8:	4240      	negs	r0, r0
 80010ea:	1a08      	subs	r0, r1, r0
 80010ec:	4284      	cmp	r4, r0
 80010ee:	d100      	bne.n	80010f2 <__aeabi_ddiv+0x34e>
 80010f0:	e111      	b.n	8001316 <__aeabi_ddiv+0x572>
 80010f2:	4649      	mov	r1, r9
 80010f4:	f7ff f8aa 	bl	800024c <__aeabi_uidivmod>
 80010f8:	9a01      	ldr	r2, [sp, #4]
 80010fa:	040b      	lsls	r3, r1, #16
 80010fc:	4342      	muls	r2, r0
 80010fe:	0c31      	lsrs	r1, r6, #16
 8001100:	0005      	movs	r5, r0
 8001102:	4319      	orrs	r1, r3
 8001104:	428a      	cmp	r2, r1
 8001106:	d907      	bls.n	8001118 <__aeabi_ddiv+0x374>
 8001108:	1909      	adds	r1, r1, r4
 800110a:	3d01      	subs	r5, #1
 800110c:	428c      	cmp	r4, r1
 800110e:	d803      	bhi.n	8001118 <__aeabi_ddiv+0x374>
 8001110:	428a      	cmp	r2, r1
 8001112:	d901      	bls.n	8001118 <__aeabi_ddiv+0x374>
 8001114:	1e85      	subs	r5, r0, #2
 8001116:	1909      	adds	r1, r1, r4
 8001118:	1a88      	subs	r0, r1, r2
 800111a:	4649      	mov	r1, r9
 800111c:	f7ff f896 	bl	800024c <__aeabi_uidivmod>
 8001120:	0409      	lsls	r1, r1, #16
 8001122:	468c      	mov	ip, r1
 8001124:	0431      	lsls	r1, r6, #16
 8001126:	4666      	mov	r6, ip
 8001128:	9a01      	ldr	r2, [sp, #4]
 800112a:	0c09      	lsrs	r1, r1, #16
 800112c:	4342      	muls	r2, r0
 800112e:	0003      	movs	r3, r0
 8001130:	4331      	orrs	r1, r6
 8001132:	428a      	cmp	r2, r1
 8001134:	d907      	bls.n	8001146 <__aeabi_ddiv+0x3a2>
 8001136:	1909      	adds	r1, r1, r4
 8001138:	3b01      	subs	r3, #1
 800113a:	428c      	cmp	r4, r1
 800113c:	d803      	bhi.n	8001146 <__aeabi_ddiv+0x3a2>
 800113e:	428a      	cmp	r2, r1
 8001140:	d901      	bls.n	8001146 <__aeabi_ddiv+0x3a2>
 8001142:	1e83      	subs	r3, r0, #2
 8001144:	1909      	adds	r1, r1, r4
 8001146:	9e03      	ldr	r6, [sp, #12]
 8001148:	1a89      	subs	r1, r1, r2
 800114a:	0032      	movs	r2, r6
 800114c:	042d      	lsls	r5, r5, #16
 800114e:	431d      	orrs	r5, r3
 8001150:	9f02      	ldr	r7, [sp, #8]
 8001152:	042b      	lsls	r3, r5, #16
 8001154:	0c1b      	lsrs	r3, r3, #16
 8001156:	435a      	muls	r2, r3
 8001158:	437b      	muls	r3, r7
 800115a:	469c      	mov	ip, r3
 800115c:	0c28      	lsrs	r0, r5, #16
 800115e:	4346      	muls	r6, r0
 8001160:	0c13      	lsrs	r3, r2, #16
 8001162:	44b4      	add	ip, r6
 8001164:	4463      	add	r3, ip
 8001166:	4378      	muls	r0, r7
 8001168:	429e      	cmp	r6, r3
 800116a:	d903      	bls.n	8001174 <__aeabi_ddiv+0x3d0>
 800116c:	2680      	movs	r6, #128	; 0x80
 800116e:	0276      	lsls	r6, r6, #9
 8001170:	46b4      	mov	ip, r6
 8001172:	4460      	add	r0, ip
 8001174:	0c1e      	lsrs	r6, r3, #16
 8001176:	0412      	lsls	r2, r2, #16
 8001178:	041b      	lsls	r3, r3, #16
 800117a:	0c12      	lsrs	r2, r2, #16
 800117c:	1830      	adds	r0, r6, r0
 800117e:	189b      	adds	r3, r3, r2
 8001180:	4281      	cmp	r1, r0
 8001182:	d306      	bcc.n	8001192 <__aeabi_ddiv+0x3ee>
 8001184:	d002      	beq.n	800118c <__aeabi_ddiv+0x3e8>
 8001186:	2301      	movs	r3, #1
 8001188:	431d      	orrs	r5, r3
 800118a:	e6ce      	b.n	8000f2a <__aeabi_ddiv+0x186>
 800118c:	2b00      	cmp	r3, #0
 800118e:	d100      	bne.n	8001192 <__aeabi_ddiv+0x3ee>
 8001190:	e6cb      	b.n	8000f2a <__aeabi_ddiv+0x186>
 8001192:	1861      	adds	r1, r4, r1
 8001194:	1e6e      	subs	r6, r5, #1
 8001196:	42a1      	cmp	r1, r4
 8001198:	d200      	bcs.n	800119c <__aeabi_ddiv+0x3f8>
 800119a:	e0a4      	b.n	80012e6 <__aeabi_ddiv+0x542>
 800119c:	4281      	cmp	r1, r0
 800119e:	d200      	bcs.n	80011a2 <__aeabi_ddiv+0x3fe>
 80011a0:	e0c9      	b.n	8001336 <__aeabi_ddiv+0x592>
 80011a2:	d100      	bne.n	80011a6 <__aeabi_ddiv+0x402>
 80011a4:	e0d9      	b.n	800135a <__aeabi_ddiv+0x5b6>
 80011a6:	0035      	movs	r5, r6
 80011a8:	e7ed      	b.n	8001186 <__aeabi_ddiv+0x3e2>
 80011aa:	2501      	movs	r5, #1
 80011ac:	426d      	negs	r5, r5
 80011ae:	2101      	movs	r1, #1
 80011b0:	1a89      	subs	r1, r1, r2
 80011b2:	2938      	cmp	r1, #56	; 0x38
 80011b4:	dd00      	ble.n	80011b8 <__aeabi_ddiv+0x414>
 80011b6:	e64c      	b.n	8000e52 <__aeabi_ddiv+0xae>
 80011b8:	291f      	cmp	r1, #31
 80011ba:	dc00      	bgt.n	80011be <__aeabi_ddiv+0x41a>
 80011bc:	e07f      	b.n	80012be <__aeabi_ddiv+0x51a>
 80011be:	231f      	movs	r3, #31
 80011c0:	425b      	negs	r3, r3
 80011c2:	1a9a      	subs	r2, r3, r2
 80011c4:	4643      	mov	r3, r8
 80011c6:	40d3      	lsrs	r3, r2
 80011c8:	2920      	cmp	r1, #32
 80011ca:	d004      	beq.n	80011d6 <__aeabi_ddiv+0x432>
 80011cc:	4644      	mov	r4, r8
 80011ce:	4a65      	ldr	r2, [pc, #404]	; (8001364 <__aeabi_ddiv+0x5c0>)
 80011d0:	445a      	add	r2, fp
 80011d2:	4094      	lsls	r4, r2
 80011d4:	4325      	orrs	r5, r4
 80011d6:	1e6a      	subs	r2, r5, #1
 80011d8:	4195      	sbcs	r5, r2
 80011da:	2207      	movs	r2, #7
 80011dc:	432b      	orrs	r3, r5
 80011de:	0015      	movs	r5, r2
 80011e0:	2400      	movs	r4, #0
 80011e2:	401d      	ands	r5, r3
 80011e4:	421a      	tst	r2, r3
 80011e6:	d100      	bne.n	80011ea <__aeabi_ddiv+0x446>
 80011e8:	e0a1      	b.n	800132e <__aeabi_ddiv+0x58a>
 80011ea:	220f      	movs	r2, #15
 80011ec:	2400      	movs	r4, #0
 80011ee:	401a      	ands	r2, r3
 80011f0:	2a04      	cmp	r2, #4
 80011f2:	d100      	bne.n	80011f6 <__aeabi_ddiv+0x452>
 80011f4:	e098      	b.n	8001328 <__aeabi_ddiv+0x584>
 80011f6:	1d1a      	adds	r2, r3, #4
 80011f8:	429a      	cmp	r2, r3
 80011fa:	419b      	sbcs	r3, r3
 80011fc:	425b      	negs	r3, r3
 80011fe:	18e4      	adds	r4, r4, r3
 8001200:	0013      	movs	r3, r2
 8001202:	0222      	lsls	r2, r4, #8
 8001204:	d400      	bmi.n	8001208 <__aeabi_ddiv+0x464>
 8001206:	e08f      	b.n	8001328 <__aeabi_ddiv+0x584>
 8001208:	2301      	movs	r3, #1
 800120a:	2400      	movs	r4, #0
 800120c:	2500      	movs	r5, #0
 800120e:	e623      	b.n	8000e58 <__aeabi_ddiv+0xb4>
 8001210:	42b5      	cmp	r5, r6
 8001212:	d300      	bcc.n	8001216 <__aeabi_ddiv+0x472>
 8001214:	e764      	b.n	80010e0 <__aeabi_ddiv+0x33c>
 8001216:	4643      	mov	r3, r8
 8001218:	1e5a      	subs	r2, r3, #1
 800121a:	9b00      	ldr	r3, [sp, #0]
 800121c:	469c      	mov	ip, r3
 800121e:	4465      	add	r5, ip
 8001220:	001f      	movs	r7, r3
 8001222:	429d      	cmp	r5, r3
 8001224:	419b      	sbcs	r3, r3
 8001226:	425b      	negs	r3, r3
 8001228:	191b      	adds	r3, r3, r4
 800122a:	18c9      	adds	r1, r1, r3
 800122c:	428c      	cmp	r4, r1
 800122e:	d23a      	bcs.n	80012a6 <__aeabi_ddiv+0x502>
 8001230:	4288      	cmp	r0, r1
 8001232:	d863      	bhi.n	80012fc <__aeabi_ddiv+0x558>
 8001234:	d060      	beq.n	80012f8 <__aeabi_ddiv+0x554>
 8001236:	4690      	mov	r8, r2
 8001238:	e752      	b.n	80010e0 <__aeabi_ddiv+0x33c>
 800123a:	42aa      	cmp	r2, r5
 800123c:	d900      	bls.n	8001240 <__aeabi_ddiv+0x49c>
 800123e:	e6ea      	b.n	8001016 <__aeabi_ddiv+0x272>
 8001240:	4643      	mov	r3, r8
 8001242:	07de      	lsls	r6, r3, #31
 8001244:	0858      	lsrs	r0, r3, #1
 8001246:	086b      	lsrs	r3, r5, #1
 8001248:	431e      	orrs	r6, r3
 800124a:	07ed      	lsls	r5, r5, #31
 800124c:	e6ea      	b.n	8001024 <__aeabi_ddiv+0x280>
 800124e:	4648      	mov	r0, r9
 8001250:	f001 f926 	bl	80024a0 <__clzsi2>
 8001254:	0001      	movs	r1, r0
 8001256:	0002      	movs	r2, r0
 8001258:	3115      	adds	r1, #21
 800125a:	3220      	adds	r2, #32
 800125c:	291c      	cmp	r1, #28
 800125e:	dc00      	bgt.n	8001262 <__aeabi_ddiv+0x4be>
 8001260:	e61a      	b.n	8000e98 <__aeabi_ddiv+0xf4>
 8001262:	464b      	mov	r3, r9
 8001264:	3808      	subs	r0, #8
 8001266:	4083      	lsls	r3, r0
 8001268:	2500      	movs	r5, #0
 800126a:	4698      	mov	r8, r3
 800126c:	e620      	b.n	8000eb0 <__aeabi_ddiv+0x10c>
 800126e:	f001 f917 	bl	80024a0 <__clzsi2>
 8001272:	0003      	movs	r3, r0
 8001274:	001a      	movs	r2, r3
 8001276:	3215      	adds	r2, #21
 8001278:	3020      	adds	r0, #32
 800127a:	2a1c      	cmp	r2, #28
 800127c:	dc00      	bgt.n	8001280 <__aeabi_ddiv+0x4dc>
 800127e:	e630      	b.n	8000ee2 <__aeabi_ddiv+0x13e>
 8001280:	4654      	mov	r4, sl
 8001282:	3b08      	subs	r3, #8
 8001284:	2200      	movs	r2, #0
 8001286:	409c      	lsls	r4, r3
 8001288:	e635      	b.n	8000ef6 <__aeabi_ddiv+0x152>
 800128a:	230f      	movs	r3, #15
 800128c:	402b      	ands	r3, r5
 800128e:	2b04      	cmp	r3, #4
 8001290:	d100      	bne.n	8001294 <__aeabi_ddiv+0x4f0>
 8001292:	e652      	b.n	8000f3a <__aeabi_ddiv+0x196>
 8001294:	2305      	movs	r3, #5
 8001296:	425b      	negs	r3, r3
 8001298:	42ab      	cmp	r3, r5
 800129a:	419b      	sbcs	r3, r3
 800129c:	3504      	adds	r5, #4
 800129e:	425b      	negs	r3, r3
 80012a0:	08ed      	lsrs	r5, r5, #3
 80012a2:	4498      	add	r8, r3
 80012a4:	e64a      	b.n	8000f3c <__aeabi_ddiv+0x198>
 80012a6:	428c      	cmp	r4, r1
 80012a8:	d1c5      	bne.n	8001236 <__aeabi_ddiv+0x492>
 80012aa:	42af      	cmp	r7, r5
 80012ac:	d9c0      	bls.n	8001230 <__aeabi_ddiv+0x48c>
 80012ae:	4690      	mov	r8, r2
 80012b0:	e716      	b.n	80010e0 <__aeabi_ddiv+0x33c>
 80012b2:	428a      	cmp	r2, r1
 80012b4:	d800      	bhi.n	80012b8 <__aeabi_ddiv+0x514>
 80012b6:	e6ea      	b.n	800108e <__aeabi_ddiv+0x2ea>
 80012b8:	1e83      	subs	r3, r0, #2
 80012ba:	1909      	adds	r1, r1, r4
 80012bc:	e6e7      	b.n	800108e <__aeabi_ddiv+0x2ea>
 80012be:	4a2a      	ldr	r2, [pc, #168]	; (8001368 <__aeabi_ddiv+0x5c4>)
 80012c0:	0028      	movs	r0, r5
 80012c2:	445a      	add	r2, fp
 80012c4:	4643      	mov	r3, r8
 80012c6:	4095      	lsls	r5, r2
 80012c8:	4093      	lsls	r3, r2
 80012ca:	40c8      	lsrs	r0, r1
 80012cc:	1e6a      	subs	r2, r5, #1
 80012ce:	4195      	sbcs	r5, r2
 80012d0:	4644      	mov	r4, r8
 80012d2:	4303      	orrs	r3, r0
 80012d4:	432b      	orrs	r3, r5
 80012d6:	40cc      	lsrs	r4, r1
 80012d8:	075a      	lsls	r2, r3, #29
 80012da:	d092      	beq.n	8001202 <__aeabi_ddiv+0x45e>
 80012dc:	220f      	movs	r2, #15
 80012de:	401a      	ands	r2, r3
 80012e0:	2a04      	cmp	r2, #4
 80012e2:	d188      	bne.n	80011f6 <__aeabi_ddiv+0x452>
 80012e4:	e78d      	b.n	8001202 <__aeabi_ddiv+0x45e>
 80012e6:	0035      	movs	r5, r6
 80012e8:	4281      	cmp	r1, r0
 80012ea:	d000      	beq.n	80012ee <__aeabi_ddiv+0x54a>
 80012ec:	e74b      	b.n	8001186 <__aeabi_ddiv+0x3e2>
 80012ee:	9a00      	ldr	r2, [sp, #0]
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d000      	beq.n	80012f6 <__aeabi_ddiv+0x552>
 80012f4:	e747      	b.n	8001186 <__aeabi_ddiv+0x3e2>
 80012f6:	e618      	b.n	8000f2a <__aeabi_ddiv+0x186>
 80012f8:	42ae      	cmp	r6, r5
 80012fa:	d99c      	bls.n	8001236 <__aeabi_ddiv+0x492>
 80012fc:	2302      	movs	r3, #2
 80012fe:	425b      	negs	r3, r3
 8001300:	469c      	mov	ip, r3
 8001302:	9b00      	ldr	r3, [sp, #0]
 8001304:	44e0      	add	r8, ip
 8001306:	469c      	mov	ip, r3
 8001308:	4465      	add	r5, ip
 800130a:	429d      	cmp	r5, r3
 800130c:	419b      	sbcs	r3, r3
 800130e:	425b      	negs	r3, r3
 8001310:	191b      	adds	r3, r3, r4
 8001312:	18c9      	adds	r1, r1, r3
 8001314:	e6e4      	b.n	80010e0 <__aeabi_ddiv+0x33c>
 8001316:	4a15      	ldr	r2, [pc, #84]	; (800136c <__aeabi_ddiv+0x5c8>)
 8001318:	445a      	add	r2, fp
 800131a:	2a00      	cmp	r2, #0
 800131c:	dc00      	bgt.n	8001320 <__aeabi_ddiv+0x57c>
 800131e:	e744      	b.n	80011aa <__aeabi_ddiv+0x406>
 8001320:	2301      	movs	r3, #1
 8001322:	2500      	movs	r5, #0
 8001324:	4498      	add	r8, r3
 8001326:	e609      	b.n	8000f3c <__aeabi_ddiv+0x198>
 8001328:	0765      	lsls	r5, r4, #29
 800132a:	0264      	lsls	r4, r4, #9
 800132c:	0b24      	lsrs	r4, r4, #12
 800132e:	08db      	lsrs	r3, r3, #3
 8001330:	431d      	orrs	r5, r3
 8001332:	2300      	movs	r3, #0
 8001334:	e590      	b.n	8000e58 <__aeabi_ddiv+0xb4>
 8001336:	9e00      	ldr	r6, [sp, #0]
 8001338:	3d02      	subs	r5, #2
 800133a:	0072      	lsls	r2, r6, #1
 800133c:	42b2      	cmp	r2, r6
 800133e:	41bf      	sbcs	r7, r7
 8001340:	427f      	negs	r7, r7
 8001342:	193c      	adds	r4, r7, r4
 8001344:	1909      	adds	r1, r1, r4
 8001346:	9200      	str	r2, [sp, #0]
 8001348:	e7ce      	b.n	80012e8 <__aeabi_ddiv+0x544>
 800134a:	2480      	movs	r4, #128	; 0x80
 800134c:	4643      	mov	r3, r8
 800134e:	0324      	lsls	r4, r4, #12
 8001350:	431c      	orrs	r4, r3
 8001352:	0324      	lsls	r4, r4, #12
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <__aeabi_ddiv+0x5cc>)
 8001356:	0b24      	lsrs	r4, r4, #12
 8001358:	e57e      	b.n	8000e58 <__aeabi_ddiv+0xb4>
 800135a:	9a00      	ldr	r2, [sp, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d3ea      	bcc.n	8001336 <__aeabi_ddiv+0x592>
 8001360:	0035      	movs	r5, r6
 8001362:	e7c4      	b.n	80012ee <__aeabi_ddiv+0x54a>
 8001364:	0000043e 	.word	0x0000043e
 8001368:	0000041e 	.word	0x0000041e
 800136c:	000003ff 	.word	0x000003ff
 8001370:	000007ff 	.word	0x000007ff

08001374 <__eqdf2>:
 8001374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001376:	464f      	mov	r7, r9
 8001378:	4646      	mov	r6, r8
 800137a:	46d6      	mov	lr, sl
 800137c:	4694      	mov	ip, r2
 800137e:	4691      	mov	r9, r2
 8001380:	031a      	lsls	r2, r3, #12
 8001382:	0b12      	lsrs	r2, r2, #12
 8001384:	4d18      	ldr	r5, [pc, #96]	; (80013e8 <__eqdf2+0x74>)
 8001386:	b5c0      	push	{r6, r7, lr}
 8001388:	004c      	lsls	r4, r1, #1
 800138a:	030f      	lsls	r7, r1, #12
 800138c:	4692      	mov	sl, r2
 800138e:	005a      	lsls	r2, r3, #1
 8001390:	0006      	movs	r6, r0
 8001392:	4680      	mov	r8, r0
 8001394:	0b3f      	lsrs	r7, r7, #12
 8001396:	2001      	movs	r0, #1
 8001398:	0d64      	lsrs	r4, r4, #21
 800139a:	0fc9      	lsrs	r1, r1, #31
 800139c:	0d52      	lsrs	r2, r2, #21
 800139e:	0fdb      	lsrs	r3, r3, #31
 80013a0:	42ac      	cmp	r4, r5
 80013a2:	d00a      	beq.n	80013ba <__eqdf2+0x46>
 80013a4:	42aa      	cmp	r2, r5
 80013a6:	d003      	beq.n	80013b0 <__eqdf2+0x3c>
 80013a8:	4294      	cmp	r4, r2
 80013aa:	d101      	bne.n	80013b0 <__eqdf2+0x3c>
 80013ac:	4557      	cmp	r7, sl
 80013ae:	d00d      	beq.n	80013cc <__eqdf2+0x58>
 80013b0:	bce0      	pop	{r5, r6, r7}
 80013b2:	46ba      	mov	sl, r7
 80013b4:	46b1      	mov	r9, r6
 80013b6:	46a8      	mov	r8, r5
 80013b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ba:	003d      	movs	r5, r7
 80013bc:	4335      	orrs	r5, r6
 80013be:	d1f7      	bne.n	80013b0 <__eqdf2+0x3c>
 80013c0:	42a2      	cmp	r2, r4
 80013c2:	d1f5      	bne.n	80013b0 <__eqdf2+0x3c>
 80013c4:	4652      	mov	r2, sl
 80013c6:	4665      	mov	r5, ip
 80013c8:	432a      	orrs	r2, r5
 80013ca:	d1f1      	bne.n	80013b0 <__eqdf2+0x3c>
 80013cc:	2001      	movs	r0, #1
 80013ce:	45c8      	cmp	r8, r9
 80013d0:	d1ee      	bne.n	80013b0 <__eqdf2+0x3c>
 80013d2:	4299      	cmp	r1, r3
 80013d4:	d006      	beq.n	80013e4 <__eqdf2+0x70>
 80013d6:	2c00      	cmp	r4, #0
 80013d8:	d1ea      	bne.n	80013b0 <__eqdf2+0x3c>
 80013da:	433e      	orrs	r6, r7
 80013dc:	0030      	movs	r0, r6
 80013de:	1e46      	subs	r6, r0, #1
 80013e0:	41b0      	sbcs	r0, r6
 80013e2:	e7e5      	b.n	80013b0 <__eqdf2+0x3c>
 80013e4:	2000      	movs	r0, #0
 80013e6:	e7e3      	b.n	80013b0 <__eqdf2+0x3c>
 80013e8:	000007ff 	.word	0x000007ff

080013ec <__gedf2>:
 80013ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ee:	464e      	mov	r6, r9
 80013f0:	4645      	mov	r5, r8
 80013f2:	4657      	mov	r7, sl
 80013f4:	46de      	mov	lr, fp
 80013f6:	0004      	movs	r4, r0
 80013f8:	0018      	movs	r0, r3
 80013fa:	b5e0      	push	{r5, r6, r7, lr}
 80013fc:	0016      	movs	r6, r2
 80013fe:	031b      	lsls	r3, r3, #12
 8001400:	0b1b      	lsrs	r3, r3, #12
 8001402:	4d32      	ldr	r5, [pc, #200]	; (80014cc <__gedf2+0xe0>)
 8001404:	030f      	lsls	r7, r1, #12
 8001406:	004a      	lsls	r2, r1, #1
 8001408:	4699      	mov	r9, r3
 800140a:	0043      	lsls	r3, r0, #1
 800140c:	46a4      	mov	ip, r4
 800140e:	46b0      	mov	r8, r6
 8001410:	0b3f      	lsrs	r7, r7, #12
 8001412:	0d52      	lsrs	r2, r2, #21
 8001414:	0fc9      	lsrs	r1, r1, #31
 8001416:	0d5b      	lsrs	r3, r3, #21
 8001418:	0fc0      	lsrs	r0, r0, #31
 800141a:	42aa      	cmp	r2, r5
 800141c:	d029      	beq.n	8001472 <__gedf2+0x86>
 800141e:	42ab      	cmp	r3, r5
 8001420:	d018      	beq.n	8001454 <__gedf2+0x68>
 8001422:	2a00      	cmp	r2, #0
 8001424:	d12a      	bne.n	800147c <__gedf2+0x90>
 8001426:	433c      	orrs	r4, r7
 8001428:	46a3      	mov	fp, r4
 800142a:	4265      	negs	r5, r4
 800142c:	4165      	adcs	r5, r4
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <__gedf2+0x4c>
 8001432:	464c      	mov	r4, r9
 8001434:	4326      	orrs	r6, r4
 8001436:	d027      	beq.n	8001488 <__gedf2+0x9c>
 8001438:	2d00      	cmp	r5, #0
 800143a:	d115      	bne.n	8001468 <__gedf2+0x7c>
 800143c:	4281      	cmp	r1, r0
 800143e:	d028      	beq.n	8001492 <__gedf2+0xa6>
 8001440:	2002      	movs	r0, #2
 8001442:	3901      	subs	r1, #1
 8001444:	4008      	ands	r0, r1
 8001446:	3801      	subs	r0, #1
 8001448:	bcf0      	pop	{r4, r5, r6, r7}
 800144a:	46bb      	mov	fp, r7
 800144c:	46b2      	mov	sl, r6
 800144e:	46a9      	mov	r9, r5
 8001450:	46a0      	mov	r8, r4
 8001452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001454:	464d      	mov	r5, r9
 8001456:	432e      	orrs	r6, r5
 8001458:	d12f      	bne.n	80014ba <__gedf2+0xce>
 800145a:	2a00      	cmp	r2, #0
 800145c:	d1ee      	bne.n	800143c <__gedf2+0x50>
 800145e:	433c      	orrs	r4, r7
 8001460:	4265      	negs	r5, r4
 8001462:	4165      	adcs	r5, r4
 8001464:	2d00      	cmp	r5, #0
 8001466:	d0e9      	beq.n	800143c <__gedf2+0x50>
 8001468:	2800      	cmp	r0, #0
 800146a:	d1ed      	bne.n	8001448 <__gedf2+0x5c>
 800146c:	2001      	movs	r0, #1
 800146e:	4240      	negs	r0, r0
 8001470:	e7ea      	b.n	8001448 <__gedf2+0x5c>
 8001472:	003d      	movs	r5, r7
 8001474:	4325      	orrs	r5, r4
 8001476:	d120      	bne.n	80014ba <__gedf2+0xce>
 8001478:	4293      	cmp	r3, r2
 800147a:	d0eb      	beq.n	8001454 <__gedf2+0x68>
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1dd      	bne.n	800143c <__gedf2+0x50>
 8001480:	464c      	mov	r4, r9
 8001482:	4326      	orrs	r6, r4
 8001484:	d1da      	bne.n	800143c <__gedf2+0x50>
 8001486:	e7db      	b.n	8001440 <__gedf2+0x54>
 8001488:	465b      	mov	r3, fp
 800148a:	2000      	movs	r0, #0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0db      	beq.n	8001448 <__gedf2+0x5c>
 8001490:	e7d6      	b.n	8001440 <__gedf2+0x54>
 8001492:	429a      	cmp	r2, r3
 8001494:	dc0a      	bgt.n	80014ac <__gedf2+0xc0>
 8001496:	dbe7      	blt.n	8001468 <__gedf2+0x7c>
 8001498:	454f      	cmp	r7, r9
 800149a:	d8d1      	bhi.n	8001440 <__gedf2+0x54>
 800149c:	d010      	beq.n	80014c0 <__gedf2+0xd4>
 800149e:	2000      	movs	r0, #0
 80014a0:	454f      	cmp	r7, r9
 80014a2:	d2d1      	bcs.n	8001448 <__gedf2+0x5c>
 80014a4:	2900      	cmp	r1, #0
 80014a6:	d0e1      	beq.n	800146c <__gedf2+0x80>
 80014a8:	0008      	movs	r0, r1
 80014aa:	e7cd      	b.n	8001448 <__gedf2+0x5c>
 80014ac:	4243      	negs	r3, r0
 80014ae:	4158      	adcs	r0, r3
 80014b0:	2302      	movs	r3, #2
 80014b2:	4240      	negs	r0, r0
 80014b4:	4018      	ands	r0, r3
 80014b6:	3801      	subs	r0, #1
 80014b8:	e7c6      	b.n	8001448 <__gedf2+0x5c>
 80014ba:	2002      	movs	r0, #2
 80014bc:	4240      	negs	r0, r0
 80014be:	e7c3      	b.n	8001448 <__gedf2+0x5c>
 80014c0:	45c4      	cmp	ip, r8
 80014c2:	d8bd      	bhi.n	8001440 <__gedf2+0x54>
 80014c4:	2000      	movs	r0, #0
 80014c6:	45c4      	cmp	ip, r8
 80014c8:	d2be      	bcs.n	8001448 <__gedf2+0x5c>
 80014ca:	e7eb      	b.n	80014a4 <__gedf2+0xb8>
 80014cc:	000007ff 	.word	0x000007ff

080014d0 <__ledf2>:
 80014d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d2:	464e      	mov	r6, r9
 80014d4:	4645      	mov	r5, r8
 80014d6:	4657      	mov	r7, sl
 80014d8:	46de      	mov	lr, fp
 80014da:	0004      	movs	r4, r0
 80014dc:	0018      	movs	r0, r3
 80014de:	b5e0      	push	{r5, r6, r7, lr}
 80014e0:	0016      	movs	r6, r2
 80014e2:	031b      	lsls	r3, r3, #12
 80014e4:	0b1b      	lsrs	r3, r3, #12
 80014e6:	4d31      	ldr	r5, [pc, #196]	; (80015ac <__ledf2+0xdc>)
 80014e8:	030f      	lsls	r7, r1, #12
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	0043      	lsls	r3, r0, #1
 80014f0:	46a4      	mov	ip, r4
 80014f2:	46b0      	mov	r8, r6
 80014f4:	0b3f      	lsrs	r7, r7, #12
 80014f6:	0d52      	lsrs	r2, r2, #21
 80014f8:	0fc9      	lsrs	r1, r1, #31
 80014fa:	0d5b      	lsrs	r3, r3, #21
 80014fc:	0fc0      	lsrs	r0, r0, #31
 80014fe:	42aa      	cmp	r2, r5
 8001500:	d011      	beq.n	8001526 <__ledf2+0x56>
 8001502:	42ab      	cmp	r3, r5
 8001504:	d014      	beq.n	8001530 <__ledf2+0x60>
 8001506:	2a00      	cmp	r2, #0
 8001508:	d12f      	bne.n	800156a <__ledf2+0x9a>
 800150a:	433c      	orrs	r4, r7
 800150c:	46a3      	mov	fp, r4
 800150e:	4265      	negs	r5, r4
 8001510:	4165      	adcs	r5, r4
 8001512:	2b00      	cmp	r3, #0
 8001514:	d114      	bne.n	8001540 <__ledf2+0x70>
 8001516:	464c      	mov	r4, r9
 8001518:	4326      	orrs	r6, r4
 800151a:	d111      	bne.n	8001540 <__ledf2+0x70>
 800151c:	465b      	mov	r3, fp
 800151e:	2000      	movs	r0, #0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d017      	beq.n	8001554 <__ledf2+0x84>
 8001524:	e010      	b.n	8001548 <__ledf2+0x78>
 8001526:	003d      	movs	r5, r7
 8001528:	4325      	orrs	r5, r4
 800152a:	d112      	bne.n	8001552 <__ledf2+0x82>
 800152c:	4293      	cmp	r3, r2
 800152e:	d11c      	bne.n	800156a <__ledf2+0x9a>
 8001530:	464d      	mov	r5, r9
 8001532:	432e      	orrs	r6, r5
 8001534:	d10d      	bne.n	8001552 <__ledf2+0x82>
 8001536:	2a00      	cmp	r2, #0
 8001538:	d104      	bne.n	8001544 <__ledf2+0x74>
 800153a:	433c      	orrs	r4, r7
 800153c:	4265      	negs	r5, r4
 800153e:	4165      	adcs	r5, r4
 8001540:	2d00      	cmp	r5, #0
 8001542:	d10d      	bne.n	8001560 <__ledf2+0x90>
 8001544:	4281      	cmp	r1, r0
 8001546:	d016      	beq.n	8001576 <__ledf2+0xa6>
 8001548:	2002      	movs	r0, #2
 800154a:	3901      	subs	r1, #1
 800154c:	4008      	ands	r0, r1
 800154e:	3801      	subs	r0, #1
 8001550:	e000      	b.n	8001554 <__ledf2+0x84>
 8001552:	2002      	movs	r0, #2
 8001554:	bcf0      	pop	{r4, r5, r6, r7}
 8001556:	46bb      	mov	fp, r7
 8001558:	46b2      	mov	sl, r6
 800155a:	46a9      	mov	r9, r5
 800155c:	46a0      	mov	r8, r4
 800155e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001560:	2800      	cmp	r0, #0
 8001562:	d1f7      	bne.n	8001554 <__ledf2+0x84>
 8001564:	2001      	movs	r0, #1
 8001566:	4240      	negs	r0, r0
 8001568:	e7f4      	b.n	8001554 <__ledf2+0x84>
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1ea      	bne.n	8001544 <__ledf2+0x74>
 800156e:	464c      	mov	r4, r9
 8001570:	4326      	orrs	r6, r4
 8001572:	d1e7      	bne.n	8001544 <__ledf2+0x74>
 8001574:	e7e8      	b.n	8001548 <__ledf2+0x78>
 8001576:	429a      	cmp	r2, r3
 8001578:	dd06      	ble.n	8001588 <__ledf2+0xb8>
 800157a:	4243      	negs	r3, r0
 800157c:	4158      	adcs	r0, r3
 800157e:	2302      	movs	r3, #2
 8001580:	4240      	negs	r0, r0
 8001582:	4018      	ands	r0, r3
 8001584:	3801      	subs	r0, #1
 8001586:	e7e5      	b.n	8001554 <__ledf2+0x84>
 8001588:	429a      	cmp	r2, r3
 800158a:	dbe9      	blt.n	8001560 <__ledf2+0x90>
 800158c:	454f      	cmp	r7, r9
 800158e:	d8db      	bhi.n	8001548 <__ledf2+0x78>
 8001590:	d006      	beq.n	80015a0 <__ledf2+0xd0>
 8001592:	2000      	movs	r0, #0
 8001594:	454f      	cmp	r7, r9
 8001596:	d2dd      	bcs.n	8001554 <__ledf2+0x84>
 8001598:	2900      	cmp	r1, #0
 800159a:	d0e3      	beq.n	8001564 <__ledf2+0x94>
 800159c:	0008      	movs	r0, r1
 800159e:	e7d9      	b.n	8001554 <__ledf2+0x84>
 80015a0:	45c4      	cmp	ip, r8
 80015a2:	d8d1      	bhi.n	8001548 <__ledf2+0x78>
 80015a4:	2000      	movs	r0, #0
 80015a6:	45c4      	cmp	ip, r8
 80015a8:	d2d4      	bcs.n	8001554 <__ledf2+0x84>
 80015aa:	e7f5      	b.n	8001598 <__ledf2+0xc8>
 80015ac:	000007ff 	.word	0x000007ff

080015b0 <__aeabi_dmul>:
 80015b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b2:	4657      	mov	r7, sl
 80015b4:	464e      	mov	r6, r9
 80015b6:	4645      	mov	r5, r8
 80015b8:	46de      	mov	lr, fp
 80015ba:	b5e0      	push	{r5, r6, r7, lr}
 80015bc:	4698      	mov	r8, r3
 80015be:	030c      	lsls	r4, r1, #12
 80015c0:	004b      	lsls	r3, r1, #1
 80015c2:	0006      	movs	r6, r0
 80015c4:	4692      	mov	sl, r2
 80015c6:	b087      	sub	sp, #28
 80015c8:	0b24      	lsrs	r4, r4, #12
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fcf      	lsrs	r7, r1, #31
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d06c      	beq.n	80016ac <__aeabi_dmul+0xfc>
 80015d2:	4add      	ldr	r2, [pc, #884]	; (8001948 <__aeabi_dmul+0x398>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d100      	bne.n	80015da <__aeabi_dmul+0x2a>
 80015d8:	e086      	b.n	80016e8 <__aeabi_dmul+0x138>
 80015da:	0f42      	lsrs	r2, r0, #29
 80015dc:	00e4      	lsls	r4, r4, #3
 80015de:	4314      	orrs	r4, r2
 80015e0:	2280      	movs	r2, #128	; 0x80
 80015e2:	0412      	lsls	r2, r2, #16
 80015e4:	4314      	orrs	r4, r2
 80015e6:	4ad9      	ldr	r2, [pc, #868]	; (800194c <__aeabi_dmul+0x39c>)
 80015e8:	00c5      	lsls	r5, r0, #3
 80015ea:	4694      	mov	ip, r2
 80015ec:	4463      	add	r3, ip
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2300      	movs	r3, #0
 80015f2:	4699      	mov	r9, r3
 80015f4:	469b      	mov	fp, r3
 80015f6:	4643      	mov	r3, r8
 80015f8:	4642      	mov	r2, r8
 80015fa:	031e      	lsls	r6, r3, #12
 80015fc:	0fd2      	lsrs	r2, r2, #31
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4650      	mov	r0, sl
 8001602:	4690      	mov	r8, r2
 8001604:	0b36      	lsrs	r6, r6, #12
 8001606:	0d5b      	lsrs	r3, r3, #21
 8001608:	d100      	bne.n	800160c <__aeabi_dmul+0x5c>
 800160a:	e078      	b.n	80016fe <__aeabi_dmul+0x14e>
 800160c:	4ace      	ldr	r2, [pc, #824]	; (8001948 <__aeabi_dmul+0x398>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d01d      	beq.n	800164e <__aeabi_dmul+0x9e>
 8001612:	49ce      	ldr	r1, [pc, #824]	; (800194c <__aeabi_dmul+0x39c>)
 8001614:	0f42      	lsrs	r2, r0, #29
 8001616:	468c      	mov	ip, r1
 8001618:	9900      	ldr	r1, [sp, #0]
 800161a:	4463      	add	r3, ip
 800161c:	00f6      	lsls	r6, r6, #3
 800161e:	468c      	mov	ip, r1
 8001620:	4316      	orrs	r6, r2
 8001622:	2280      	movs	r2, #128	; 0x80
 8001624:	449c      	add	ip, r3
 8001626:	0412      	lsls	r2, r2, #16
 8001628:	4663      	mov	r3, ip
 800162a:	4316      	orrs	r6, r2
 800162c:	00c2      	lsls	r2, r0, #3
 800162e:	2000      	movs	r0, #0
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	9900      	ldr	r1, [sp, #0]
 8001634:	4643      	mov	r3, r8
 8001636:	3101      	adds	r1, #1
 8001638:	468c      	mov	ip, r1
 800163a:	4649      	mov	r1, r9
 800163c:	407b      	eors	r3, r7
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	290f      	cmp	r1, #15
 8001642:	d900      	bls.n	8001646 <__aeabi_dmul+0x96>
 8001644:	e07e      	b.n	8001744 <__aeabi_dmul+0x194>
 8001646:	4bc2      	ldr	r3, [pc, #776]	; (8001950 <__aeabi_dmul+0x3a0>)
 8001648:	0089      	lsls	r1, r1, #2
 800164a:	5859      	ldr	r1, [r3, r1]
 800164c:	468f      	mov	pc, r1
 800164e:	4652      	mov	r2, sl
 8001650:	9b00      	ldr	r3, [sp, #0]
 8001652:	4332      	orrs	r2, r6
 8001654:	d000      	beq.n	8001658 <__aeabi_dmul+0xa8>
 8001656:	e156      	b.n	8001906 <__aeabi_dmul+0x356>
 8001658:	49bb      	ldr	r1, [pc, #748]	; (8001948 <__aeabi_dmul+0x398>)
 800165a:	2600      	movs	r6, #0
 800165c:	468c      	mov	ip, r1
 800165e:	4463      	add	r3, ip
 8001660:	4649      	mov	r1, r9
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2302      	movs	r3, #2
 8001666:	4319      	orrs	r1, r3
 8001668:	4689      	mov	r9, r1
 800166a:	2002      	movs	r0, #2
 800166c:	e7e1      	b.n	8001632 <__aeabi_dmul+0x82>
 800166e:	4643      	mov	r3, r8
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	0034      	movs	r4, r6
 8001674:	0015      	movs	r5, r2
 8001676:	4683      	mov	fp, r0
 8001678:	465b      	mov	r3, fp
 800167a:	2b02      	cmp	r3, #2
 800167c:	d05e      	beq.n	800173c <__aeabi_dmul+0x18c>
 800167e:	2b03      	cmp	r3, #3
 8001680:	d100      	bne.n	8001684 <__aeabi_dmul+0xd4>
 8001682:	e1f3      	b.n	8001a6c <__aeabi_dmul+0x4bc>
 8001684:	2b01      	cmp	r3, #1
 8001686:	d000      	beq.n	800168a <__aeabi_dmul+0xda>
 8001688:	e118      	b.n	80018bc <__aeabi_dmul+0x30c>
 800168a:	2200      	movs	r2, #0
 800168c:	2400      	movs	r4, #0
 800168e:	2500      	movs	r5, #0
 8001690:	9b01      	ldr	r3, [sp, #4]
 8001692:	0512      	lsls	r2, r2, #20
 8001694:	4322      	orrs	r2, r4
 8001696:	07db      	lsls	r3, r3, #31
 8001698:	431a      	orrs	r2, r3
 800169a:	0028      	movs	r0, r5
 800169c:	0011      	movs	r1, r2
 800169e:	b007      	add	sp, #28
 80016a0:	bcf0      	pop	{r4, r5, r6, r7}
 80016a2:	46bb      	mov	fp, r7
 80016a4:	46b2      	mov	sl, r6
 80016a6:	46a9      	mov	r9, r5
 80016a8:	46a0      	mov	r8, r4
 80016aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ac:	0025      	movs	r5, r4
 80016ae:	4305      	orrs	r5, r0
 80016b0:	d100      	bne.n	80016b4 <__aeabi_dmul+0x104>
 80016b2:	e141      	b.n	8001938 <__aeabi_dmul+0x388>
 80016b4:	2c00      	cmp	r4, #0
 80016b6:	d100      	bne.n	80016ba <__aeabi_dmul+0x10a>
 80016b8:	e1ad      	b.n	8001a16 <__aeabi_dmul+0x466>
 80016ba:	0020      	movs	r0, r4
 80016bc:	f000 fef0 	bl	80024a0 <__clzsi2>
 80016c0:	0001      	movs	r1, r0
 80016c2:	0002      	movs	r2, r0
 80016c4:	390b      	subs	r1, #11
 80016c6:	231d      	movs	r3, #29
 80016c8:	0010      	movs	r0, r2
 80016ca:	1a5b      	subs	r3, r3, r1
 80016cc:	0031      	movs	r1, r6
 80016ce:	0035      	movs	r5, r6
 80016d0:	3808      	subs	r0, #8
 80016d2:	4084      	lsls	r4, r0
 80016d4:	40d9      	lsrs	r1, r3
 80016d6:	4085      	lsls	r5, r0
 80016d8:	430c      	orrs	r4, r1
 80016da:	489e      	ldr	r0, [pc, #632]	; (8001954 <__aeabi_dmul+0x3a4>)
 80016dc:	1a83      	subs	r3, r0, r2
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2300      	movs	r3, #0
 80016e2:	4699      	mov	r9, r3
 80016e4:	469b      	mov	fp, r3
 80016e6:	e786      	b.n	80015f6 <__aeabi_dmul+0x46>
 80016e8:	0005      	movs	r5, r0
 80016ea:	4325      	orrs	r5, r4
 80016ec:	d000      	beq.n	80016f0 <__aeabi_dmul+0x140>
 80016ee:	e11c      	b.n	800192a <__aeabi_dmul+0x37a>
 80016f0:	2208      	movs	r2, #8
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2302      	movs	r3, #2
 80016f6:	2400      	movs	r4, #0
 80016f8:	4691      	mov	r9, r2
 80016fa:	469b      	mov	fp, r3
 80016fc:	e77b      	b.n	80015f6 <__aeabi_dmul+0x46>
 80016fe:	4652      	mov	r2, sl
 8001700:	4332      	orrs	r2, r6
 8001702:	d100      	bne.n	8001706 <__aeabi_dmul+0x156>
 8001704:	e10a      	b.n	800191c <__aeabi_dmul+0x36c>
 8001706:	2e00      	cmp	r6, #0
 8001708:	d100      	bne.n	800170c <__aeabi_dmul+0x15c>
 800170a:	e176      	b.n	80019fa <__aeabi_dmul+0x44a>
 800170c:	0030      	movs	r0, r6
 800170e:	f000 fec7 	bl	80024a0 <__clzsi2>
 8001712:	0002      	movs	r2, r0
 8001714:	3a0b      	subs	r2, #11
 8001716:	231d      	movs	r3, #29
 8001718:	0001      	movs	r1, r0
 800171a:	1a9b      	subs	r3, r3, r2
 800171c:	4652      	mov	r2, sl
 800171e:	3908      	subs	r1, #8
 8001720:	40da      	lsrs	r2, r3
 8001722:	408e      	lsls	r6, r1
 8001724:	4316      	orrs	r6, r2
 8001726:	4652      	mov	r2, sl
 8001728:	408a      	lsls	r2, r1
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	4989      	ldr	r1, [pc, #548]	; (8001954 <__aeabi_dmul+0x3a4>)
 800172e:	1a18      	subs	r0, r3, r0
 8001730:	0003      	movs	r3, r0
 8001732:	468c      	mov	ip, r1
 8001734:	4463      	add	r3, ip
 8001736:	2000      	movs	r0, #0
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	e77a      	b.n	8001632 <__aeabi_dmul+0x82>
 800173c:	2400      	movs	r4, #0
 800173e:	2500      	movs	r5, #0
 8001740:	4a81      	ldr	r2, [pc, #516]	; (8001948 <__aeabi_dmul+0x398>)
 8001742:	e7a5      	b.n	8001690 <__aeabi_dmul+0xe0>
 8001744:	0c2f      	lsrs	r7, r5, #16
 8001746:	042d      	lsls	r5, r5, #16
 8001748:	0c2d      	lsrs	r5, r5, #16
 800174a:	002b      	movs	r3, r5
 800174c:	0c11      	lsrs	r1, r2, #16
 800174e:	0412      	lsls	r2, r2, #16
 8001750:	0c12      	lsrs	r2, r2, #16
 8001752:	4353      	muls	r3, r2
 8001754:	4698      	mov	r8, r3
 8001756:	0013      	movs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	437b      	muls	r3, r7
 800175c:	4699      	mov	r9, r3
 800175e:	4348      	muls	r0, r1
 8001760:	4448      	add	r0, r9
 8001762:	4683      	mov	fp, r0
 8001764:	4640      	mov	r0, r8
 8001766:	000b      	movs	r3, r1
 8001768:	0c00      	lsrs	r0, r0, #16
 800176a:	4682      	mov	sl, r0
 800176c:	4658      	mov	r0, fp
 800176e:	437b      	muls	r3, r7
 8001770:	4450      	add	r0, sl
 8001772:	9302      	str	r3, [sp, #8]
 8001774:	4581      	cmp	r9, r0
 8001776:	d906      	bls.n	8001786 <__aeabi_dmul+0x1d6>
 8001778:	469a      	mov	sl, r3
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	025b      	lsls	r3, r3, #9
 800177e:	4699      	mov	r9, r3
 8001780:	44ca      	add	sl, r9
 8001782:	4653      	mov	r3, sl
 8001784:	9302      	str	r3, [sp, #8]
 8001786:	0c03      	lsrs	r3, r0, #16
 8001788:	469b      	mov	fp, r3
 800178a:	4643      	mov	r3, r8
 800178c:	041b      	lsls	r3, r3, #16
 800178e:	0400      	lsls	r0, r0, #16
 8001790:	0c1b      	lsrs	r3, r3, #16
 8001792:	4698      	mov	r8, r3
 8001794:	0003      	movs	r3, r0
 8001796:	4443      	add	r3, r8
 8001798:	9304      	str	r3, [sp, #16]
 800179a:	0c33      	lsrs	r3, r6, #16
 800179c:	4699      	mov	r9, r3
 800179e:	002b      	movs	r3, r5
 80017a0:	0436      	lsls	r6, r6, #16
 80017a2:	0c36      	lsrs	r6, r6, #16
 80017a4:	4373      	muls	r3, r6
 80017a6:	4698      	mov	r8, r3
 80017a8:	0033      	movs	r3, r6
 80017aa:	437b      	muls	r3, r7
 80017ac:	469a      	mov	sl, r3
 80017ae:	464b      	mov	r3, r9
 80017b0:	435d      	muls	r5, r3
 80017b2:	435f      	muls	r7, r3
 80017b4:	4643      	mov	r3, r8
 80017b6:	4455      	add	r5, sl
 80017b8:	0c18      	lsrs	r0, r3, #16
 80017ba:	1940      	adds	r0, r0, r5
 80017bc:	4582      	cmp	sl, r0
 80017be:	d903      	bls.n	80017c8 <__aeabi_dmul+0x218>
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	025b      	lsls	r3, r3, #9
 80017c4:	469a      	mov	sl, r3
 80017c6:	4457      	add	r7, sl
 80017c8:	0c05      	lsrs	r5, r0, #16
 80017ca:	19eb      	adds	r3, r5, r7
 80017cc:	9305      	str	r3, [sp, #20]
 80017ce:	4643      	mov	r3, r8
 80017d0:	041d      	lsls	r5, r3, #16
 80017d2:	0c2d      	lsrs	r5, r5, #16
 80017d4:	0400      	lsls	r0, r0, #16
 80017d6:	1940      	adds	r0, r0, r5
 80017d8:	0c25      	lsrs	r5, r4, #16
 80017da:	0424      	lsls	r4, r4, #16
 80017dc:	0c24      	lsrs	r4, r4, #16
 80017de:	0027      	movs	r7, r4
 80017e0:	4357      	muls	r7, r2
 80017e2:	436a      	muls	r2, r5
 80017e4:	4690      	mov	r8, r2
 80017e6:	002a      	movs	r2, r5
 80017e8:	0c3b      	lsrs	r3, r7, #16
 80017ea:	469a      	mov	sl, r3
 80017ec:	434a      	muls	r2, r1
 80017ee:	4361      	muls	r1, r4
 80017f0:	4441      	add	r1, r8
 80017f2:	4451      	add	r1, sl
 80017f4:	4483      	add	fp, r0
 80017f6:	4588      	cmp	r8, r1
 80017f8:	d903      	bls.n	8001802 <__aeabi_dmul+0x252>
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	025b      	lsls	r3, r3, #9
 80017fe:	4698      	mov	r8, r3
 8001800:	4442      	add	r2, r8
 8001802:	043f      	lsls	r7, r7, #16
 8001804:	0c0b      	lsrs	r3, r1, #16
 8001806:	0c3f      	lsrs	r7, r7, #16
 8001808:	0409      	lsls	r1, r1, #16
 800180a:	19c9      	adds	r1, r1, r7
 800180c:	0027      	movs	r7, r4
 800180e:	4698      	mov	r8, r3
 8001810:	464b      	mov	r3, r9
 8001812:	4377      	muls	r7, r6
 8001814:	435c      	muls	r4, r3
 8001816:	436e      	muls	r6, r5
 8001818:	435d      	muls	r5, r3
 800181a:	0c3b      	lsrs	r3, r7, #16
 800181c:	4699      	mov	r9, r3
 800181e:	19a4      	adds	r4, r4, r6
 8001820:	444c      	add	r4, r9
 8001822:	4442      	add	r2, r8
 8001824:	9503      	str	r5, [sp, #12]
 8001826:	42a6      	cmp	r6, r4
 8001828:	d904      	bls.n	8001834 <__aeabi_dmul+0x284>
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	025b      	lsls	r3, r3, #9
 800182e:	4698      	mov	r8, r3
 8001830:	4445      	add	r5, r8
 8001832:	9503      	str	r5, [sp, #12]
 8001834:	9b02      	ldr	r3, [sp, #8]
 8001836:	043f      	lsls	r7, r7, #16
 8001838:	445b      	add	r3, fp
 800183a:	001e      	movs	r6, r3
 800183c:	4283      	cmp	r3, r0
 800183e:	4180      	sbcs	r0, r0
 8001840:	0423      	lsls	r3, r4, #16
 8001842:	4698      	mov	r8, r3
 8001844:	9b05      	ldr	r3, [sp, #20]
 8001846:	0c3f      	lsrs	r7, r7, #16
 8001848:	4447      	add	r7, r8
 800184a:	4698      	mov	r8, r3
 800184c:	1876      	adds	r6, r6, r1
 800184e:	428e      	cmp	r6, r1
 8001850:	4189      	sbcs	r1, r1
 8001852:	4447      	add	r7, r8
 8001854:	4240      	negs	r0, r0
 8001856:	183d      	adds	r5, r7, r0
 8001858:	46a8      	mov	r8, r5
 800185a:	4693      	mov	fp, r2
 800185c:	4249      	negs	r1, r1
 800185e:	468a      	mov	sl, r1
 8001860:	44c3      	add	fp, r8
 8001862:	429f      	cmp	r7, r3
 8001864:	41bf      	sbcs	r7, r7
 8001866:	4580      	cmp	r8, r0
 8001868:	4180      	sbcs	r0, r0
 800186a:	9b03      	ldr	r3, [sp, #12]
 800186c:	44da      	add	sl, fp
 800186e:	4698      	mov	r8, r3
 8001870:	4653      	mov	r3, sl
 8001872:	4240      	negs	r0, r0
 8001874:	427f      	negs	r7, r7
 8001876:	4307      	orrs	r7, r0
 8001878:	0c24      	lsrs	r4, r4, #16
 800187a:	4593      	cmp	fp, r2
 800187c:	4192      	sbcs	r2, r2
 800187e:	458a      	cmp	sl, r1
 8001880:	4189      	sbcs	r1, r1
 8001882:	193f      	adds	r7, r7, r4
 8001884:	0ddc      	lsrs	r4, r3, #23
 8001886:	9b04      	ldr	r3, [sp, #16]
 8001888:	0275      	lsls	r5, r6, #9
 800188a:	431d      	orrs	r5, r3
 800188c:	1e68      	subs	r0, r5, #1
 800188e:	4185      	sbcs	r5, r0
 8001890:	4653      	mov	r3, sl
 8001892:	4252      	negs	r2, r2
 8001894:	4249      	negs	r1, r1
 8001896:	430a      	orrs	r2, r1
 8001898:	18bf      	adds	r7, r7, r2
 800189a:	4447      	add	r7, r8
 800189c:	0df6      	lsrs	r6, r6, #23
 800189e:	027f      	lsls	r7, r7, #9
 80018a0:	4335      	orrs	r5, r6
 80018a2:	025a      	lsls	r2, r3, #9
 80018a4:	433c      	orrs	r4, r7
 80018a6:	4315      	orrs	r5, r2
 80018a8:	01fb      	lsls	r3, r7, #7
 80018aa:	d400      	bmi.n	80018ae <__aeabi_dmul+0x2fe>
 80018ac:	e0c1      	b.n	8001a32 <__aeabi_dmul+0x482>
 80018ae:	2101      	movs	r1, #1
 80018b0:	086a      	lsrs	r2, r5, #1
 80018b2:	400d      	ands	r5, r1
 80018b4:	4315      	orrs	r5, r2
 80018b6:	07e2      	lsls	r2, r4, #31
 80018b8:	4315      	orrs	r5, r2
 80018ba:	0864      	lsrs	r4, r4, #1
 80018bc:	4926      	ldr	r1, [pc, #152]	; (8001958 <__aeabi_dmul+0x3a8>)
 80018be:	4461      	add	r1, ip
 80018c0:	2900      	cmp	r1, #0
 80018c2:	dd56      	ble.n	8001972 <__aeabi_dmul+0x3c2>
 80018c4:	076b      	lsls	r3, r5, #29
 80018c6:	d009      	beq.n	80018dc <__aeabi_dmul+0x32c>
 80018c8:	220f      	movs	r2, #15
 80018ca:	402a      	ands	r2, r5
 80018cc:	2a04      	cmp	r2, #4
 80018ce:	d005      	beq.n	80018dc <__aeabi_dmul+0x32c>
 80018d0:	1d2a      	adds	r2, r5, #4
 80018d2:	42aa      	cmp	r2, r5
 80018d4:	41ad      	sbcs	r5, r5
 80018d6:	426d      	negs	r5, r5
 80018d8:	1964      	adds	r4, r4, r5
 80018da:	0015      	movs	r5, r2
 80018dc:	01e3      	lsls	r3, r4, #7
 80018de:	d504      	bpl.n	80018ea <__aeabi_dmul+0x33a>
 80018e0:	2180      	movs	r1, #128	; 0x80
 80018e2:	4a1e      	ldr	r2, [pc, #120]	; (800195c <__aeabi_dmul+0x3ac>)
 80018e4:	00c9      	lsls	r1, r1, #3
 80018e6:	4014      	ands	r4, r2
 80018e8:	4461      	add	r1, ip
 80018ea:	4a1d      	ldr	r2, [pc, #116]	; (8001960 <__aeabi_dmul+0x3b0>)
 80018ec:	4291      	cmp	r1, r2
 80018ee:	dd00      	ble.n	80018f2 <__aeabi_dmul+0x342>
 80018f0:	e724      	b.n	800173c <__aeabi_dmul+0x18c>
 80018f2:	0762      	lsls	r2, r4, #29
 80018f4:	08ed      	lsrs	r5, r5, #3
 80018f6:	0264      	lsls	r4, r4, #9
 80018f8:	0549      	lsls	r1, r1, #21
 80018fa:	4315      	orrs	r5, r2
 80018fc:	0b24      	lsrs	r4, r4, #12
 80018fe:	0d4a      	lsrs	r2, r1, #21
 8001900:	e6c6      	b.n	8001690 <__aeabi_dmul+0xe0>
 8001902:	9701      	str	r7, [sp, #4]
 8001904:	e6b8      	b.n	8001678 <__aeabi_dmul+0xc8>
 8001906:	4a10      	ldr	r2, [pc, #64]	; (8001948 <__aeabi_dmul+0x398>)
 8001908:	2003      	movs	r0, #3
 800190a:	4694      	mov	ip, r2
 800190c:	4463      	add	r3, ip
 800190e:	464a      	mov	r2, r9
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2303      	movs	r3, #3
 8001914:	431a      	orrs	r2, r3
 8001916:	4691      	mov	r9, r2
 8001918:	4652      	mov	r2, sl
 800191a:	e68a      	b.n	8001632 <__aeabi_dmul+0x82>
 800191c:	4649      	mov	r1, r9
 800191e:	2301      	movs	r3, #1
 8001920:	4319      	orrs	r1, r3
 8001922:	4689      	mov	r9, r1
 8001924:	2600      	movs	r6, #0
 8001926:	2001      	movs	r0, #1
 8001928:	e683      	b.n	8001632 <__aeabi_dmul+0x82>
 800192a:	220c      	movs	r2, #12
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	2303      	movs	r3, #3
 8001930:	0005      	movs	r5, r0
 8001932:	4691      	mov	r9, r2
 8001934:	469b      	mov	fp, r3
 8001936:	e65e      	b.n	80015f6 <__aeabi_dmul+0x46>
 8001938:	2304      	movs	r3, #4
 800193a:	4699      	mov	r9, r3
 800193c:	2300      	movs	r3, #0
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	2400      	movs	r4, #0
 8001944:	469b      	mov	fp, r3
 8001946:	e656      	b.n	80015f6 <__aeabi_dmul+0x46>
 8001948:	000007ff 	.word	0x000007ff
 800194c:	fffffc01 	.word	0xfffffc01
 8001950:	08009d3c 	.word	0x08009d3c
 8001954:	fffffc0d 	.word	0xfffffc0d
 8001958:	000003ff 	.word	0x000003ff
 800195c:	feffffff 	.word	0xfeffffff
 8001960:	000007fe 	.word	0x000007fe
 8001964:	2300      	movs	r3, #0
 8001966:	2480      	movs	r4, #128	; 0x80
 8001968:	2500      	movs	r5, #0
 800196a:	4a44      	ldr	r2, [pc, #272]	; (8001a7c <__aeabi_dmul+0x4cc>)
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	0324      	lsls	r4, r4, #12
 8001970:	e68e      	b.n	8001690 <__aeabi_dmul+0xe0>
 8001972:	2001      	movs	r0, #1
 8001974:	1a40      	subs	r0, r0, r1
 8001976:	2838      	cmp	r0, #56	; 0x38
 8001978:	dd00      	ble.n	800197c <__aeabi_dmul+0x3cc>
 800197a:	e686      	b.n	800168a <__aeabi_dmul+0xda>
 800197c:	281f      	cmp	r0, #31
 800197e:	dd5b      	ble.n	8001a38 <__aeabi_dmul+0x488>
 8001980:	221f      	movs	r2, #31
 8001982:	0023      	movs	r3, r4
 8001984:	4252      	negs	r2, r2
 8001986:	1a51      	subs	r1, r2, r1
 8001988:	40cb      	lsrs	r3, r1
 800198a:	0019      	movs	r1, r3
 800198c:	2820      	cmp	r0, #32
 800198e:	d003      	beq.n	8001998 <__aeabi_dmul+0x3e8>
 8001990:	4a3b      	ldr	r2, [pc, #236]	; (8001a80 <__aeabi_dmul+0x4d0>)
 8001992:	4462      	add	r2, ip
 8001994:	4094      	lsls	r4, r2
 8001996:	4325      	orrs	r5, r4
 8001998:	1e6a      	subs	r2, r5, #1
 800199a:	4195      	sbcs	r5, r2
 800199c:	002a      	movs	r2, r5
 800199e:	430a      	orrs	r2, r1
 80019a0:	2107      	movs	r1, #7
 80019a2:	000d      	movs	r5, r1
 80019a4:	2400      	movs	r4, #0
 80019a6:	4015      	ands	r5, r2
 80019a8:	4211      	tst	r1, r2
 80019aa:	d05b      	beq.n	8001a64 <__aeabi_dmul+0x4b4>
 80019ac:	210f      	movs	r1, #15
 80019ae:	2400      	movs	r4, #0
 80019b0:	4011      	ands	r1, r2
 80019b2:	2904      	cmp	r1, #4
 80019b4:	d053      	beq.n	8001a5e <__aeabi_dmul+0x4ae>
 80019b6:	1d11      	adds	r1, r2, #4
 80019b8:	4291      	cmp	r1, r2
 80019ba:	4192      	sbcs	r2, r2
 80019bc:	4252      	negs	r2, r2
 80019be:	18a4      	adds	r4, r4, r2
 80019c0:	000a      	movs	r2, r1
 80019c2:	0223      	lsls	r3, r4, #8
 80019c4:	d54b      	bpl.n	8001a5e <__aeabi_dmul+0x4ae>
 80019c6:	2201      	movs	r2, #1
 80019c8:	2400      	movs	r4, #0
 80019ca:	2500      	movs	r5, #0
 80019cc:	e660      	b.n	8001690 <__aeabi_dmul+0xe0>
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	031b      	lsls	r3, r3, #12
 80019d2:	421c      	tst	r4, r3
 80019d4:	d009      	beq.n	80019ea <__aeabi_dmul+0x43a>
 80019d6:	421e      	tst	r6, r3
 80019d8:	d107      	bne.n	80019ea <__aeabi_dmul+0x43a>
 80019da:	4333      	orrs	r3, r6
 80019dc:	031c      	lsls	r4, r3, #12
 80019de:	4643      	mov	r3, r8
 80019e0:	0015      	movs	r5, r2
 80019e2:	0b24      	lsrs	r4, r4, #12
 80019e4:	4a25      	ldr	r2, [pc, #148]	; (8001a7c <__aeabi_dmul+0x4cc>)
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	e652      	b.n	8001690 <__aeabi_dmul+0xe0>
 80019ea:	2280      	movs	r2, #128	; 0x80
 80019ec:	0312      	lsls	r2, r2, #12
 80019ee:	4314      	orrs	r4, r2
 80019f0:	0324      	lsls	r4, r4, #12
 80019f2:	4a22      	ldr	r2, [pc, #136]	; (8001a7c <__aeabi_dmul+0x4cc>)
 80019f4:	0b24      	lsrs	r4, r4, #12
 80019f6:	9701      	str	r7, [sp, #4]
 80019f8:	e64a      	b.n	8001690 <__aeabi_dmul+0xe0>
 80019fa:	f000 fd51 	bl	80024a0 <__clzsi2>
 80019fe:	0003      	movs	r3, r0
 8001a00:	001a      	movs	r2, r3
 8001a02:	3215      	adds	r2, #21
 8001a04:	3020      	adds	r0, #32
 8001a06:	2a1c      	cmp	r2, #28
 8001a08:	dc00      	bgt.n	8001a0c <__aeabi_dmul+0x45c>
 8001a0a:	e684      	b.n	8001716 <__aeabi_dmul+0x166>
 8001a0c:	4656      	mov	r6, sl
 8001a0e:	3b08      	subs	r3, #8
 8001a10:	2200      	movs	r2, #0
 8001a12:	409e      	lsls	r6, r3
 8001a14:	e689      	b.n	800172a <__aeabi_dmul+0x17a>
 8001a16:	f000 fd43 	bl	80024a0 <__clzsi2>
 8001a1a:	0001      	movs	r1, r0
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	3115      	adds	r1, #21
 8001a20:	3220      	adds	r2, #32
 8001a22:	291c      	cmp	r1, #28
 8001a24:	dc00      	bgt.n	8001a28 <__aeabi_dmul+0x478>
 8001a26:	e64e      	b.n	80016c6 <__aeabi_dmul+0x116>
 8001a28:	0034      	movs	r4, r6
 8001a2a:	3808      	subs	r0, #8
 8001a2c:	2500      	movs	r5, #0
 8001a2e:	4084      	lsls	r4, r0
 8001a30:	e653      	b.n	80016da <__aeabi_dmul+0x12a>
 8001a32:	9b00      	ldr	r3, [sp, #0]
 8001a34:	469c      	mov	ip, r3
 8001a36:	e741      	b.n	80018bc <__aeabi_dmul+0x30c>
 8001a38:	4912      	ldr	r1, [pc, #72]	; (8001a84 <__aeabi_dmul+0x4d4>)
 8001a3a:	0022      	movs	r2, r4
 8001a3c:	4461      	add	r1, ip
 8001a3e:	002e      	movs	r6, r5
 8001a40:	408d      	lsls	r5, r1
 8001a42:	408a      	lsls	r2, r1
 8001a44:	40c6      	lsrs	r6, r0
 8001a46:	1e69      	subs	r1, r5, #1
 8001a48:	418d      	sbcs	r5, r1
 8001a4a:	4332      	orrs	r2, r6
 8001a4c:	432a      	orrs	r2, r5
 8001a4e:	40c4      	lsrs	r4, r0
 8001a50:	0753      	lsls	r3, r2, #29
 8001a52:	d0b6      	beq.n	80019c2 <__aeabi_dmul+0x412>
 8001a54:	210f      	movs	r1, #15
 8001a56:	4011      	ands	r1, r2
 8001a58:	2904      	cmp	r1, #4
 8001a5a:	d1ac      	bne.n	80019b6 <__aeabi_dmul+0x406>
 8001a5c:	e7b1      	b.n	80019c2 <__aeabi_dmul+0x412>
 8001a5e:	0765      	lsls	r5, r4, #29
 8001a60:	0264      	lsls	r4, r4, #9
 8001a62:	0b24      	lsrs	r4, r4, #12
 8001a64:	08d2      	lsrs	r2, r2, #3
 8001a66:	4315      	orrs	r5, r2
 8001a68:	2200      	movs	r2, #0
 8001a6a:	e611      	b.n	8001690 <__aeabi_dmul+0xe0>
 8001a6c:	2280      	movs	r2, #128	; 0x80
 8001a6e:	0312      	lsls	r2, r2, #12
 8001a70:	4314      	orrs	r4, r2
 8001a72:	0324      	lsls	r4, r4, #12
 8001a74:	4a01      	ldr	r2, [pc, #4]	; (8001a7c <__aeabi_dmul+0x4cc>)
 8001a76:	0b24      	lsrs	r4, r4, #12
 8001a78:	e60a      	b.n	8001690 <__aeabi_dmul+0xe0>
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	000007ff 	.word	0x000007ff
 8001a80:	0000043e 	.word	0x0000043e
 8001a84:	0000041e 	.word	0x0000041e

08001a88 <__aeabi_dsub>:
 8001a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a8a:	4657      	mov	r7, sl
 8001a8c:	464e      	mov	r6, r9
 8001a8e:	4645      	mov	r5, r8
 8001a90:	46de      	mov	lr, fp
 8001a92:	0004      	movs	r4, r0
 8001a94:	b5e0      	push	{r5, r6, r7, lr}
 8001a96:	001f      	movs	r7, r3
 8001a98:	0010      	movs	r0, r2
 8001a9a:	030b      	lsls	r3, r1, #12
 8001a9c:	0f62      	lsrs	r2, r4, #29
 8001a9e:	004e      	lsls	r6, r1, #1
 8001aa0:	0fcd      	lsrs	r5, r1, #31
 8001aa2:	0a5b      	lsrs	r3, r3, #9
 8001aa4:	0339      	lsls	r1, r7, #12
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	0a49      	lsrs	r1, r1, #9
 8001aaa:	00e2      	lsls	r2, r4, #3
 8001aac:	0f44      	lsrs	r4, r0, #29
 8001aae:	4321      	orrs	r1, r4
 8001ab0:	4cc2      	ldr	r4, [pc, #776]	; (8001dbc <__aeabi_dsub+0x334>)
 8001ab2:	4691      	mov	r9, r2
 8001ab4:	4692      	mov	sl, r2
 8001ab6:	00c0      	lsls	r0, r0, #3
 8001ab8:	007a      	lsls	r2, r7, #1
 8001aba:	4680      	mov	r8, r0
 8001abc:	0d76      	lsrs	r6, r6, #21
 8001abe:	0d52      	lsrs	r2, r2, #21
 8001ac0:	0fff      	lsrs	r7, r7, #31
 8001ac2:	42a2      	cmp	r2, r4
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_dsub+0x40>
 8001ac6:	e0b4      	b.n	8001c32 <__aeabi_dsub+0x1aa>
 8001ac8:	2401      	movs	r4, #1
 8001aca:	4067      	eors	r7, r4
 8001acc:	46bb      	mov	fp, r7
 8001ace:	42bd      	cmp	r5, r7
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dsub+0x4c>
 8001ad2:	e088      	b.n	8001be6 <__aeabi_dsub+0x15e>
 8001ad4:	1ab4      	subs	r4, r6, r2
 8001ad6:	46a4      	mov	ip, r4
 8001ad8:	2c00      	cmp	r4, #0
 8001ada:	dc00      	bgt.n	8001ade <__aeabi_dsub+0x56>
 8001adc:	e0b2      	b.n	8001c44 <__aeabi_dsub+0x1bc>
 8001ade:	2a00      	cmp	r2, #0
 8001ae0:	d100      	bne.n	8001ae4 <__aeabi_dsub+0x5c>
 8001ae2:	e0c5      	b.n	8001c70 <__aeabi_dsub+0x1e8>
 8001ae4:	4ab5      	ldr	r2, [pc, #724]	; (8001dbc <__aeabi_dsub+0x334>)
 8001ae6:	4296      	cmp	r6, r2
 8001ae8:	d100      	bne.n	8001aec <__aeabi_dsub+0x64>
 8001aea:	e28b      	b.n	8002004 <__aeabi_dsub+0x57c>
 8001aec:	2280      	movs	r2, #128	; 0x80
 8001aee:	0412      	lsls	r2, r2, #16
 8001af0:	4311      	orrs	r1, r2
 8001af2:	4662      	mov	r2, ip
 8001af4:	2a38      	cmp	r2, #56	; 0x38
 8001af6:	dd00      	ble.n	8001afa <__aeabi_dsub+0x72>
 8001af8:	e1a1      	b.n	8001e3e <__aeabi_dsub+0x3b6>
 8001afa:	2a1f      	cmp	r2, #31
 8001afc:	dd00      	ble.n	8001b00 <__aeabi_dsub+0x78>
 8001afe:	e216      	b.n	8001f2e <__aeabi_dsub+0x4a6>
 8001b00:	2720      	movs	r7, #32
 8001b02:	000c      	movs	r4, r1
 8001b04:	1abf      	subs	r7, r7, r2
 8001b06:	40bc      	lsls	r4, r7
 8001b08:	0002      	movs	r2, r0
 8001b0a:	46a0      	mov	r8, r4
 8001b0c:	4664      	mov	r4, ip
 8001b0e:	40b8      	lsls	r0, r7
 8001b10:	40e2      	lsrs	r2, r4
 8001b12:	4644      	mov	r4, r8
 8001b14:	4314      	orrs	r4, r2
 8001b16:	0002      	movs	r2, r0
 8001b18:	1e50      	subs	r0, r2, #1
 8001b1a:	4182      	sbcs	r2, r0
 8001b1c:	4660      	mov	r0, ip
 8001b1e:	40c1      	lsrs	r1, r0
 8001b20:	4322      	orrs	r2, r4
 8001b22:	1a5b      	subs	r3, r3, r1
 8001b24:	4649      	mov	r1, r9
 8001b26:	1a8c      	subs	r4, r1, r2
 8001b28:	45a1      	cmp	r9, r4
 8001b2a:	4192      	sbcs	r2, r2
 8001b2c:	4252      	negs	r2, r2
 8001b2e:	1a9b      	subs	r3, r3, r2
 8001b30:	4698      	mov	r8, r3
 8001b32:	4643      	mov	r3, r8
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	d400      	bmi.n	8001b3a <__aeabi_dsub+0xb2>
 8001b38:	e117      	b.n	8001d6a <__aeabi_dsub+0x2e2>
 8001b3a:	4643      	mov	r3, r8
 8001b3c:	025b      	lsls	r3, r3, #9
 8001b3e:	0a5b      	lsrs	r3, r3, #9
 8001b40:	4698      	mov	r8, r3
 8001b42:	4643      	mov	r3, r8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_dsub+0xc2>
 8001b48:	e16c      	b.n	8001e24 <__aeabi_dsub+0x39c>
 8001b4a:	4640      	mov	r0, r8
 8001b4c:	f000 fca8 	bl	80024a0 <__clzsi2>
 8001b50:	0002      	movs	r2, r0
 8001b52:	3a08      	subs	r2, #8
 8001b54:	2120      	movs	r1, #32
 8001b56:	0020      	movs	r0, r4
 8001b58:	4643      	mov	r3, r8
 8001b5a:	1a89      	subs	r1, r1, r2
 8001b5c:	4093      	lsls	r3, r2
 8001b5e:	40c8      	lsrs	r0, r1
 8001b60:	4094      	lsls	r4, r2
 8001b62:	4303      	orrs	r3, r0
 8001b64:	4296      	cmp	r6, r2
 8001b66:	dd00      	ble.n	8001b6a <__aeabi_dsub+0xe2>
 8001b68:	e157      	b.n	8001e1a <__aeabi_dsub+0x392>
 8001b6a:	1b96      	subs	r6, r2, r6
 8001b6c:	1c71      	adds	r1, r6, #1
 8001b6e:	291f      	cmp	r1, #31
 8001b70:	dd00      	ble.n	8001b74 <__aeabi_dsub+0xec>
 8001b72:	e1cb      	b.n	8001f0c <__aeabi_dsub+0x484>
 8001b74:	2220      	movs	r2, #32
 8001b76:	0018      	movs	r0, r3
 8001b78:	0026      	movs	r6, r4
 8001b7a:	1a52      	subs	r2, r2, r1
 8001b7c:	4094      	lsls	r4, r2
 8001b7e:	4090      	lsls	r0, r2
 8001b80:	40ce      	lsrs	r6, r1
 8001b82:	40cb      	lsrs	r3, r1
 8001b84:	1e62      	subs	r2, r4, #1
 8001b86:	4194      	sbcs	r4, r2
 8001b88:	4330      	orrs	r0, r6
 8001b8a:	4698      	mov	r8, r3
 8001b8c:	2600      	movs	r6, #0
 8001b8e:	4304      	orrs	r4, r0
 8001b90:	0763      	lsls	r3, r4, #29
 8001b92:	d009      	beq.n	8001ba8 <__aeabi_dsub+0x120>
 8001b94:	230f      	movs	r3, #15
 8001b96:	4023      	ands	r3, r4
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d005      	beq.n	8001ba8 <__aeabi_dsub+0x120>
 8001b9c:	1d23      	adds	r3, r4, #4
 8001b9e:	42a3      	cmp	r3, r4
 8001ba0:	41a4      	sbcs	r4, r4
 8001ba2:	4264      	negs	r4, r4
 8001ba4:	44a0      	add	r8, r4
 8001ba6:	001c      	movs	r4, r3
 8001ba8:	4643      	mov	r3, r8
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	d400      	bmi.n	8001bb0 <__aeabi_dsub+0x128>
 8001bae:	e0df      	b.n	8001d70 <__aeabi_dsub+0x2e8>
 8001bb0:	4b82      	ldr	r3, [pc, #520]	; (8001dbc <__aeabi_dsub+0x334>)
 8001bb2:	3601      	adds	r6, #1
 8001bb4:	429e      	cmp	r6, r3
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dsub+0x132>
 8001bb8:	e0fb      	b.n	8001db2 <__aeabi_dsub+0x32a>
 8001bba:	4642      	mov	r2, r8
 8001bbc:	4b80      	ldr	r3, [pc, #512]	; (8001dc0 <__aeabi_dsub+0x338>)
 8001bbe:	08e4      	lsrs	r4, r4, #3
 8001bc0:	401a      	ands	r2, r3
 8001bc2:	0013      	movs	r3, r2
 8001bc4:	0571      	lsls	r1, r6, #21
 8001bc6:	0752      	lsls	r2, r2, #29
 8001bc8:	025b      	lsls	r3, r3, #9
 8001bca:	4322      	orrs	r2, r4
 8001bcc:	0b1b      	lsrs	r3, r3, #12
 8001bce:	0d49      	lsrs	r1, r1, #21
 8001bd0:	0509      	lsls	r1, r1, #20
 8001bd2:	07ed      	lsls	r5, r5, #31
 8001bd4:	4319      	orrs	r1, r3
 8001bd6:	4329      	orrs	r1, r5
 8001bd8:	0010      	movs	r0, r2
 8001bda:	bcf0      	pop	{r4, r5, r6, r7}
 8001bdc:	46bb      	mov	fp, r7
 8001bde:	46b2      	mov	sl, r6
 8001be0:	46a9      	mov	r9, r5
 8001be2:	46a0      	mov	r8, r4
 8001be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001be6:	1ab4      	subs	r4, r6, r2
 8001be8:	46a4      	mov	ip, r4
 8001bea:	2c00      	cmp	r4, #0
 8001bec:	dd58      	ble.n	8001ca0 <__aeabi_dsub+0x218>
 8001bee:	2a00      	cmp	r2, #0
 8001bf0:	d100      	bne.n	8001bf4 <__aeabi_dsub+0x16c>
 8001bf2:	e09e      	b.n	8001d32 <__aeabi_dsub+0x2aa>
 8001bf4:	4a71      	ldr	r2, [pc, #452]	; (8001dbc <__aeabi_dsub+0x334>)
 8001bf6:	4296      	cmp	r6, r2
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dsub+0x174>
 8001bfa:	e13b      	b.n	8001e74 <__aeabi_dsub+0x3ec>
 8001bfc:	2280      	movs	r2, #128	; 0x80
 8001bfe:	0412      	lsls	r2, r2, #16
 8001c00:	4311      	orrs	r1, r2
 8001c02:	4662      	mov	r2, ip
 8001c04:	2a38      	cmp	r2, #56	; 0x38
 8001c06:	dd00      	ble.n	8001c0a <__aeabi_dsub+0x182>
 8001c08:	e0c1      	b.n	8001d8e <__aeabi_dsub+0x306>
 8001c0a:	2a1f      	cmp	r2, #31
 8001c0c:	dc00      	bgt.n	8001c10 <__aeabi_dsub+0x188>
 8001c0e:	e1bb      	b.n	8001f88 <__aeabi_dsub+0x500>
 8001c10:	000c      	movs	r4, r1
 8001c12:	3a20      	subs	r2, #32
 8001c14:	40d4      	lsrs	r4, r2
 8001c16:	0022      	movs	r2, r4
 8001c18:	4664      	mov	r4, ip
 8001c1a:	2c20      	cmp	r4, #32
 8001c1c:	d004      	beq.n	8001c28 <__aeabi_dsub+0x1a0>
 8001c1e:	2740      	movs	r7, #64	; 0x40
 8001c20:	1b3f      	subs	r7, r7, r4
 8001c22:	40b9      	lsls	r1, r7
 8001c24:	4308      	orrs	r0, r1
 8001c26:	4680      	mov	r8, r0
 8001c28:	4644      	mov	r4, r8
 8001c2a:	1e61      	subs	r1, r4, #1
 8001c2c:	418c      	sbcs	r4, r1
 8001c2e:	4314      	orrs	r4, r2
 8001c30:	e0b1      	b.n	8001d96 <__aeabi_dsub+0x30e>
 8001c32:	000c      	movs	r4, r1
 8001c34:	4304      	orrs	r4, r0
 8001c36:	d02a      	beq.n	8001c8e <__aeabi_dsub+0x206>
 8001c38:	46bb      	mov	fp, r7
 8001c3a:	42bd      	cmp	r5, r7
 8001c3c:	d02d      	beq.n	8001c9a <__aeabi_dsub+0x212>
 8001c3e:	4c61      	ldr	r4, [pc, #388]	; (8001dc4 <__aeabi_dsub+0x33c>)
 8001c40:	46a4      	mov	ip, r4
 8001c42:	44b4      	add	ip, r6
 8001c44:	4664      	mov	r4, ip
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	d05c      	beq.n	8001d04 <__aeabi_dsub+0x27c>
 8001c4a:	1b94      	subs	r4, r2, r6
 8001c4c:	46a4      	mov	ip, r4
 8001c4e:	2e00      	cmp	r6, #0
 8001c50:	d000      	beq.n	8001c54 <__aeabi_dsub+0x1cc>
 8001c52:	e115      	b.n	8001e80 <__aeabi_dsub+0x3f8>
 8001c54:	464d      	mov	r5, r9
 8001c56:	431d      	orrs	r5, r3
 8001c58:	d100      	bne.n	8001c5c <__aeabi_dsub+0x1d4>
 8001c5a:	e1c3      	b.n	8001fe4 <__aeabi_dsub+0x55c>
 8001c5c:	1e65      	subs	r5, r4, #1
 8001c5e:	2c01      	cmp	r4, #1
 8001c60:	d100      	bne.n	8001c64 <__aeabi_dsub+0x1dc>
 8001c62:	e20c      	b.n	800207e <__aeabi_dsub+0x5f6>
 8001c64:	4e55      	ldr	r6, [pc, #340]	; (8001dbc <__aeabi_dsub+0x334>)
 8001c66:	42b4      	cmp	r4, r6
 8001c68:	d100      	bne.n	8001c6c <__aeabi_dsub+0x1e4>
 8001c6a:	e1f8      	b.n	800205e <__aeabi_dsub+0x5d6>
 8001c6c:	46ac      	mov	ip, r5
 8001c6e:	e10e      	b.n	8001e8e <__aeabi_dsub+0x406>
 8001c70:	000a      	movs	r2, r1
 8001c72:	4302      	orrs	r2, r0
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dsub+0x1f0>
 8001c76:	e136      	b.n	8001ee6 <__aeabi_dsub+0x45e>
 8001c78:	0022      	movs	r2, r4
 8001c7a:	3a01      	subs	r2, #1
 8001c7c:	2c01      	cmp	r4, #1
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dsub+0x1fa>
 8001c80:	e1c6      	b.n	8002010 <__aeabi_dsub+0x588>
 8001c82:	4c4e      	ldr	r4, [pc, #312]	; (8001dbc <__aeabi_dsub+0x334>)
 8001c84:	45a4      	cmp	ip, r4
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dsub+0x202>
 8001c88:	e0f4      	b.n	8001e74 <__aeabi_dsub+0x3ec>
 8001c8a:	4694      	mov	ip, r2
 8001c8c:	e731      	b.n	8001af2 <__aeabi_dsub+0x6a>
 8001c8e:	2401      	movs	r4, #1
 8001c90:	4067      	eors	r7, r4
 8001c92:	46bb      	mov	fp, r7
 8001c94:	42bd      	cmp	r5, r7
 8001c96:	d000      	beq.n	8001c9a <__aeabi_dsub+0x212>
 8001c98:	e71c      	b.n	8001ad4 <__aeabi_dsub+0x4c>
 8001c9a:	4c4a      	ldr	r4, [pc, #296]	; (8001dc4 <__aeabi_dsub+0x33c>)
 8001c9c:	46a4      	mov	ip, r4
 8001c9e:	44b4      	add	ip, r6
 8001ca0:	4664      	mov	r4, ip
 8001ca2:	2c00      	cmp	r4, #0
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x220>
 8001ca6:	e0cf      	b.n	8001e48 <__aeabi_dsub+0x3c0>
 8001ca8:	1b94      	subs	r4, r2, r6
 8001caa:	46a4      	mov	ip, r4
 8001cac:	2e00      	cmp	r6, #0
 8001cae:	d100      	bne.n	8001cb2 <__aeabi_dsub+0x22a>
 8001cb0:	e15c      	b.n	8001f6c <__aeabi_dsub+0x4e4>
 8001cb2:	4e42      	ldr	r6, [pc, #264]	; (8001dbc <__aeabi_dsub+0x334>)
 8001cb4:	42b2      	cmp	r2, r6
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dsub+0x232>
 8001cb8:	e1ec      	b.n	8002094 <__aeabi_dsub+0x60c>
 8001cba:	2680      	movs	r6, #128	; 0x80
 8001cbc:	0436      	lsls	r6, r6, #16
 8001cbe:	4333      	orrs	r3, r6
 8001cc0:	4664      	mov	r4, ip
 8001cc2:	2c38      	cmp	r4, #56	; 0x38
 8001cc4:	dd00      	ble.n	8001cc8 <__aeabi_dsub+0x240>
 8001cc6:	e1b3      	b.n	8002030 <__aeabi_dsub+0x5a8>
 8001cc8:	2c1f      	cmp	r4, #31
 8001cca:	dd00      	ble.n	8001cce <__aeabi_dsub+0x246>
 8001ccc:	e238      	b.n	8002140 <__aeabi_dsub+0x6b8>
 8001cce:	2620      	movs	r6, #32
 8001cd0:	1b36      	subs	r6, r6, r4
 8001cd2:	001c      	movs	r4, r3
 8001cd4:	40b4      	lsls	r4, r6
 8001cd6:	464f      	mov	r7, r9
 8001cd8:	46a0      	mov	r8, r4
 8001cda:	4664      	mov	r4, ip
 8001cdc:	40e7      	lsrs	r7, r4
 8001cde:	4644      	mov	r4, r8
 8001ce0:	433c      	orrs	r4, r7
 8001ce2:	464f      	mov	r7, r9
 8001ce4:	40b7      	lsls	r7, r6
 8001ce6:	003e      	movs	r6, r7
 8001ce8:	1e77      	subs	r7, r6, #1
 8001cea:	41be      	sbcs	r6, r7
 8001cec:	4334      	orrs	r4, r6
 8001cee:	4666      	mov	r6, ip
 8001cf0:	40f3      	lsrs	r3, r6
 8001cf2:	18c9      	adds	r1, r1, r3
 8001cf4:	1824      	adds	r4, r4, r0
 8001cf6:	4284      	cmp	r4, r0
 8001cf8:	419b      	sbcs	r3, r3
 8001cfa:	425b      	negs	r3, r3
 8001cfc:	4698      	mov	r8, r3
 8001cfe:	0016      	movs	r6, r2
 8001d00:	4488      	add	r8, r1
 8001d02:	e04e      	b.n	8001da2 <__aeabi_dsub+0x31a>
 8001d04:	4a30      	ldr	r2, [pc, #192]	; (8001dc8 <__aeabi_dsub+0x340>)
 8001d06:	1c74      	adds	r4, r6, #1
 8001d08:	4214      	tst	r4, r2
 8001d0a:	d000      	beq.n	8001d0e <__aeabi_dsub+0x286>
 8001d0c:	e0d6      	b.n	8001ebc <__aeabi_dsub+0x434>
 8001d0e:	464a      	mov	r2, r9
 8001d10:	431a      	orrs	r2, r3
 8001d12:	2e00      	cmp	r6, #0
 8001d14:	d000      	beq.n	8001d18 <__aeabi_dsub+0x290>
 8001d16:	e15b      	b.n	8001fd0 <__aeabi_dsub+0x548>
 8001d18:	2a00      	cmp	r2, #0
 8001d1a:	d100      	bne.n	8001d1e <__aeabi_dsub+0x296>
 8001d1c:	e1a5      	b.n	800206a <__aeabi_dsub+0x5e2>
 8001d1e:	000a      	movs	r2, r1
 8001d20:	4302      	orrs	r2, r0
 8001d22:	d000      	beq.n	8001d26 <__aeabi_dsub+0x29e>
 8001d24:	e1bb      	b.n	800209e <__aeabi_dsub+0x616>
 8001d26:	464a      	mov	r2, r9
 8001d28:	0759      	lsls	r1, r3, #29
 8001d2a:	08d2      	lsrs	r2, r2, #3
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	08db      	lsrs	r3, r3, #3
 8001d30:	e027      	b.n	8001d82 <__aeabi_dsub+0x2fa>
 8001d32:	000a      	movs	r2, r1
 8001d34:	4302      	orrs	r2, r0
 8001d36:	d100      	bne.n	8001d3a <__aeabi_dsub+0x2b2>
 8001d38:	e174      	b.n	8002024 <__aeabi_dsub+0x59c>
 8001d3a:	0022      	movs	r2, r4
 8001d3c:	3a01      	subs	r2, #1
 8001d3e:	2c01      	cmp	r4, #1
 8001d40:	d005      	beq.n	8001d4e <__aeabi_dsub+0x2c6>
 8001d42:	4c1e      	ldr	r4, [pc, #120]	; (8001dbc <__aeabi_dsub+0x334>)
 8001d44:	45a4      	cmp	ip, r4
 8001d46:	d100      	bne.n	8001d4a <__aeabi_dsub+0x2c2>
 8001d48:	e094      	b.n	8001e74 <__aeabi_dsub+0x3ec>
 8001d4a:	4694      	mov	ip, r2
 8001d4c:	e759      	b.n	8001c02 <__aeabi_dsub+0x17a>
 8001d4e:	4448      	add	r0, r9
 8001d50:	4548      	cmp	r0, r9
 8001d52:	4192      	sbcs	r2, r2
 8001d54:	185b      	adds	r3, r3, r1
 8001d56:	4698      	mov	r8, r3
 8001d58:	0004      	movs	r4, r0
 8001d5a:	4252      	negs	r2, r2
 8001d5c:	4490      	add	r8, r2
 8001d5e:	4643      	mov	r3, r8
 8001d60:	2602      	movs	r6, #2
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	d500      	bpl.n	8001d68 <__aeabi_dsub+0x2e0>
 8001d66:	e0c4      	b.n	8001ef2 <__aeabi_dsub+0x46a>
 8001d68:	3e01      	subs	r6, #1
 8001d6a:	0763      	lsls	r3, r4, #29
 8001d6c:	d000      	beq.n	8001d70 <__aeabi_dsub+0x2e8>
 8001d6e:	e711      	b.n	8001b94 <__aeabi_dsub+0x10c>
 8001d70:	4643      	mov	r3, r8
 8001d72:	46b4      	mov	ip, r6
 8001d74:	0759      	lsls	r1, r3, #29
 8001d76:	08e2      	lsrs	r2, r4, #3
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	08db      	lsrs	r3, r3, #3
 8001d7c:	490f      	ldr	r1, [pc, #60]	; (8001dbc <__aeabi_dsub+0x334>)
 8001d7e:	458c      	cmp	ip, r1
 8001d80:	d040      	beq.n	8001e04 <__aeabi_dsub+0x37c>
 8001d82:	4661      	mov	r1, ip
 8001d84:	031b      	lsls	r3, r3, #12
 8001d86:	0549      	lsls	r1, r1, #21
 8001d88:	0b1b      	lsrs	r3, r3, #12
 8001d8a:	0d49      	lsrs	r1, r1, #21
 8001d8c:	e720      	b.n	8001bd0 <__aeabi_dsub+0x148>
 8001d8e:	4301      	orrs	r1, r0
 8001d90:	000c      	movs	r4, r1
 8001d92:	1e61      	subs	r1, r4, #1
 8001d94:	418c      	sbcs	r4, r1
 8001d96:	444c      	add	r4, r9
 8001d98:	454c      	cmp	r4, r9
 8001d9a:	4192      	sbcs	r2, r2
 8001d9c:	4252      	negs	r2, r2
 8001d9e:	4690      	mov	r8, r2
 8001da0:	4498      	add	r8, r3
 8001da2:	4643      	mov	r3, r8
 8001da4:	021b      	lsls	r3, r3, #8
 8001da6:	d5e0      	bpl.n	8001d6a <__aeabi_dsub+0x2e2>
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <__aeabi_dsub+0x334>)
 8001daa:	3601      	adds	r6, #1
 8001dac:	429e      	cmp	r6, r3
 8001dae:	d000      	beq.n	8001db2 <__aeabi_dsub+0x32a>
 8001db0:	e09f      	b.n	8001ef2 <__aeabi_dsub+0x46a>
 8001db2:	0031      	movs	r1, r6
 8001db4:	2300      	movs	r3, #0
 8001db6:	2200      	movs	r2, #0
 8001db8:	e70a      	b.n	8001bd0 <__aeabi_dsub+0x148>
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	000007ff 	.word	0x000007ff
 8001dc0:	ff7fffff 	.word	0xff7fffff
 8001dc4:	fffff801 	.word	0xfffff801
 8001dc8:	000007fe 	.word	0x000007fe
 8001dcc:	2a00      	cmp	r2, #0
 8001dce:	d100      	bne.n	8001dd2 <__aeabi_dsub+0x34a>
 8001dd0:	e160      	b.n	8002094 <__aeabi_dsub+0x60c>
 8001dd2:	000a      	movs	r2, r1
 8001dd4:	4302      	orrs	r2, r0
 8001dd6:	d04d      	beq.n	8001e74 <__aeabi_dsub+0x3ec>
 8001dd8:	464a      	mov	r2, r9
 8001dda:	075c      	lsls	r4, r3, #29
 8001ddc:	08d2      	lsrs	r2, r2, #3
 8001dde:	4322      	orrs	r2, r4
 8001de0:	2480      	movs	r4, #128	; 0x80
 8001de2:	08db      	lsrs	r3, r3, #3
 8001de4:	0324      	lsls	r4, r4, #12
 8001de6:	4223      	tst	r3, r4
 8001de8:	d007      	beq.n	8001dfa <__aeabi_dsub+0x372>
 8001dea:	08ce      	lsrs	r6, r1, #3
 8001dec:	4226      	tst	r6, r4
 8001dee:	d104      	bne.n	8001dfa <__aeabi_dsub+0x372>
 8001df0:	465d      	mov	r5, fp
 8001df2:	0033      	movs	r3, r6
 8001df4:	08c2      	lsrs	r2, r0, #3
 8001df6:	0749      	lsls	r1, r1, #29
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	0f51      	lsrs	r1, r2, #29
 8001dfc:	00d2      	lsls	r2, r2, #3
 8001dfe:	08d2      	lsrs	r2, r2, #3
 8001e00:	0749      	lsls	r1, r1, #29
 8001e02:	430a      	orrs	r2, r1
 8001e04:	0011      	movs	r1, r2
 8001e06:	4319      	orrs	r1, r3
 8001e08:	d100      	bne.n	8001e0c <__aeabi_dsub+0x384>
 8001e0a:	e1c8      	b.n	800219e <__aeabi_dsub+0x716>
 8001e0c:	2180      	movs	r1, #128	; 0x80
 8001e0e:	0309      	lsls	r1, r1, #12
 8001e10:	430b      	orrs	r3, r1
 8001e12:	031b      	lsls	r3, r3, #12
 8001e14:	49d5      	ldr	r1, [pc, #852]	; (800216c <__aeabi_dsub+0x6e4>)
 8001e16:	0b1b      	lsrs	r3, r3, #12
 8001e18:	e6da      	b.n	8001bd0 <__aeabi_dsub+0x148>
 8001e1a:	49d5      	ldr	r1, [pc, #852]	; (8002170 <__aeabi_dsub+0x6e8>)
 8001e1c:	1ab6      	subs	r6, r6, r2
 8001e1e:	400b      	ands	r3, r1
 8001e20:	4698      	mov	r8, r3
 8001e22:	e6b5      	b.n	8001b90 <__aeabi_dsub+0x108>
 8001e24:	0020      	movs	r0, r4
 8001e26:	f000 fb3b 	bl	80024a0 <__clzsi2>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	3218      	adds	r2, #24
 8001e2e:	2a1f      	cmp	r2, #31
 8001e30:	dc00      	bgt.n	8001e34 <__aeabi_dsub+0x3ac>
 8001e32:	e68f      	b.n	8001b54 <__aeabi_dsub+0xcc>
 8001e34:	0023      	movs	r3, r4
 8001e36:	3808      	subs	r0, #8
 8001e38:	4083      	lsls	r3, r0
 8001e3a:	2400      	movs	r4, #0
 8001e3c:	e692      	b.n	8001b64 <__aeabi_dsub+0xdc>
 8001e3e:	4308      	orrs	r0, r1
 8001e40:	0002      	movs	r2, r0
 8001e42:	1e50      	subs	r0, r2, #1
 8001e44:	4182      	sbcs	r2, r0
 8001e46:	e66d      	b.n	8001b24 <__aeabi_dsub+0x9c>
 8001e48:	4cca      	ldr	r4, [pc, #808]	; (8002174 <__aeabi_dsub+0x6ec>)
 8001e4a:	1c72      	adds	r2, r6, #1
 8001e4c:	4222      	tst	r2, r4
 8001e4e:	d000      	beq.n	8001e52 <__aeabi_dsub+0x3ca>
 8001e50:	e0ad      	b.n	8001fae <__aeabi_dsub+0x526>
 8001e52:	464a      	mov	r2, r9
 8001e54:	431a      	orrs	r2, r3
 8001e56:	2e00      	cmp	r6, #0
 8001e58:	d1b8      	bne.n	8001dcc <__aeabi_dsub+0x344>
 8001e5a:	2a00      	cmp	r2, #0
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dsub+0x3d8>
 8001e5e:	e158      	b.n	8002112 <__aeabi_dsub+0x68a>
 8001e60:	000a      	movs	r2, r1
 8001e62:	4302      	orrs	r2, r0
 8001e64:	d000      	beq.n	8001e68 <__aeabi_dsub+0x3e0>
 8001e66:	e159      	b.n	800211c <__aeabi_dsub+0x694>
 8001e68:	464a      	mov	r2, r9
 8001e6a:	0759      	lsls	r1, r3, #29
 8001e6c:	08d2      	lsrs	r2, r2, #3
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	08db      	lsrs	r3, r3, #3
 8001e72:	e786      	b.n	8001d82 <__aeabi_dsub+0x2fa>
 8001e74:	464a      	mov	r2, r9
 8001e76:	0759      	lsls	r1, r3, #29
 8001e78:	08d2      	lsrs	r2, r2, #3
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	08db      	lsrs	r3, r3, #3
 8001e7e:	e7c1      	b.n	8001e04 <__aeabi_dsub+0x37c>
 8001e80:	4dba      	ldr	r5, [pc, #744]	; (800216c <__aeabi_dsub+0x6e4>)
 8001e82:	42aa      	cmp	r2, r5
 8001e84:	d100      	bne.n	8001e88 <__aeabi_dsub+0x400>
 8001e86:	e11e      	b.n	80020c6 <__aeabi_dsub+0x63e>
 8001e88:	2580      	movs	r5, #128	; 0x80
 8001e8a:	042d      	lsls	r5, r5, #16
 8001e8c:	432b      	orrs	r3, r5
 8001e8e:	4664      	mov	r4, ip
 8001e90:	2c38      	cmp	r4, #56	; 0x38
 8001e92:	dc5d      	bgt.n	8001f50 <__aeabi_dsub+0x4c8>
 8001e94:	2c1f      	cmp	r4, #31
 8001e96:	dd00      	ble.n	8001e9a <__aeabi_dsub+0x412>
 8001e98:	e0d0      	b.n	800203c <__aeabi_dsub+0x5b4>
 8001e9a:	2520      	movs	r5, #32
 8001e9c:	4667      	mov	r7, ip
 8001e9e:	1b2d      	subs	r5, r5, r4
 8001ea0:	464e      	mov	r6, r9
 8001ea2:	001c      	movs	r4, r3
 8001ea4:	40fe      	lsrs	r6, r7
 8001ea6:	40ac      	lsls	r4, r5
 8001ea8:	4334      	orrs	r4, r6
 8001eaa:	464e      	mov	r6, r9
 8001eac:	40ae      	lsls	r6, r5
 8001eae:	0035      	movs	r5, r6
 8001eb0:	40fb      	lsrs	r3, r7
 8001eb2:	1e6e      	subs	r6, r5, #1
 8001eb4:	41b5      	sbcs	r5, r6
 8001eb6:	1ac9      	subs	r1, r1, r3
 8001eb8:	432c      	orrs	r4, r5
 8001eba:	e04e      	b.n	8001f5a <__aeabi_dsub+0x4d2>
 8001ebc:	464a      	mov	r2, r9
 8001ebe:	1a14      	subs	r4, r2, r0
 8001ec0:	45a1      	cmp	r9, r4
 8001ec2:	4192      	sbcs	r2, r2
 8001ec4:	4252      	negs	r2, r2
 8001ec6:	4690      	mov	r8, r2
 8001ec8:	1a5f      	subs	r7, r3, r1
 8001eca:	003a      	movs	r2, r7
 8001ecc:	4647      	mov	r7, r8
 8001ece:	1bd2      	subs	r2, r2, r7
 8001ed0:	4690      	mov	r8, r2
 8001ed2:	0212      	lsls	r2, r2, #8
 8001ed4:	d500      	bpl.n	8001ed8 <__aeabi_dsub+0x450>
 8001ed6:	e08b      	b.n	8001ff0 <__aeabi_dsub+0x568>
 8001ed8:	4642      	mov	r2, r8
 8001eda:	4322      	orrs	r2, r4
 8001edc:	d000      	beq.n	8001ee0 <__aeabi_dsub+0x458>
 8001ede:	e630      	b.n	8001b42 <__aeabi_dsub+0xba>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	2500      	movs	r5, #0
 8001ee4:	e74d      	b.n	8001d82 <__aeabi_dsub+0x2fa>
 8001ee6:	464a      	mov	r2, r9
 8001ee8:	0759      	lsls	r1, r3, #29
 8001eea:	08d2      	lsrs	r2, r2, #3
 8001eec:	430a      	orrs	r2, r1
 8001eee:	08db      	lsrs	r3, r3, #3
 8001ef0:	e744      	b.n	8001d7c <__aeabi_dsub+0x2f4>
 8001ef2:	4642      	mov	r2, r8
 8001ef4:	4b9e      	ldr	r3, [pc, #632]	; (8002170 <__aeabi_dsub+0x6e8>)
 8001ef6:	0861      	lsrs	r1, r4, #1
 8001ef8:	401a      	ands	r2, r3
 8001efa:	0013      	movs	r3, r2
 8001efc:	2201      	movs	r2, #1
 8001efe:	4014      	ands	r4, r2
 8001f00:	430c      	orrs	r4, r1
 8001f02:	07da      	lsls	r2, r3, #31
 8001f04:	085b      	lsrs	r3, r3, #1
 8001f06:	4698      	mov	r8, r3
 8001f08:	4314      	orrs	r4, r2
 8001f0a:	e641      	b.n	8001b90 <__aeabi_dsub+0x108>
 8001f0c:	001a      	movs	r2, r3
 8001f0e:	3e1f      	subs	r6, #31
 8001f10:	40f2      	lsrs	r2, r6
 8001f12:	0016      	movs	r6, r2
 8001f14:	2920      	cmp	r1, #32
 8001f16:	d003      	beq.n	8001f20 <__aeabi_dsub+0x498>
 8001f18:	2240      	movs	r2, #64	; 0x40
 8001f1a:	1a51      	subs	r1, r2, r1
 8001f1c:	408b      	lsls	r3, r1
 8001f1e:	431c      	orrs	r4, r3
 8001f20:	1e62      	subs	r2, r4, #1
 8001f22:	4194      	sbcs	r4, r2
 8001f24:	2300      	movs	r3, #0
 8001f26:	4334      	orrs	r4, r6
 8001f28:	4698      	mov	r8, r3
 8001f2a:	2600      	movs	r6, #0
 8001f2c:	e71d      	b.n	8001d6a <__aeabi_dsub+0x2e2>
 8001f2e:	000c      	movs	r4, r1
 8001f30:	3a20      	subs	r2, #32
 8001f32:	40d4      	lsrs	r4, r2
 8001f34:	0022      	movs	r2, r4
 8001f36:	4664      	mov	r4, ip
 8001f38:	2c20      	cmp	r4, #32
 8001f3a:	d004      	beq.n	8001f46 <__aeabi_dsub+0x4be>
 8001f3c:	2740      	movs	r7, #64	; 0x40
 8001f3e:	1b3f      	subs	r7, r7, r4
 8001f40:	40b9      	lsls	r1, r7
 8001f42:	4308      	orrs	r0, r1
 8001f44:	4680      	mov	r8, r0
 8001f46:	4644      	mov	r4, r8
 8001f48:	1e61      	subs	r1, r4, #1
 8001f4a:	418c      	sbcs	r4, r1
 8001f4c:	4322      	orrs	r2, r4
 8001f4e:	e5e9      	b.n	8001b24 <__aeabi_dsub+0x9c>
 8001f50:	464c      	mov	r4, r9
 8001f52:	4323      	orrs	r3, r4
 8001f54:	001c      	movs	r4, r3
 8001f56:	1e63      	subs	r3, r4, #1
 8001f58:	419c      	sbcs	r4, r3
 8001f5a:	1b04      	subs	r4, r0, r4
 8001f5c:	42a0      	cmp	r0, r4
 8001f5e:	419b      	sbcs	r3, r3
 8001f60:	425b      	negs	r3, r3
 8001f62:	1acb      	subs	r3, r1, r3
 8001f64:	4698      	mov	r8, r3
 8001f66:	465d      	mov	r5, fp
 8001f68:	0016      	movs	r6, r2
 8001f6a:	e5e2      	b.n	8001b32 <__aeabi_dsub+0xaa>
 8001f6c:	464e      	mov	r6, r9
 8001f6e:	431e      	orrs	r6, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_dsub+0x4ec>
 8001f72:	e0ae      	b.n	80020d2 <__aeabi_dsub+0x64a>
 8001f74:	1e66      	subs	r6, r4, #1
 8001f76:	2c01      	cmp	r4, #1
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x4f4>
 8001f7a:	e0fd      	b.n	8002178 <__aeabi_dsub+0x6f0>
 8001f7c:	4f7b      	ldr	r7, [pc, #492]	; (800216c <__aeabi_dsub+0x6e4>)
 8001f7e:	42bc      	cmp	r4, r7
 8001f80:	d100      	bne.n	8001f84 <__aeabi_dsub+0x4fc>
 8001f82:	e107      	b.n	8002194 <__aeabi_dsub+0x70c>
 8001f84:	46b4      	mov	ip, r6
 8001f86:	e69b      	b.n	8001cc0 <__aeabi_dsub+0x238>
 8001f88:	4664      	mov	r4, ip
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	1b12      	subs	r2, r2, r4
 8001f8e:	000c      	movs	r4, r1
 8001f90:	4094      	lsls	r4, r2
 8001f92:	0007      	movs	r7, r0
 8001f94:	4090      	lsls	r0, r2
 8001f96:	46a0      	mov	r8, r4
 8001f98:	4664      	mov	r4, ip
 8001f9a:	1e42      	subs	r2, r0, #1
 8001f9c:	4190      	sbcs	r0, r2
 8001f9e:	4662      	mov	r2, ip
 8001fa0:	40e7      	lsrs	r7, r4
 8001fa2:	4644      	mov	r4, r8
 8001fa4:	40d1      	lsrs	r1, r2
 8001fa6:	433c      	orrs	r4, r7
 8001fa8:	4304      	orrs	r4, r0
 8001faa:	185b      	adds	r3, r3, r1
 8001fac:	e6f3      	b.n	8001d96 <__aeabi_dsub+0x30e>
 8001fae:	4c6f      	ldr	r4, [pc, #444]	; (800216c <__aeabi_dsub+0x6e4>)
 8001fb0:	42a2      	cmp	r2, r4
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dsub+0x52e>
 8001fb4:	e0d5      	b.n	8002162 <__aeabi_dsub+0x6da>
 8001fb6:	4448      	add	r0, r9
 8001fb8:	185b      	adds	r3, r3, r1
 8001fba:	4548      	cmp	r0, r9
 8001fbc:	4189      	sbcs	r1, r1
 8001fbe:	4249      	negs	r1, r1
 8001fc0:	185b      	adds	r3, r3, r1
 8001fc2:	07dc      	lsls	r4, r3, #31
 8001fc4:	0840      	lsrs	r0, r0, #1
 8001fc6:	085b      	lsrs	r3, r3, #1
 8001fc8:	4698      	mov	r8, r3
 8001fca:	0016      	movs	r6, r2
 8001fcc:	4304      	orrs	r4, r0
 8001fce:	e6cc      	b.n	8001d6a <__aeabi_dsub+0x2e2>
 8001fd0:	2a00      	cmp	r2, #0
 8001fd2:	d000      	beq.n	8001fd6 <__aeabi_dsub+0x54e>
 8001fd4:	e082      	b.n	80020dc <__aeabi_dsub+0x654>
 8001fd6:	000a      	movs	r2, r1
 8001fd8:	4302      	orrs	r2, r0
 8001fda:	d140      	bne.n	800205e <__aeabi_dsub+0x5d6>
 8001fdc:	2380      	movs	r3, #128	; 0x80
 8001fde:	2500      	movs	r5, #0
 8001fe0:	031b      	lsls	r3, r3, #12
 8001fe2:	e713      	b.n	8001e0c <__aeabi_dsub+0x384>
 8001fe4:	074b      	lsls	r3, r1, #29
 8001fe6:	08c2      	lsrs	r2, r0, #3
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	465d      	mov	r5, fp
 8001fec:	08cb      	lsrs	r3, r1, #3
 8001fee:	e6c5      	b.n	8001d7c <__aeabi_dsub+0x2f4>
 8001ff0:	464a      	mov	r2, r9
 8001ff2:	1a84      	subs	r4, r0, r2
 8001ff4:	42a0      	cmp	r0, r4
 8001ff6:	4192      	sbcs	r2, r2
 8001ff8:	1acb      	subs	r3, r1, r3
 8001ffa:	4252      	negs	r2, r2
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	4698      	mov	r8, r3
 8002000:	465d      	mov	r5, fp
 8002002:	e59e      	b.n	8001b42 <__aeabi_dsub+0xba>
 8002004:	464a      	mov	r2, r9
 8002006:	0759      	lsls	r1, r3, #29
 8002008:	08d2      	lsrs	r2, r2, #3
 800200a:	430a      	orrs	r2, r1
 800200c:	08db      	lsrs	r3, r3, #3
 800200e:	e6f9      	b.n	8001e04 <__aeabi_dsub+0x37c>
 8002010:	464a      	mov	r2, r9
 8002012:	1a14      	subs	r4, r2, r0
 8002014:	45a1      	cmp	r9, r4
 8002016:	4192      	sbcs	r2, r2
 8002018:	1a5b      	subs	r3, r3, r1
 800201a:	4252      	negs	r2, r2
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	4698      	mov	r8, r3
 8002020:	2601      	movs	r6, #1
 8002022:	e586      	b.n	8001b32 <__aeabi_dsub+0xaa>
 8002024:	464a      	mov	r2, r9
 8002026:	0759      	lsls	r1, r3, #29
 8002028:	08d2      	lsrs	r2, r2, #3
 800202a:	430a      	orrs	r2, r1
 800202c:	08db      	lsrs	r3, r3, #3
 800202e:	e6a5      	b.n	8001d7c <__aeabi_dsub+0x2f4>
 8002030:	464c      	mov	r4, r9
 8002032:	4323      	orrs	r3, r4
 8002034:	001c      	movs	r4, r3
 8002036:	1e63      	subs	r3, r4, #1
 8002038:	419c      	sbcs	r4, r3
 800203a:	e65b      	b.n	8001cf4 <__aeabi_dsub+0x26c>
 800203c:	4665      	mov	r5, ip
 800203e:	001e      	movs	r6, r3
 8002040:	3d20      	subs	r5, #32
 8002042:	40ee      	lsrs	r6, r5
 8002044:	2c20      	cmp	r4, #32
 8002046:	d005      	beq.n	8002054 <__aeabi_dsub+0x5cc>
 8002048:	2540      	movs	r5, #64	; 0x40
 800204a:	1b2d      	subs	r5, r5, r4
 800204c:	40ab      	lsls	r3, r5
 800204e:	464c      	mov	r4, r9
 8002050:	431c      	orrs	r4, r3
 8002052:	46a2      	mov	sl, r4
 8002054:	4654      	mov	r4, sl
 8002056:	1e63      	subs	r3, r4, #1
 8002058:	419c      	sbcs	r4, r3
 800205a:	4334      	orrs	r4, r6
 800205c:	e77d      	b.n	8001f5a <__aeabi_dsub+0x4d2>
 800205e:	074b      	lsls	r3, r1, #29
 8002060:	08c2      	lsrs	r2, r0, #3
 8002062:	431a      	orrs	r2, r3
 8002064:	465d      	mov	r5, fp
 8002066:	08cb      	lsrs	r3, r1, #3
 8002068:	e6cc      	b.n	8001e04 <__aeabi_dsub+0x37c>
 800206a:	000a      	movs	r2, r1
 800206c:	4302      	orrs	r2, r0
 800206e:	d100      	bne.n	8002072 <__aeabi_dsub+0x5ea>
 8002070:	e736      	b.n	8001ee0 <__aeabi_dsub+0x458>
 8002072:	074b      	lsls	r3, r1, #29
 8002074:	08c2      	lsrs	r2, r0, #3
 8002076:	431a      	orrs	r2, r3
 8002078:	465d      	mov	r5, fp
 800207a:	08cb      	lsrs	r3, r1, #3
 800207c:	e681      	b.n	8001d82 <__aeabi_dsub+0x2fa>
 800207e:	464a      	mov	r2, r9
 8002080:	1a84      	subs	r4, r0, r2
 8002082:	42a0      	cmp	r0, r4
 8002084:	4192      	sbcs	r2, r2
 8002086:	1acb      	subs	r3, r1, r3
 8002088:	4252      	negs	r2, r2
 800208a:	1a9b      	subs	r3, r3, r2
 800208c:	4698      	mov	r8, r3
 800208e:	465d      	mov	r5, fp
 8002090:	2601      	movs	r6, #1
 8002092:	e54e      	b.n	8001b32 <__aeabi_dsub+0xaa>
 8002094:	074b      	lsls	r3, r1, #29
 8002096:	08c2      	lsrs	r2, r0, #3
 8002098:	431a      	orrs	r2, r3
 800209a:	08cb      	lsrs	r3, r1, #3
 800209c:	e6b2      	b.n	8001e04 <__aeabi_dsub+0x37c>
 800209e:	464a      	mov	r2, r9
 80020a0:	1a14      	subs	r4, r2, r0
 80020a2:	45a1      	cmp	r9, r4
 80020a4:	4192      	sbcs	r2, r2
 80020a6:	1a5f      	subs	r7, r3, r1
 80020a8:	4252      	negs	r2, r2
 80020aa:	1aba      	subs	r2, r7, r2
 80020ac:	4690      	mov	r8, r2
 80020ae:	0212      	lsls	r2, r2, #8
 80020b0:	d56b      	bpl.n	800218a <__aeabi_dsub+0x702>
 80020b2:	464a      	mov	r2, r9
 80020b4:	1a84      	subs	r4, r0, r2
 80020b6:	42a0      	cmp	r0, r4
 80020b8:	4192      	sbcs	r2, r2
 80020ba:	1acb      	subs	r3, r1, r3
 80020bc:	4252      	negs	r2, r2
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	4698      	mov	r8, r3
 80020c2:	465d      	mov	r5, fp
 80020c4:	e564      	b.n	8001b90 <__aeabi_dsub+0x108>
 80020c6:	074b      	lsls	r3, r1, #29
 80020c8:	08c2      	lsrs	r2, r0, #3
 80020ca:	431a      	orrs	r2, r3
 80020cc:	465d      	mov	r5, fp
 80020ce:	08cb      	lsrs	r3, r1, #3
 80020d0:	e698      	b.n	8001e04 <__aeabi_dsub+0x37c>
 80020d2:	074b      	lsls	r3, r1, #29
 80020d4:	08c2      	lsrs	r2, r0, #3
 80020d6:	431a      	orrs	r2, r3
 80020d8:	08cb      	lsrs	r3, r1, #3
 80020da:	e64f      	b.n	8001d7c <__aeabi_dsub+0x2f4>
 80020dc:	000a      	movs	r2, r1
 80020de:	4302      	orrs	r2, r0
 80020e0:	d090      	beq.n	8002004 <__aeabi_dsub+0x57c>
 80020e2:	464a      	mov	r2, r9
 80020e4:	075c      	lsls	r4, r3, #29
 80020e6:	08d2      	lsrs	r2, r2, #3
 80020e8:	4314      	orrs	r4, r2
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	08db      	lsrs	r3, r3, #3
 80020ee:	0312      	lsls	r2, r2, #12
 80020f0:	4213      	tst	r3, r2
 80020f2:	d008      	beq.n	8002106 <__aeabi_dsub+0x67e>
 80020f4:	08ce      	lsrs	r6, r1, #3
 80020f6:	4216      	tst	r6, r2
 80020f8:	d105      	bne.n	8002106 <__aeabi_dsub+0x67e>
 80020fa:	08c0      	lsrs	r0, r0, #3
 80020fc:	0749      	lsls	r1, r1, #29
 80020fe:	4308      	orrs	r0, r1
 8002100:	0004      	movs	r4, r0
 8002102:	465d      	mov	r5, fp
 8002104:	0033      	movs	r3, r6
 8002106:	0f61      	lsrs	r1, r4, #29
 8002108:	00e2      	lsls	r2, r4, #3
 800210a:	0749      	lsls	r1, r1, #29
 800210c:	08d2      	lsrs	r2, r2, #3
 800210e:	430a      	orrs	r2, r1
 8002110:	e678      	b.n	8001e04 <__aeabi_dsub+0x37c>
 8002112:	074b      	lsls	r3, r1, #29
 8002114:	08c2      	lsrs	r2, r0, #3
 8002116:	431a      	orrs	r2, r3
 8002118:	08cb      	lsrs	r3, r1, #3
 800211a:	e632      	b.n	8001d82 <__aeabi_dsub+0x2fa>
 800211c:	4448      	add	r0, r9
 800211e:	185b      	adds	r3, r3, r1
 8002120:	4548      	cmp	r0, r9
 8002122:	4192      	sbcs	r2, r2
 8002124:	4698      	mov	r8, r3
 8002126:	4252      	negs	r2, r2
 8002128:	4490      	add	r8, r2
 800212a:	4643      	mov	r3, r8
 800212c:	0004      	movs	r4, r0
 800212e:	021b      	lsls	r3, r3, #8
 8002130:	d400      	bmi.n	8002134 <__aeabi_dsub+0x6ac>
 8002132:	e61a      	b.n	8001d6a <__aeabi_dsub+0x2e2>
 8002134:	4642      	mov	r2, r8
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <__aeabi_dsub+0x6e8>)
 8002138:	2601      	movs	r6, #1
 800213a:	401a      	ands	r2, r3
 800213c:	4690      	mov	r8, r2
 800213e:	e614      	b.n	8001d6a <__aeabi_dsub+0x2e2>
 8002140:	4666      	mov	r6, ip
 8002142:	001f      	movs	r7, r3
 8002144:	3e20      	subs	r6, #32
 8002146:	40f7      	lsrs	r7, r6
 8002148:	2c20      	cmp	r4, #32
 800214a:	d005      	beq.n	8002158 <__aeabi_dsub+0x6d0>
 800214c:	2640      	movs	r6, #64	; 0x40
 800214e:	1b36      	subs	r6, r6, r4
 8002150:	40b3      	lsls	r3, r6
 8002152:	464c      	mov	r4, r9
 8002154:	431c      	orrs	r4, r3
 8002156:	46a2      	mov	sl, r4
 8002158:	4654      	mov	r4, sl
 800215a:	1e63      	subs	r3, r4, #1
 800215c:	419c      	sbcs	r4, r3
 800215e:	433c      	orrs	r4, r7
 8002160:	e5c8      	b.n	8001cf4 <__aeabi_dsub+0x26c>
 8002162:	0011      	movs	r1, r2
 8002164:	2300      	movs	r3, #0
 8002166:	2200      	movs	r2, #0
 8002168:	e532      	b.n	8001bd0 <__aeabi_dsub+0x148>
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	000007ff 	.word	0x000007ff
 8002170:	ff7fffff 	.word	0xff7fffff
 8002174:	000007fe 	.word	0x000007fe
 8002178:	464a      	mov	r2, r9
 800217a:	1814      	adds	r4, r2, r0
 800217c:	4284      	cmp	r4, r0
 800217e:	4192      	sbcs	r2, r2
 8002180:	185b      	adds	r3, r3, r1
 8002182:	4698      	mov	r8, r3
 8002184:	4252      	negs	r2, r2
 8002186:	4490      	add	r8, r2
 8002188:	e5e9      	b.n	8001d5e <__aeabi_dsub+0x2d6>
 800218a:	4642      	mov	r2, r8
 800218c:	4322      	orrs	r2, r4
 800218e:	d100      	bne.n	8002192 <__aeabi_dsub+0x70a>
 8002190:	e6a6      	b.n	8001ee0 <__aeabi_dsub+0x458>
 8002192:	e5ea      	b.n	8001d6a <__aeabi_dsub+0x2e2>
 8002194:	074b      	lsls	r3, r1, #29
 8002196:	08c2      	lsrs	r2, r0, #3
 8002198:	431a      	orrs	r2, r3
 800219a:	08cb      	lsrs	r3, r1, #3
 800219c:	e632      	b.n	8001e04 <__aeabi_dsub+0x37c>
 800219e:	2200      	movs	r2, #0
 80021a0:	4901      	ldr	r1, [pc, #4]	; (80021a8 <__aeabi_dsub+0x720>)
 80021a2:	0013      	movs	r3, r2
 80021a4:	e514      	b.n	8001bd0 <__aeabi_dsub+0x148>
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	000007ff 	.word	0x000007ff

080021ac <__aeabi_dcmpun>:
 80021ac:	b570      	push	{r4, r5, r6, lr}
 80021ae:	0005      	movs	r5, r0
 80021b0:	480c      	ldr	r0, [pc, #48]	; (80021e4 <__aeabi_dcmpun+0x38>)
 80021b2:	030c      	lsls	r4, r1, #12
 80021b4:	0016      	movs	r6, r2
 80021b6:	0049      	lsls	r1, r1, #1
 80021b8:	031a      	lsls	r2, r3, #12
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	0b24      	lsrs	r4, r4, #12
 80021be:	0d49      	lsrs	r1, r1, #21
 80021c0:	0b12      	lsrs	r2, r2, #12
 80021c2:	0d5b      	lsrs	r3, r3, #21
 80021c4:	4281      	cmp	r1, r0
 80021c6:	d008      	beq.n	80021da <__aeabi_dcmpun+0x2e>
 80021c8:	4906      	ldr	r1, [pc, #24]	; (80021e4 <__aeabi_dcmpun+0x38>)
 80021ca:	2000      	movs	r0, #0
 80021cc:	428b      	cmp	r3, r1
 80021ce:	d103      	bne.n	80021d8 <__aeabi_dcmpun+0x2c>
 80021d0:	4332      	orrs	r2, r6
 80021d2:	0010      	movs	r0, r2
 80021d4:	1e42      	subs	r2, r0, #1
 80021d6:	4190      	sbcs	r0, r2
 80021d8:	bd70      	pop	{r4, r5, r6, pc}
 80021da:	2001      	movs	r0, #1
 80021dc:	432c      	orrs	r4, r5
 80021de:	d1fb      	bne.n	80021d8 <__aeabi_dcmpun+0x2c>
 80021e0:	e7f2      	b.n	80021c8 <__aeabi_dcmpun+0x1c>
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	000007ff 	.word	0x000007ff

080021e8 <__aeabi_d2iz>:
 80021e8:	000a      	movs	r2, r1
 80021ea:	b530      	push	{r4, r5, lr}
 80021ec:	4c13      	ldr	r4, [pc, #76]	; (800223c <__aeabi_d2iz+0x54>)
 80021ee:	0053      	lsls	r3, r2, #1
 80021f0:	0309      	lsls	r1, r1, #12
 80021f2:	0005      	movs	r5, r0
 80021f4:	0b09      	lsrs	r1, r1, #12
 80021f6:	2000      	movs	r0, #0
 80021f8:	0d5b      	lsrs	r3, r3, #21
 80021fa:	0fd2      	lsrs	r2, r2, #31
 80021fc:	42a3      	cmp	r3, r4
 80021fe:	dd04      	ble.n	800220a <__aeabi_d2iz+0x22>
 8002200:	480f      	ldr	r0, [pc, #60]	; (8002240 <__aeabi_d2iz+0x58>)
 8002202:	4283      	cmp	r3, r0
 8002204:	dd02      	ble.n	800220c <__aeabi_d2iz+0x24>
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <__aeabi_d2iz+0x5c>)
 8002208:	18d0      	adds	r0, r2, r3
 800220a:	bd30      	pop	{r4, r5, pc}
 800220c:	2080      	movs	r0, #128	; 0x80
 800220e:	0340      	lsls	r0, r0, #13
 8002210:	4301      	orrs	r1, r0
 8002212:	480d      	ldr	r0, [pc, #52]	; (8002248 <__aeabi_d2iz+0x60>)
 8002214:	1ac0      	subs	r0, r0, r3
 8002216:	281f      	cmp	r0, #31
 8002218:	dd08      	ble.n	800222c <__aeabi_d2iz+0x44>
 800221a:	480c      	ldr	r0, [pc, #48]	; (800224c <__aeabi_d2iz+0x64>)
 800221c:	1ac3      	subs	r3, r0, r3
 800221e:	40d9      	lsrs	r1, r3
 8002220:	000b      	movs	r3, r1
 8002222:	4258      	negs	r0, r3
 8002224:	2a00      	cmp	r2, #0
 8002226:	d1f0      	bne.n	800220a <__aeabi_d2iz+0x22>
 8002228:	0018      	movs	r0, r3
 800222a:	e7ee      	b.n	800220a <__aeabi_d2iz+0x22>
 800222c:	4c08      	ldr	r4, [pc, #32]	; (8002250 <__aeabi_d2iz+0x68>)
 800222e:	40c5      	lsrs	r5, r0
 8002230:	46a4      	mov	ip, r4
 8002232:	4463      	add	r3, ip
 8002234:	4099      	lsls	r1, r3
 8002236:	000b      	movs	r3, r1
 8002238:	432b      	orrs	r3, r5
 800223a:	e7f2      	b.n	8002222 <__aeabi_d2iz+0x3a>
 800223c:	000003fe 	.word	0x000003fe
 8002240:	0000041d 	.word	0x0000041d
 8002244:	7fffffff 	.word	0x7fffffff
 8002248:	00000433 	.word	0x00000433
 800224c:	00000413 	.word	0x00000413
 8002250:	fffffbed 	.word	0xfffffbed

08002254 <__aeabi_i2d>:
 8002254:	b570      	push	{r4, r5, r6, lr}
 8002256:	2800      	cmp	r0, #0
 8002258:	d016      	beq.n	8002288 <__aeabi_i2d+0x34>
 800225a:	17c3      	asrs	r3, r0, #31
 800225c:	18c5      	adds	r5, r0, r3
 800225e:	405d      	eors	r5, r3
 8002260:	0fc4      	lsrs	r4, r0, #31
 8002262:	0028      	movs	r0, r5
 8002264:	f000 f91c 	bl	80024a0 <__clzsi2>
 8002268:	4a11      	ldr	r2, [pc, #68]	; (80022b0 <__aeabi_i2d+0x5c>)
 800226a:	1a12      	subs	r2, r2, r0
 800226c:	280a      	cmp	r0, #10
 800226e:	dc16      	bgt.n	800229e <__aeabi_i2d+0x4a>
 8002270:	0003      	movs	r3, r0
 8002272:	002e      	movs	r6, r5
 8002274:	3315      	adds	r3, #21
 8002276:	409e      	lsls	r6, r3
 8002278:	230b      	movs	r3, #11
 800227a:	1a18      	subs	r0, r3, r0
 800227c:	40c5      	lsrs	r5, r0
 800227e:	0553      	lsls	r3, r2, #21
 8002280:	032d      	lsls	r5, r5, #12
 8002282:	0b2d      	lsrs	r5, r5, #12
 8002284:	0d5b      	lsrs	r3, r3, #21
 8002286:	e003      	b.n	8002290 <__aeabi_i2d+0x3c>
 8002288:	2400      	movs	r4, #0
 800228a:	2300      	movs	r3, #0
 800228c:	2500      	movs	r5, #0
 800228e:	2600      	movs	r6, #0
 8002290:	051b      	lsls	r3, r3, #20
 8002292:	432b      	orrs	r3, r5
 8002294:	07e4      	lsls	r4, r4, #31
 8002296:	4323      	orrs	r3, r4
 8002298:	0030      	movs	r0, r6
 800229a:	0019      	movs	r1, r3
 800229c:	bd70      	pop	{r4, r5, r6, pc}
 800229e:	380b      	subs	r0, #11
 80022a0:	4085      	lsls	r5, r0
 80022a2:	0553      	lsls	r3, r2, #21
 80022a4:	032d      	lsls	r5, r5, #12
 80022a6:	2600      	movs	r6, #0
 80022a8:	0b2d      	lsrs	r5, r5, #12
 80022aa:	0d5b      	lsrs	r3, r3, #21
 80022ac:	e7f0      	b.n	8002290 <__aeabi_i2d+0x3c>
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	0000041e 	.word	0x0000041e

080022b4 <__aeabi_ui2d>:
 80022b4:	b510      	push	{r4, lr}
 80022b6:	1e04      	subs	r4, r0, #0
 80022b8:	d010      	beq.n	80022dc <__aeabi_ui2d+0x28>
 80022ba:	f000 f8f1 	bl	80024a0 <__clzsi2>
 80022be:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <__aeabi_ui2d+0x48>)
 80022c0:	1a1b      	subs	r3, r3, r0
 80022c2:	280a      	cmp	r0, #10
 80022c4:	dc11      	bgt.n	80022ea <__aeabi_ui2d+0x36>
 80022c6:	220b      	movs	r2, #11
 80022c8:	0021      	movs	r1, r4
 80022ca:	1a12      	subs	r2, r2, r0
 80022cc:	40d1      	lsrs	r1, r2
 80022ce:	3015      	adds	r0, #21
 80022d0:	030a      	lsls	r2, r1, #12
 80022d2:	055b      	lsls	r3, r3, #21
 80022d4:	4084      	lsls	r4, r0
 80022d6:	0b12      	lsrs	r2, r2, #12
 80022d8:	0d5b      	lsrs	r3, r3, #21
 80022da:	e001      	b.n	80022e0 <__aeabi_ui2d+0x2c>
 80022dc:	2300      	movs	r3, #0
 80022de:	2200      	movs	r2, #0
 80022e0:	051b      	lsls	r3, r3, #20
 80022e2:	4313      	orrs	r3, r2
 80022e4:	0020      	movs	r0, r4
 80022e6:	0019      	movs	r1, r3
 80022e8:	bd10      	pop	{r4, pc}
 80022ea:	0022      	movs	r2, r4
 80022ec:	380b      	subs	r0, #11
 80022ee:	4082      	lsls	r2, r0
 80022f0:	055b      	lsls	r3, r3, #21
 80022f2:	0312      	lsls	r2, r2, #12
 80022f4:	2400      	movs	r4, #0
 80022f6:	0b12      	lsrs	r2, r2, #12
 80022f8:	0d5b      	lsrs	r3, r3, #21
 80022fa:	e7f1      	b.n	80022e0 <__aeabi_ui2d+0x2c>
 80022fc:	0000041e 	.word	0x0000041e

08002300 <__aeabi_f2d>:
 8002300:	b570      	push	{r4, r5, r6, lr}
 8002302:	0043      	lsls	r3, r0, #1
 8002304:	0246      	lsls	r6, r0, #9
 8002306:	0fc4      	lsrs	r4, r0, #31
 8002308:	20fe      	movs	r0, #254	; 0xfe
 800230a:	0e1b      	lsrs	r3, r3, #24
 800230c:	1c59      	adds	r1, r3, #1
 800230e:	0a75      	lsrs	r5, r6, #9
 8002310:	4208      	tst	r0, r1
 8002312:	d00c      	beq.n	800232e <__aeabi_f2d+0x2e>
 8002314:	22e0      	movs	r2, #224	; 0xe0
 8002316:	0092      	lsls	r2, r2, #2
 8002318:	4694      	mov	ip, r2
 800231a:	076d      	lsls	r5, r5, #29
 800231c:	0b36      	lsrs	r6, r6, #12
 800231e:	4463      	add	r3, ip
 8002320:	051b      	lsls	r3, r3, #20
 8002322:	4333      	orrs	r3, r6
 8002324:	07e4      	lsls	r4, r4, #31
 8002326:	4323      	orrs	r3, r4
 8002328:	0028      	movs	r0, r5
 800232a:	0019      	movs	r1, r3
 800232c:	bd70      	pop	{r4, r5, r6, pc}
 800232e:	2b00      	cmp	r3, #0
 8002330:	d114      	bne.n	800235c <__aeabi_f2d+0x5c>
 8002332:	2d00      	cmp	r5, #0
 8002334:	d01b      	beq.n	800236e <__aeabi_f2d+0x6e>
 8002336:	0028      	movs	r0, r5
 8002338:	f000 f8b2 	bl	80024a0 <__clzsi2>
 800233c:	280a      	cmp	r0, #10
 800233e:	dc1c      	bgt.n	800237a <__aeabi_f2d+0x7a>
 8002340:	230b      	movs	r3, #11
 8002342:	002a      	movs	r2, r5
 8002344:	1a1b      	subs	r3, r3, r0
 8002346:	40da      	lsrs	r2, r3
 8002348:	0003      	movs	r3, r0
 800234a:	3315      	adds	r3, #21
 800234c:	409d      	lsls	r5, r3
 800234e:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <__aeabi_f2d+0x88>)
 8002350:	0312      	lsls	r2, r2, #12
 8002352:	1a1b      	subs	r3, r3, r0
 8002354:	055b      	lsls	r3, r3, #21
 8002356:	0b16      	lsrs	r6, r2, #12
 8002358:	0d5b      	lsrs	r3, r3, #21
 800235a:	e7e1      	b.n	8002320 <__aeabi_f2d+0x20>
 800235c:	2d00      	cmp	r5, #0
 800235e:	d009      	beq.n	8002374 <__aeabi_f2d+0x74>
 8002360:	0b32      	lsrs	r2, r6, #12
 8002362:	2680      	movs	r6, #128	; 0x80
 8002364:	0336      	lsls	r6, r6, #12
 8002366:	4b09      	ldr	r3, [pc, #36]	; (800238c <__aeabi_f2d+0x8c>)
 8002368:	076d      	lsls	r5, r5, #29
 800236a:	4316      	orrs	r6, r2
 800236c:	e7d8      	b.n	8002320 <__aeabi_f2d+0x20>
 800236e:	2300      	movs	r3, #0
 8002370:	2600      	movs	r6, #0
 8002372:	e7d5      	b.n	8002320 <__aeabi_f2d+0x20>
 8002374:	2600      	movs	r6, #0
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <__aeabi_f2d+0x8c>)
 8002378:	e7d2      	b.n	8002320 <__aeabi_f2d+0x20>
 800237a:	0003      	movs	r3, r0
 800237c:	002a      	movs	r2, r5
 800237e:	3b0b      	subs	r3, #11
 8002380:	409a      	lsls	r2, r3
 8002382:	2500      	movs	r5, #0
 8002384:	e7e3      	b.n	800234e <__aeabi_f2d+0x4e>
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	00000389 	.word	0x00000389
 800238c:	000007ff 	.word	0x000007ff

08002390 <__aeabi_d2f>:
 8002390:	0002      	movs	r2, r0
 8002392:	004b      	lsls	r3, r1, #1
 8002394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002396:	0308      	lsls	r0, r1, #12
 8002398:	0d5b      	lsrs	r3, r3, #21
 800239a:	4e3d      	ldr	r6, [pc, #244]	; (8002490 <__aeabi_d2f+0x100>)
 800239c:	0fcc      	lsrs	r4, r1, #31
 800239e:	0a40      	lsrs	r0, r0, #9
 80023a0:	0f51      	lsrs	r1, r2, #29
 80023a2:	1c5f      	adds	r7, r3, #1
 80023a4:	4308      	orrs	r0, r1
 80023a6:	00d5      	lsls	r5, r2, #3
 80023a8:	4237      	tst	r7, r6
 80023aa:	d00a      	beq.n	80023c2 <__aeabi_d2f+0x32>
 80023ac:	4939      	ldr	r1, [pc, #228]	; (8002494 <__aeabi_d2f+0x104>)
 80023ae:	185e      	adds	r6, r3, r1
 80023b0:	2efe      	cmp	r6, #254	; 0xfe
 80023b2:	dd16      	ble.n	80023e2 <__aeabi_d2f+0x52>
 80023b4:	23ff      	movs	r3, #255	; 0xff
 80023b6:	2100      	movs	r1, #0
 80023b8:	05db      	lsls	r3, r3, #23
 80023ba:	430b      	orrs	r3, r1
 80023bc:	07e0      	lsls	r0, r4, #31
 80023be:	4318      	orrs	r0, r3
 80023c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d106      	bne.n	80023d4 <__aeabi_d2f+0x44>
 80023c6:	4328      	orrs	r0, r5
 80023c8:	d027      	beq.n	800241a <__aeabi_d2f+0x8a>
 80023ca:	2105      	movs	r1, #5
 80023cc:	0189      	lsls	r1, r1, #6
 80023ce:	0a49      	lsrs	r1, r1, #9
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	e7f1      	b.n	80023b8 <__aeabi_d2f+0x28>
 80023d4:	4305      	orrs	r5, r0
 80023d6:	d0ed      	beq.n	80023b4 <__aeabi_d2f+0x24>
 80023d8:	2180      	movs	r1, #128	; 0x80
 80023da:	03c9      	lsls	r1, r1, #15
 80023dc:	23ff      	movs	r3, #255	; 0xff
 80023de:	4301      	orrs	r1, r0
 80023e0:	e7ea      	b.n	80023b8 <__aeabi_d2f+0x28>
 80023e2:	2e00      	cmp	r6, #0
 80023e4:	dd1c      	ble.n	8002420 <__aeabi_d2f+0x90>
 80023e6:	0192      	lsls	r2, r2, #6
 80023e8:	0011      	movs	r1, r2
 80023ea:	1e4a      	subs	r2, r1, #1
 80023ec:	4191      	sbcs	r1, r2
 80023ee:	00c0      	lsls	r0, r0, #3
 80023f0:	0f6d      	lsrs	r5, r5, #29
 80023f2:	4301      	orrs	r1, r0
 80023f4:	4329      	orrs	r1, r5
 80023f6:	074b      	lsls	r3, r1, #29
 80023f8:	d048      	beq.n	800248c <__aeabi_d2f+0xfc>
 80023fa:	230f      	movs	r3, #15
 80023fc:	400b      	ands	r3, r1
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d000      	beq.n	8002404 <__aeabi_d2f+0x74>
 8002402:	3104      	adds	r1, #4
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	04db      	lsls	r3, r3, #19
 8002408:	400b      	ands	r3, r1
 800240a:	d03f      	beq.n	800248c <__aeabi_d2f+0xfc>
 800240c:	1c72      	adds	r2, r6, #1
 800240e:	2efe      	cmp	r6, #254	; 0xfe
 8002410:	d0d0      	beq.n	80023b4 <__aeabi_d2f+0x24>
 8002412:	0189      	lsls	r1, r1, #6
 8002414:	0a49      	lsrs	r1, r1, #9
 8002416:	b2d3      	uxtb	r3, r2
 8002418:	e7ce      	b.n	80023b8 <__aeabi_d2f+0x28>
 800241a:	2300      	movs	r3, #0
 800241c:	2100      	movs	r1, #0
 800241e:	e7cb      	b.n	80023b8 <__aeabi_d2f+0x28>
 8002420:	0032      	movs	r2, r6
 8002422:	3217      	adds	r2, #23
 8002424:	db22      	blt.n	800246c <__aeabi_d2f+0xdc>
 8002426:	2180      	movs	r1, #128	; 0x80
 8002428:	221e      	movs	r2, #30
 800242a:	0409      	lsls	r1, r1, #16
 800242c:	4308      	orrs	r0, r1
 800242e:	1b92      	subs	r2, r2, r6
 8002430:	2a1f      	cmp	r2, #31
 8002432:	dd1d      	ble.n	8002470 <__aeabi_d2f+0xe0>
 8002434:	2102      	movs	r1, #2
 8002436:	4249      	negs	r1, r1
 8002438:	1b8e      	subs	r6, r1, r6
 800243a:	0001      	movs	r1, r0
 800243c:	40f1      	lsrs	r1, r6
 800243e:	000e      	movs	r6, r1
 8002440:	2a20      	cmp	r2, #32
 8002442:	d004      	beq.n	800244e <__aeabi_d2f+0xbe>
 8002444:	4a14      	ldr	r2, [pc, #80]	; (8002498 <__aeabi_d2f+0x108>)
 8002446:	4694      	mov	ip, r2
 8002448:	4463      	add	r3, ip
 800244a:	4098      	lsls	r0, r3
 800244c:	4305      	orrs	r5, r0
 800244e:	0029      	movs	r1, r5
 8002450:	1e4d      	subs	r5, r1, #1
 8002452:	41a9      	sbcs	r1, r5
 8002454:	4331      	orrs	r1, r6
 8002456:	2600      	movs	r6, #0
 8002458:	074b      	lsls	r3, r1, #29
 800245a:	d1ce      	bne.n	80023fa <__aeabi_d2f+0x6a>
 800245c:	2080      	movs	r0, #128	; 0x80
 800245e:	000b      	movs	r3, r1
 8002460:	04c0      	lsls	r0, r0, #19
 8002462:	2201      	movs	r2, #1
 8002464:	4003      	ands	r3, r0
 8002466:	4201      	tst	r1, r0
 8002468:	d1d3      	bne.n	8002412 <__aeabi_d2f+0x82>
 800246a:	e7af      	b.n	80023cc <__aeabi_d2f+0x3c>
 800246c:	2300      	movs	r3, #0
 800246e:	e7ac      	b.n	80023ca <__aeabi_d2f+0x3a>
 8002470:	490a      	ldr	r1, [pc, #40]	; (800249c <__aeabi_d2f+0x10c>)
 8002472:	468c      	mov	ip, r1
 8002474:	0029      	movs	r1, r5
 8002476:	4463      	add	r3, ip
 8002478:	40d1      	lsrs	r1, r2
 800247a:	409d      	lsls	r5, r3
 800247c:	000a      	movs	r2, r1
 800247e:	0029      	movs	r1, r5
 8002480:	4098      	lsls	r0, r3
 8002482:	1e4d      	subs	r5, r1, #1
 8002484:	41a9      	sbcs	r1, r5
 8002486:	4301      	orrs	r1, r0
 8002488:	4311      	orrs	r1, r2
 800248a:	e7e4      	b.n	8002456 <__aeabi_d2f+0xc6>
 800248c:	0033      	movs	r3, r6
 800248e:	e79d      	b.n	80023cc <__aeabi_d2f+0x3c>
 8002490:	000007fe 	.word	0x000007fe
 8002494:	fffffc80 	.word	0xfffffc80
 8002498:	fffffca2 	.word	0xfffffca2
 800249c:	fffffc82 	.word	0xfffffc82

080024a0 <__clzsi2>:
 80024a0:	211c      	movs	r1, #28
 80024a2:	2301      	movs	r3, #1
 80024a4:	041b      	lsls	r3, r3, #16
 80024a6:	4298      	cmp	r0, r3
 80024a8:	d301      	bcc.n	80024ae <__clzsi2+0xe>
 80024aa:	0c00      	lsrs	r0, r0, #16
 80024ac:	3910      	subs	r1, #16
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	4298      	cmp	r0, r3
 80024b2:	d301      	bcc.n	80024b8 <__clzsi2+0x18>
 80024b4:	0a00      	lsrs	r0, r0, #8
 80024b6:	3908      	subs	r1, #8
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	4298      	cmp	r0, r3
 80024bc:	d301      	bcc.n	80024c2 <__clzsi2+0x22>
 80024be:	0900      	lsrs	r0, r0, #4
 80024c0:	3904      	subs	r1, #4
 80024c2:	a202      	add	r2, pc, #8	; (adr r2, 80024cc <__clzsi2+0x2c>)
 80024c4:	5c10      	ldrb	r0, [r2, r0]
 80024c6:	1840      	adds	r0, r0, r1
 80024c8:	4770      	bx	lr
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	02020304 	.word	0x02020304
 80024d0:	01010101 	.word	0x01010101
	...

080024dc <__clzdi2>:
 80024dc:	b510      	push	{r4, lr}
 80024de:	2900      	cmp	r1, #0
 80024e0:	d103      	bne.n	80024ea <__clzdi2+0xe>
 80024e2:	f7ff ffdd 	bl	80024a0 <__clzsi2>
 80024e6:	3020      	adds	r0, #32
 80024e8:	e002      	b.n	80024f0 <__clzdi2+0x14>
 80024ea:	1c08      	adds	r0, r1, #0
 80024ec:	f7ff ffd8 	bl	80024a0 <__clzsi2>
 80024f0:	bd10      	pop	{r4, pc}
 80024f2:	46c0      	nop			; (mov r8, r8)

080024f4 <NRF24_DelayMicroSeconds>:
//static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8002500:	4b0a      	ldr	r3, [pc, #40]	; (800252c <NRF24_DelayMicroSeconds+0x38>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	490a      	ldr	r1, [pc, #40]	; (8002530 <NRF24_DelayMicroSeconds+0x3c>)
 8002506:	0018      	movs	r0, r3
 8002508:	f7fd fe1a 	bl	8000140 <__udivsi3>
 800250c:	0003      	movs	r3, r0
 800250e:	001a      	movs	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4353      	muls	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1e5a      	subs	r2, r3, #1
 800251c:	60fa      	str	r2, [r7, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1fa      	bne.n	8002518 <NRF24_DelayMicroSeconds+0x24>
}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	46c0      	nop			; (mov r8, r8)
 8002526:	46bd      	mov	sp, r7
 8002528:	b004      	add	sp, #16
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000030 	.word	0x20000030
 8002530:	002dc6c0 	.word	0x002dc6c0

08002534 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT_CSN, nrf24_CSN_PIN, GPIO_PIN_SET);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <NRF24_csn+0x20>
 8002542:	4b0a      	ldr	r3, [pc, #40]	; (800256c <NRF24_csn+0x38>)
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <NRF24_csn+0x3c>)
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	2201      	movs	r2, #1
 800254c:	0019      	movs	r1, r3
 800254e:	f002 f8bb 	bl	80046c8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT_CSN, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8002552:	e007      	b.n	8002564 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT_CSN, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <NRF24_csn+0x38>)
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <NRF24_csn+0x3c>)
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	2200      	movs	r2, #0
 800255e:	0019      	movs	r1, r3
 8002560:	f002 f8b2 	bl	80046c8 <HAL_GPIO_WritePin>
}
 8002564:	46c0      	nop			; (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	b002      	add	sp, #8
 800256a:	bd80      	pop	{r7, pc}
 800256c:	2000023c 	.word	0x2000023c
 8002570:	20000240 	.word	0x20000240

08002574 <NRF24_ce>:

//2. Chip Enable
void NRF24_ce(int state)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT_CE, nrf24_CE_PIN, GPIO_PIN_SET);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <NRF24_ce+0x20>
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <NRF24_ce+0x38>)
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <NRF24_ce+0x3c>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	2201      	movs	r2, #1
 800258c:	0019      	movs	r1, r3
 800258e:	f002 f89b 	bl	80046c8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT_CE, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8002592:	e007      	b.n	80025a4 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT_CE, nrf24_CE_PIN, GPIO_PIN_RESET);
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <NRF24_ce+0x38>)
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <NRF24_ce+0x3c>)
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	2200      	movs	r2, #0
 800259e:	0019      	movs	r1, r3
 80025a0:	f002 f892 	bl	80046c8 <HAL_GPIO_WritePin>
}
 80025a4:	46c0      	nop			; (mov r8, r8)
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b002      	add	sp, #8
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000238 	.word	0x20000238
 80025b0:	20000242 	.word	0x20000242

080025b4 <NRF24_read_register>:

//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80025b4:	b5b0      	push	{r4, r5, r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	0002      	movs	r2, r0
 80025bc:	1dfb      	adds	r3, r7, #7
 80025be:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80025c0:	2000      	movs	r0, #0
 80025c2:	f7ff ffb7 	bl	8002534 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80025c6:	1dfb      	adds	r3, r7, #7
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	221f      	movs	r2, #31
 80025cc:	4013      	ands	r3, r2
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	240c      	movs	r4, #12
 80025d2:	193b      	adds	r3, r7, r4
 80025d4:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80025d6:	1939      	adds	r1, r7, r4
 80025d8:	480e      	ldr	r0, [pc, #56]	; (8002614 <NRF24_read_register+0x60>)
 80025da:	2364      	movs	r3, #100	; 0x64
 80025dc:	2201      	movs	r2, #1
 80025de:	f003 fe63 	bl	80062a8 <HAL_SPI_Transmit>
	HAL_Delay(20);
 80025e2:	2014      	movs	r0, #20
 80025e4:	f001 fc56 	bl	8003e94 <HAL_Delay>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80025e8:	193b      	adds	r3, r7, r4
 80025ea:	1c59      	adds	r1, r3, #1
 80025ec:	4809      	ldr	r0, [pc, #36]	; (8002614 <NRF24_read_register+0x60>)
 80025ee:	2364      	movs	r3, #100	; 0x64
 80025f0:	2201      	movs	r2, #1
 80025f2:	f003 ffaf 	bl	8006554 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80025f6:	250f      	movs	r5, #15
 80025f8:	197b      	adds	r3, r7, r5
 80025fa:	193a      	adds	r2, r7, r4
 80025fc:	7852      	ldrb	r2, [r2, #1]
 80025fe:	701a      	strb	r2, [r3, #0]
	//Bring CSN high
	NRF24_csn(1);
 8002600:	2001      	movs	r0, #1
 8002602:	f7ff ff97 	bl	8002534 <NRF24_csn>
	return retData;
 8002606:	197b      	adds	r3, r7, r5
 8002608:	781b      	ldrb	r3, [r3, #0]
}
 800260a:	0018      	movs	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	b004      	add	sp, #16
 8002610:	bdb0      	pop	{r4, r5, r7, pc}
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	20000244 	.word	0x20000244

08002618 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6039      	str	r1, [r7, #0]
 8002620:	0011      	movs	r1, r2
 8002622:	1dfb      	adds	r3, r7, #7
 8002624:	1c02      	adds	r2, r0, #0
 8002626:	701a      	strb	r2, [r3, #0]
 8002628:	1dbb      	adds	r3, r7, #6
 800262a:	1c0a      	adds	r2, r1, #0
 800262c:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800262e:	2000      	movs	r0, #0
 8002630:	f7ff ff80 	bl	8002534 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8002634:	1dfb      	adds	r3, r7, #7
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	221f      	movs	r2, #31
 800263a:	4013      	ands	r3, r2
 800263c:	b2da      	uxtb	r2, r3
 800263e:	210c      	movs	r1, #12
 8002640:	187b      	adds	r3, r7, r1
 8002642:	701a      	strb	r2, [r3, #0]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8002644:	1879      	adds	r1, r7, r1
 8002646:	480a      	ldr	r0, [pc, #40]	; (8002670 <NRF24_read_registerN+0x58>)
 8002648:	2364      	movs	r3, #100	; 0x64
 800264a:	2201      	movs	r2, #1
 800264c:	f003 fe2c 	bl	80062a8 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8002650:	1dbb      	adds	r3, r7, #6
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	b29a      	uxth	r2, r3
 8002656:	6839      	ldr	r1, [r7, #0]
 8002658:	4805      	ldr	r0, [pc, #20]	; (8002670 <NRF24_read_registerN+0x58>)
 800265a:	2364      	movs	r3, #100	; 0x64
 800265c:	f003 ff7a 	bl	8006554 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8002660:	2001      	movs	r0, #1
 8002662:	f7ff ff67 	bl	8002534 <NRF24_csn>
}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	46bd      	mov	sp, r7
 800266a:	b004      	add	sp, #16
 800266c:	bd80      	pop	{r7, pc}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	20000244 	.word	0x20000244

08002674 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	0002      	movs	r2, r0
 800267c:	1dfb      	adds	r3, r7, #7
 800267e:	701a      	strb	r2, [r3, #0]
 8002680:	1dbb      	adds	r3, r7, #6
 8002682:	1c0a      	adds	r2, r1, #0
 8002684:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8002686:	2000      	movs	r0, #0
 8002688:	f7ff ff54 	bl	8002534 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800268c:	1dfb      	adds	r3, r7, #7
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2220      	movs	r2, #32
 8002692:	4313      	orrs	r3, r2
 8002694:	b2da      	uxtb	r2, r3
 8002696:	210c      	movs	r1, #12
 8002698:	187b      	adds	r3, r7, r1
 800269a:	701a      	strb	r2, [r3, #0]
	spiBuf[1] = value;
 800269c:	187b      	adds	r3, r7, r1
 800269e:	1dba      	adds	r2, r7, #6
 80026a0:	7812      	ldrb	r2, [r2, #0]
 80026a2:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80026a4:	1879      	adds	r1, r7, r1
 80026a6:	4806      	ldr	r0, [pc, #24]	; (80026c0 <NRF24_write_register+0x4c>)
 80026a8:	2364      	movs	r3, #100	; 0x64
 80026aa:	2202      	movs	r2, #2
 80026ac:	f003 fdfc 	bl	80062a8 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80026b0:	2001      	movs	r0, #1
 80026b2:	f7ff ff3f 	bl	8002534 <NRF24_csn>
}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b004      	add	sp, #16
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	20000244 	.word	0x20000244

080026c4 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6039      	str	r1, [r7, #0]
 80026cc:	0011      	movs	r1, r2
 80026ce:	1dfb      	adds	r3, r7, #7
 80026d0:	1c02      	adds	r2, r0, #0
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	1dbb      	adds	r3, r7, #6
 80026d6:	1c0a      	adds	r2, r1, #0
 80026d8:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80026da:	2000      	movs	r0, #0
 80026dc:	f7ff ff2a 	bl	8002534 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80026e0:	1dfb      	adds	r3, r7, #7
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2220      	movs	r2, #32
 80026e6:	4313      	orrs	r3, r2
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	210c      	movs	r1, #12
 80026ec:	187b      	adds	r3, r7, r1
 80026ee:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80026f0:	1879      	adds	r1, r7, r1
 80026f2:	480a      	ldr	r0, [pc, #40]	; (800271c <NRF24_write_registerN+0x58>)
 80026f4:	2364      	movs	r3, #100	; 0x64
 80026f6:	2201      	movs	r2, #1
 80026f8:	f003 fdd6 	bl	80062a8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80026fc:	1dbb      	adds	r3, r7, #6
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	b29a      	uxth	r2, r3
 8002702:	6839      	ldr	r1, [r7, #0]
 8002704:	4805      	ldr	r0, [pc, #20]	; (800271c <NRF24_write_registerN+0x58>)
 8002706:	2364      	movs	r3, #100	; 0x64
 8002708:	f003 fdce 	bl	80062a8 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800270c:	2001      	movs	r0, #1
 800270e:	f7ff ff11 	bl	8002534 <NRF24_csn>
}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	46bd      	mov	sp, r7
 8002716:	b004      	add	sp, #16
 8002718:	bd80      	pop	{r7, pc}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	20000244 	.word	0x20000244

08002720 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	000a      	movs	r2, r1
 800272a:	1cfb      	adds	r3, r7, #3
 800272c:	701a      	strb	r2, [r3, #0]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 800272e:	2000      	movs	r0, #0
 8002730:	f7ff ff00 	bl	8002534 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8002734:	210f      	movs	r1, #15
 8002736:	187b      	adds	r3, r7, r1
 8002738:	22a0      	movs	r2, #160	; 0xa0
 800273a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 800273c:	1879      	adds	r1, r7, r1
 800273e:	480a      	ldr	r0, [pc, #40]	; (8002768 <NRF24_write_payload+0x48>)
 8002740:	2364      	movs	r3, #100	; 0x64
 8002742:	2201      	movs	r2, #1
 8002744:	f003 fdb0 	bl	80062a8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8002748:	1cfb      	adds	r3, r7, #3
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	b29a      	uxth	r2, r3
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4805      	ldr	r0, [pc, #20]	; (8002768 <NRF24_write_payload+0x48>)
 8002752:	2364      	movs	r3, #100	; 0x64
 8002754:	f003 fda8 	bl	80062a8 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8002758:	2001      	movs	r0, #1
 800275a:	f7ff feeb 	bl	8002534 <NRF24_csn>
}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	46bd      	mov	sp, r7
 8002762:	b004      	add	sp, #16
 8002764:	bd80      	pop	{r7, pc}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	20000244 	.word	0x20000244

0800276c <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	000a      	movs	r2, r1
 8002776:	1cfb      	adds	r3, r7, #3
 8002778:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 800277a:	f000 fa59 	bl	8002c30 <NRF24_getPayloadSize>
 800277e:	0003      	movs	r3, r0
 8002780:	001a      	movs	r2, r3
 8002782:	1cfb      	adds	r3, r7, #3
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	4293      	cmp	r3, r2
 8002788:	d304      	bcc.n	8002794 <NRF24_read_payload+0x28>
 800278a:	f000 fa51 	bl	8002c30 <NRF24_getPayloadSize>
 800278e:	0003      	movs	r3, r0
 8002790:	001a      	movs	r2, r3
 8002792:	e001      	b.n	8002798 <NRF24_read_payload+0x2c>
 8002794:	1cfb      	adds	r3, r7, #3
 8002796:	781a      	ldrb	r2, [r3, #0]
 8002798:	240f      	movs	r4, #15
 800279a:	193b      	adds	r3, r7, r4
 800279c:	701a      	strb	r2, [r3, #0]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800279e:	2000      	movs	r0, #0
 80027a0:	f7ff fec8 	bl	8002534 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80027a4:	210e      	movs	r1, #14
 80027a6:	187b      	adds	r3, r7, r1
 80027a8:	2261      	movs	r2, #97	; 0x61
 80027aa:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80027ac:	1879      	adds	r1, r7, r1
 80027ae:	480a      	ldr	r0, [pc, #40]	; (80027d8 <NRF24_read_payload+0x6c>)
 80027b0:	2364      	movs	r3, #100	; 0x64
 80027b2:	2201      	movs	r2, #1
 80027b4:	f003 fd78 	bl	80062a8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80027b8:	193b      	adds	r3, r7, r4
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	b29a      	uxth	r2, r3
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4805      	ldr	r0, [pc, #20]	; (80027d8 <NRF24_read_payload+0x6c>)
 80027c2:	2364      	movs	r3, #100	; 0x64
 80027c4:	f003 fec6 	bl	8006554 <HAL_SPI_Receive>
	NRF24_csn(1);
 80027c8:	2001      	movs	r0, #1
 80027ca:	f7ff feb3 	bl	8002534 <NRF24_csn>
}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b005      	add	sp, #20
 80027d4:	bd90      	pop	{r4, r7, pc}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	20000244 	.word	0x20000244

080027dc <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80027e0:	21ff      	movs	r1, #255	; 0xff
 80027e2:	20e1      	movs	r0, #225	; 0xe1
 80027e4:	f7ff ff46 	bl	8002674 <NRF24_write_register>
}
 80027e8:	46c0      	nop			; (mov r8, r8)
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80027f2:	21ff      	movs	r1, #255	; 0xff
 80027f4:	20e2      	movs	r0, #226	; 0xe2
 80027f6:	f7ff ff3d 	bl	8002674 <NRF24_write_register>
}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8002800:	b590      	push	{r4, r7, lr}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8002806:	1dfc      	adds	r4, r7, #7
 8002808:	2007      	movs	r0, #7
 800280a:	f7ff fed3 	bl	80025b4 <NRF24_read_register>
 800280e:	0003      	movs	r3, r0
 8002810:	7023      	strb	r3, [r4, #0]
	return statReg;
 8002812:	1dfb      	adds	r3, r7, #7
 8002814:	781b      	ldrb	r3, [r3, #0]
}
 8002816:	0018      	movs	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	b003      	add	sp, #12
 800281c:	bd90      	pop	{r4, r7, pc}
	...

08002820 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT_CE,GPIO_TypeDef *nrf24PORT_CSN, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	0019      	movs	r1, r3
 800282c:	1dbb      	adds	r3, r7, #6
 800282e:	801a      	strh	r2, [r3, #0]
 8002830:	1d3b      	adds	r3, r7, #4
 8002832:	1c0a      	adds	r2, r1, #0
 8002834:	801a      	strh	r2, [r3, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8002836:	4a71      	ldr	r2, [pc, #452]	; (80029fc <NRF24_begin+0x1dc>)
 8002838:	2320      	movs	r3, #32
 800283a:	2108      	movs	r1, #8
 800283c:	468c      	mov	ip, r1
 800283e:	44bc      	add	ip, r7
 8002840:	4463      	add	r3, ip
 8002842:	0010      	movs	r0, r2
 8002844:	0019      	movs	r1, r3
 8002846:	2358      	movs	r3, #88	; 0x58
 8002848:	001a      	movs	r2, r3
 800284a:	f004 facd 	bl	8006de8 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT_CE = nrf24PORT_CE;
 800284e:	4b6c      	ldr	r3, [pc, #432]	; (8002a00 <NRF24_begin+0x1e0>)
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	601a      	str	r2, [r3, #0]
	nrf24_PORT_CSN = nrf24PORT_CSN;
 8002854:	4b6b      	ldr	r3, [pc, #428]	; (8002a04 <NRF24_begin+0x1e4>)
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	601a      	str	r2, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800285a:	4b6b      	ldr	r3, [pc, #428]	; (8002a08 <NRF24_begin+0x1e8>)
 800285c:	1dba      	adds	r2, r7, #6
 800285e:	8812      	ldrh	r2, [r2, #0]
 8002860:	801a      	strh	r2, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8002862:	4b6a      	ldr	r3, [pc, #424]	; (8002a0c <NRF24_begin+0x1ec>)
 8002864:	1d3a      	adds	r2, r7, #4
 8002866:	8812      	ldrh	r2, [r2, #0]
 8002868:	801a      	strh	r2, [r3, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 800286a:	2001      	movs	r0, #1
 800286c:	f7ff fe62 	bl	8002534 <NRF24_csn>
	NRF24_ce(0);
 8002870:	2000      	movs	r0, #0
 8002872:	f7ff fe7f 	bl	8002574 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8002876:	2005      	movs	r0, #5
 8002878:	f001 fb0c 	bl	8003e94 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 800287c:	2108      	movs	r1, #8
 800287e:	2000      	movs	r0, #0
 8002880:	f7ff fef8 	bl	8002674 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8002884:	213f      	movs	r1, #63	; 0x3f
 8002886:	2001      	movs	r0, #1
 8002888:	f7ff fef4 	bl	8002674 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 800288c:	2103      	movs	r1, #3
 800288e:	2002      	movs	r0, #2
 8002890:	f7ff fef0 	bl	8002674 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8002894:	2103      	movs	r1, #3
 8002896:	2003      	movs	r0, #3
 8002898:	f7ff feec 	bl	8002674 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 800289c:	2103      	movs	r1, #3
 800289e:	2004      	movs	r0, #4
 80028a0:	f7ff fee8 	bl	8002674 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80028a4:	2102      	movs	r1, #2
 80028a6:	2005      	movs	r0, #5
 80028a8:	f7ff fee4 	bl	8002674 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80028ac:	210f      	movs	r1, #15
 80028ae:	2006      	movs	r0, #6
 80028b0:	f7ff fee0 	bl	8002674 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80028b4:	210e      	movs	r1, #14
 80028b6:	2007      	movs	r0, #7
 80028b8:	f7ff fedc 	bl	8002674 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80028bc:	2100      	movs	r1, #0
 80028be:	2008      	movs	r0, #8
 80028c0:	f7ff fed8 	bl	8002674 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80028c4:	2100      	movs	r1, #0
 80028c6:	2009      	movs	r0, #9
 80028c8:	f7ff fed4 	bl	8002674 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80028cc:	2110      	movs	r1, #16
 80028ce:	187b      	adds	r3, r7, r1
 80028d0:	22e7      	movs	r2, #231	; 0xe7
 80028d2:	711a      	strb	r2, [r3, #4]
 80028d4:	187b      	adds	r3, r7, r1
 80028d6:	22e7      	movs	r2, #231	; 0xe7
 80028d8:	70da      	strb	r2, [r3, #3]
 80028da:	187b      	adds	r3, r7, r1
 80028dc:	22e7      	movs	r2, #231	; 0xe7
 80028de:	709a      	strb	r2, [r3, #2]
 80028e0:	187b      	adds	r3, r7, r1
 80028e2:	22e7      	movs	r2, #231	; 0xe7
 80028e4:	705a      	strb	r2, [r3, #1]
 80028e6:	187b      	adds	r3, r7, r1
 80028e8:	22e7      	movs	r2, #231	; 0xe7
 80028ea:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80028ec:	000c      	movs	r4, r1
 80028ee:	187b      	adds	r3, r7, r1
 80028f0:	2205      	movs	r2, #5
 80028f2:	0019      	movs	r1, r3
 80028f4:	200a      	movs	r0, #10
 80028f6:	f7ff fee5 	bl	80026c4 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80028fa:	0021      	movs	r1, r4
 80028fc:	187b      	adds	r3, r7, r1
 80028fe:	22c2      	movs	r2, #194	; 0xc2
 8002900:	711a      	strb	r2, [r3, #4]
 8002902:	187b      	adds	r3, r7, r1
 8002904:	22c2      	movs	r2, #194	; 0xc2
 8002906:	70da      	strb	r2, [r3, #3]
 8002908:	187b      	adds	r3, r7, r1
 800290a:	22c2      	movs	r2, #194	; 0xc2
 800290c:	709a      	strb	r2, [r3, #2]
 800290e:	187b      	adds	r3, r7, r1
 8002910:	22c2      	movs	r2, #194	; 0xc2
 8002912:	705a      	strb	r2, [r3, #1]
 8002914:	187b      	adds	r3, r7, r1
 8002916:	22c2      	movs	r2, #194	; 0xc2
 8002918:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800291a:	000c      	movs	r4, r1
 800291c:	187b      	adds	r3, r7, r1
 800291e:	2205      	movs	r2, #5
 8002920:	0019      	movs	r1, r3
 8002922:	200b      	movs	r0, #11
 8002924:	f7ff fece 	bl	80026c4 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8002928:	21c3      	movs	r1, #195	; 0xc3
 800292a:	200c      	movs	r0, #12
 800292c:	f7ff fea2 	bl	8002674 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8002930:	21c4      	movs	r1, #196	; 0xc4
 8002932:	200d      	movs	r0, #13
 8002934:	f7ff fe9e 	bl	8002674 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8002938:	21c5      	movs	r1, #197	; 0xc5
 800293a:	200e      	movs	r0, #14
 800293c:	f7ff fe9a 	bl	8002674 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8002940:	21c6      	movs	r1, #198	; 0xc6
 8002942:	200f      	movs	r0, #15
 8002944:	f7ff fe96 	bl	8002674 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8002948:	0021      	movs	r1, r4
 800294a:	187b      	adds	r3, r7, r1
 800294c:	22e7      	movs	r2, #231	; 0xe7
 800294e:	711a      	strb	r2, [r3, #4]
 8002950:	187b      	adds	r3, r7, r1
 8002952:	22e7      	movs	r2, #231	; 0xe7
 8002954:	70da      	strb	r2, [r3, #3]
 8002956:	187b      	adds	r3, r7, r1
 8002958:	22e7      	movs	r2, #231	; 0xe7
 800295a:	709a      	strb	r2, [r3, #2]
 800295c:	187b      	adds	r3, r7, r1
 800295e:	22e7      	movs	r2, #231	; 0xe7
 8002960:	705a      	strb	r2, [r3, #1]
 8002962:	187b      	adds	r3, r7, r1
 8002964:	22e7      	movs	r2, #231	; 0xe7
 8002966:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8002968:	187b      	adds	r3, r7, r1
 800296a:	2205      	movs	r2, #5
 800296c:	0019      	movs	r1, r3
 800296e:	2010      	movs	r0, #16
 8002970:	f7ff fea8 	bl	80026c4 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8002974:	2100      	movs	r1, #0
 8002976:	2011      	movs	r0, #17
 8002978:	f7ff fe7c 	bl	8002674 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800297c:	2100      	movs	r1, #0
 800297e:	2012      	movs	r0, #18
 8002980:	f7ff fe78 	bl	8002674 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8002984:	2100      	movs	r1, #0
 8002986:	2013      	movs	r0, #19
 8002988:	f7ff fe74 	bl	8002674 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800298c:	2100      	movs	r1, #0
 800298e:	2014      	movs	r0, #20
 8002990:	f7ff fe70 	bl	8002674 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8002994:	2100      	movs	r1, #0
 8002996:	2015      	movs	r0, #21
 8002998:	f7ff fe6c 	bl	8002674 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800299c:	2100      	movs	r1, #0
 800299e:	2016      	movs	r0, #22
 80029a0:	f7ff fe68 	bl	8002674 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 80029a4:	f000 fb5a 	bl	800305c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80029a8:	2100      	movs	r1, #0
 80029aa:	201c      	movs	r0, #28
 80029ac:	f7ff fe62 	bl	8002674 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80029b0:	2100      	movs	r1, #0
 80029b2:	201d      	movs	r0, #29
 80029b4:	f7ff fe5e 	bl	8002674 <NRF24_write_register>
	
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80029b8:	210f      	movs	r1, #15
 80029ba:	200f      	movs	r0, #15
 80029bc:	f000 f8e2 	bl	8002b84 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80029c0:	2003      	movs	r0, #3
 80029c2:	f000 f9ac 	bl	8002d1e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80029c6:	2001      	movs	r0, #1
 80029c8:	f000 f9fa 	bl	8002dc0 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80029cc:	2002      	movs	r0, #2
 80029ce:	f000 fa53 	bl	8002e78 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80029d2:	f000 f971 	bl	8002cb8 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80029d6:	2020      	movs	r0, #32
 80029d8:	f000 f90e 	bl	8002bf8 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80029dc:	f000 fb35 	bl	800304a <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80029e0:	204c      	movs	r0, #76	; 0x4c
 80029e2:	f000 f8ed 	bl	8002bc0 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80029e6:	f7ff fef9 	bl	80027dc <NRF24_flush_tx>
	NRF24_flush_rx();
 80029ea:	f7ff ff00 	bl	80027ee <NRF24_flush_rx>
	
	NRF24_powerDown();
 80029ee:	f000 fa7b 	bl	8002ee8 <NRF24_powerDown>
	
}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b007      	add	sp, #28
 80029f8:	bd90      	pop	{r4, r7, pc}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	20000244 	.word	0x20000244
 8002a00:	20000238 	.word	0x20000238
 8002a04:	2000023c 	.word	0x2000023c
 8002a08:	20000240 	.word	0x20000240
 8002a0c:	20000242 	.word	0x20000242

08002a10 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7ff fdad 	bl	8002574 <NRF24_ce>
	NRF24_flush_tx();
 8002a1a:	f7ff fedf 	bl	80027dc <NRF24_flush_tx>
	NRF24_flush_rx();
 8002a1e:	f7ff fee6 	bl	80027ee <NRF24_flush_rx>
}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8002a28:	b5b0      	push	{r4, r5, r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	000a      	movs	r2, r1
 8002a32:	1cfb      	adds	r3, r7, #3
 8002a34:	701a      	strb	r2, [r3, #0]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8002a36:	f000 fb08 	bl	800304a <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8002a3a:	1cfb      	adds	r3, r7, #3
 8002a3c:	781a      	ldrb	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	0011      	movs	r1, r2
 8002a42:	0018      	movs	r0, r3
 8002a44:	f000 fa9b 	bl	8002f7e <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8002a48:	f001 fa1a 	bl	8003e80 <HAL_GetTick>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	617b      	str	r3, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8002a50:	230a      	movs	r3, #10
 8002a52:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8002a54:	230d      	movs	r3, #13
 8002a56:	18fb      	adds	r3, r7, r3
 8002a58:	2201      	movs	r2, #1
 8002a5a:	0019      	movs	r1, r3
 8002a5c:	2008      	movs	r0, #8
 8002a5e:	f7ff fddb 	bl	8002618 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8002a62:	250f      	movs	r5, #15
 8002a64:	197c      	adds	r4, r7, r5
 8002a66:	f7ff fecb 	bl	8002800 <NRF24_get_status>
 8002a6a:	0003      	movs	r3, r0
 8002a6c:	7023      	strb	r3, [r4, #0]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8002a6e:	197b      	adds	r3, r7, r5
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2230      	movs	r2, #48	; 0x30
 8002a74:	4013      	ands	r3, r2
 8002a76:	d107      	bne.n	8002a88 <NRF24_write+0x60>
 8002a78:	f001 fa02 	bl	8003e80 <HAL_GetTick>
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d8e5      	bhi.n	8002a54 <NRF24_write+0x2c>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8002a88:	4a10      	ldr	r2, [pc, #64]	; (8002acc <NRF24_write+0xa4>)
 8002a8a:	230b      	movs	r3, #11
 8002a8c:	18f9      	adds	r1, r7, r3
 8002a8e:	240c      	movs	r4, #12
 8002a90:	193b      	adds	r3, r7, r4
 8002a92:	0018      	movs	r0, r3
 8002a94:	f000 faa6 	bl	8002fe4 <NRF24_whatHappened>
	retStatus = tx_ok;
 8002a98:	230e      	movs	r3, #14
 8002a9a:	18fb      	adds	r3, r7, r3
 8002a9c:	193a      	adds	r2, r7, r4
 8002a9e:	7812      	ldrb	r2, [r2, #0]
 8002aa0:	701a      	strb	r2, [r3, #0]
	if ( ack_payload_available )
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <NRF24_write+0xa4>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d005      	beq.n	8002ab6 <NRF24_write+0x8e>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8002aaa:	f000 f8cb 	bl	8002c44 <NRF24_getDynamicPayloadSize>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	001a      	movs	r2, r3
 8002ab2:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <NRF24_write+0xa8>)
 8002ab4:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8002ab6:	f000 f80d 	bl	8002ad4 <NRF24_available>
	NRF24_flush_tx();
 8002aba:	f7ff fe8f 	bl	80027dc <NRF24_flush_tx>
	return retStatus;
 8002abe:	230e      	movs	r3, #14
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	781b      	ldrb	r3, [r3, #0]
}
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b006      	add	sp, #24
 8002aca:	bdb0      	pop	{r4, r5, r7, pc}
 8002acc:	20000230 	.word	0x20000230
 8002ad0:	20000231 	.word	0x20000231

08002ad4 <NRF24_available>:

//16. Check for available data to read
bool NRF24_available(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f000 fa17 	bl	8002f0c <NRF24_availablePipe>
 8002ade:	0003      	movs	r3, r0
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <NRF24_read>:

//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8002ae6:	b590      	push	{r4, r7, lr}
 8002ae8:	b085      	sub	sp, #20
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	000a      	movs	r2, r1
 8002af0:	1cfb      	adds	r3, r7, #3
 8002af2:	701a      	strb	r2, [r3, #0]
	NRF24_read_payload( buf, len );
 8002af4:	1cfb      	adds	r3, r7, #3
 8002af6:	781a      	ldrb	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	0011      	movs	r1, r2
 8002afc:	0018      	movs	r0, r3
 8002afe:	f7ff fe35 	bl	800276c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8002b02:	2017      	movs	r0, #23
 8002b04:	f7ff fd56 	bl	80025b4 <NRF24_read_register>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	240f      	movs	r4, #15
 8002b0e:	193b      	adds	r3, r7, r4
 8002b10:	2201      	movs	r2, #1
 8002b12:	400a      	ands	r2, r1
 8002b14:	701a      	strb	r2, [r3, #0]
	NRF24_flush_rx();
 8002b16:	f7ff fe6a 	bl	80027ee <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8002b1a:	f000 f893 	bl	8002c44 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8002b1e:	193b      	adds	r3, r7, r4
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	1e5a      	subs	r2, r3, #1
 8002b24:	4193      	sbcs	r3, r2
 8002b26:	b2db      	uxtb	r3, r3
}
 8002b28:	0018      	movs	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b005      	add	sp, #20
 8002b2e:	bd90      	pop	{r4, r7, pc}

08002b30 <NRF24_openWritingPipe>:

//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6038      	str	r0, [r7, #0]
 8002b38:	6079      	str	r1, [r7, #4]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8002b3a:	003b      	movs	r3, r7
 8002b3c:	2205      	movs	r2, #5
 8002b3e:	0019      	movs	r1, r3
 8002b40:	200a      	movs	r0, #10
 8002b42:	f7ff fdbf 	bl	80026c4 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8002b46:	003b      	movs	r3, r7
 8002b48:	2205      	movs	r2, #5
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	2010      	movs	r0, #16
 8002b4e:	f7ff fdb9 	bl	80026c4 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8002b52:	210f      	movs	r1, #15
 8002b54:	187b      	adds	r3, r7, r1
 8002b56:	2220      	movs	r2, #32
 8002b58:	701a      	strb	r2, [r3, #0]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <NRF24_openWritingPipe+0x50>)
 8002b5c:	781a      	ldrb	r2, [r3, #0]
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	1c10      	adds	r0, r2, #0
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	b2d9      	uxtb	r1, r3
 8002b66:	b2c2      	uxtb	r2, r0
 8002b68:	4291      	cmp	r1, r2
 8002b6a:	d900      	bls.n	8002b6e <NRF24_openWritingPipe+0x3e>
 8002b6c:	1c03      	adds	r3, r0, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	0019      	movs	r1, r3
 8002b72:	2011      	movs	r0, #17
 8002b74:	f7ff fd7e 	bl	8002674 <NRF24_write_register>
}
 8002b78:	46c0      	nop			; (mov r8, r8)
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b004      	add	sp, #16
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000232 	.word	0x20000232

08002b84 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	0002      	movs	r2, r0
 8002b8c:	1dfb      	adds	r3, r7, #7
 8002b8e:	701a      	strb	r2, [r3, #0]
 8002b90:	1dbb      	adds	r3, r7, #6
 8002b92:	1c0a      	adds	r2, r1, #0
 8002b94:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8002b96:	1dfb      	adds	r3, r7, #7
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	b25a      	sxtb	r2, r3
 8002b9e:	1dbb      	adds	r3, r7, #6
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	b25b      	sxtb	r3, r3
 8002ba4:	210f      	movs	r1, #15
 8002ba6:	400b      	ands	r3, r1
 8002ba8:	b25b      	sxtb	r3, r3
 8002baa:	4313      	orrs	r3, r2
 8002bac:	b25b      	sxtb	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	2004      	movs	r0, #4
 8002bb4:	f7ff fd5e 	bl	8002674 <NRF24_write_register>
}
 8002bb8:	46c0      	nop			; (mov r8, r8)
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b002      	add	sp, #8
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	0002      	movs	r2, r0
 8002bc8:	1dfb      	adds	r3, r7, #7
 8002bca:	701a      	strb	r2, [r3, #0]
	const uint8_t max_channel = 127;
 8002bcc:	210f      	movs	r1, #15
 8002bce:	187b      	adds	r3, r7, r1
 8002bd0:	227f      	movs	r2, #127	; 0x7f
 8002bd2:	701a      	strb	r2, [r3, #0]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8002bd4:	187b      	adds	r3, r7, r1
 8002bd6:	1dfa      	adds	r2, r7, #7
 8002bd8:	7810      	ldrb	r0, [r2, #0]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	b2d9      	uxtb	r1, r3
 8002bde:	b2c2      	uxtb	r2, r0
 8002be0:	4291      	cmp	r1, r2
 8002be2:	d900      	bls.n	8002be6 <NRF24_setChannel+0x26>
 8002be4:	1c03      	adds	r3, r0, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	0019      	movs	r1, r3
 8002bea:	2005      	movs	r0, #5
 8002bec:	f7ff fd42 	bl	8002674 <NRF24_write_register>
}
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b004      	add	sp, #16
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	0002      	movs	r2, r0
 8002c00:	1dfb      	adds	r3, r7, #7
 8002c02:	701a      	strb	r2, [r3, #0]
	const uint8_t max_payload_size = 32;
 8002c04:	210f      	movs	r1, #15
 8002c06:	187b      	adds	r3, r7, r1
 8002c08:	2220      	movs	r2, #32
 8002c0a:	701a      	strb	r2, [r3, #0]
  payload_size = MIN(size,max_payload_size);
 8002c0c:	187b      	adds	r3, r7, r1
 8002c0e:	1dfa      	adds	r2, r7, #7
 8002c10:	7810      	ldrb	r0, [r2, #0]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	b2d9      	uxtb	r1, r3
 8002c16:	b2c2      	uxtb	r2, r0
 8002c18:	4291      	cmp	r1, r2
 8002c1a:	d900      	bls.n	8002c1e <NRF24_setPayloadSize+0x26>
 8002c1c:	1c03      	adds	r3, r0, #0
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	4b02      	ldr	r3, [pc, #8]	; (8002c2c <NRF24_setPayloadSize+0x34>)
 8002c22:	701a      	strb	r2, [r3, #0]
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b004      	add	sp, #16
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20000232 	.word	0x20000232

08002c30 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
	return payload_size;
 8002c34:	4b02      	ldr	r3, [pc, #8]	; (8002c40 <NRF24_getPayloadSize+0x10>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
}
 8002c38:	0018      	movs	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	20000232 	.word	0x20000232

08002c44 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8002c48:	2060      	movs	r0, #96	; 0x60
 8002c4a:	f7ff fcb3 	bl	80025b4 <NRF24_read_register>
 8002c4e:	0003      	movs	r3, r0
}
 8002c50:	0018      	movs	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8002c5a:	201d      	movs	r0, #29
 8002c5c:	f7ff fcaa 	bl	80025b4 <NRF24_read_register>
 8002c60:	0003      	movs	r3, r0
 8002c62:	001a      	movs	r2, r3
 8002c64:	2306      	movs	r3, #6
 8002c66:	4313      	orrs	r3, r2
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	0019      	movs	r1, r3
 8002c6c:	201d      	movs	r0, #29
 8002c6e:	f7ff fd01 	bl	8002674 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8002c72:	201d      	movs	r0, #29
 8002c74:	f7ff fc9e 	bl	80025b4 <NRF24_read_register>
 8002c78:	1e03      	subs	r3, r0, #0
 8002c7a:	d10d      	bne.n	8002c98 <NRF24_enableAckPayload+0x42>
	{
		NRF24_ACTIVATE_cmd();
 8002c7c:	f000 f9ee 	bl	800305c <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8002c80:	201d      	movs	r0, #29
 8002c82:	f7ff fc97 	bl	80025b4 <NRF24_read_register>
 8002c86:	0003      	movs	r3, r0
 8002c88:	001a      	movs	r2, r3
 8002c8a:	2306      	movs	r3, #6
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	0019      	movs	r1, r3
 8002c92:	201d      	movs	r0, #29
 8002c94:	f7ff fcee 	bl	8002674 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8002c98:	201c      	movs	r0, #28
 8002c9a:	f7ff fc8b 	bl	80025b4 <NRF24_read_register>
 8002c9e:	0003      	movs	r3, r0
 8002ca0:	001a      	movs	r2, r3
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	0019      	movs	r1, r3
 8002caa:	201c      	movs	r0, #28
 8002cac:	f7ff fce2 	bl	8002674 <NRF24_write_register>
}
 8002cb0:	46c0      	nop			; (mov r8, r8)
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8002cbc:	201d      	movs	r0, #29
 8002cbe:	f7ff fc79 	bl	80025b4 <NRF24_read_register>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	001a      	movs	r2, r3
 8002cc6:	2304      	movs	r3, #4
 8002cc8:	439a      	bics	r2, r3
 8002cca:	0013      	movs	r3, r2
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	0019      	movs	r1, r3
 8002cd0:	201d      	movs	r0, #29
 8002cd2:	f7ff fccf 	bl	8002674 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	201c      	movs	r0, #28
 8002cda:	f7ff fccb 	bl	8002674 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8002cde:	4b03      	ldr	r3, [pc, #12]	; (8002cec <NRF24_disableDynamicPayloads+0x34>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
}
 8002ce4:	46c0      	nop			; (mov r8, r8)
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	20000233 	.word	0x20000233

08002cf0 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	0002      	movs	r2, r0
 8002cf8:	1dfb      	adds	r3, r7, #7
 8002cfa:	701a      	strb	r2, [r3, #0]
	if ( enable )
 8002cfc:	1dfb      	adds	r3, r7, #7
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d004      	beq.n	8002d0e <NRF24_setAutoAck+0x1e>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8002d04:	213f      	movs	r1, #63	; 0x3f
 8002d06:	2001      	movs	r0, #1
 8002d08:	f7ff fcb4 	bl	8002674 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8002d0c:	e003      	b.n	8002d16 <NRF24_setAutoAck+0x26>
    NRF24_write_register(REG_EN_AA, 0x00);
 8002d0e:	2100      	movs	r1, #0
 8002d10:	2001      	movs	r0, #1
 8002d12:	f7ff fcaf 	bl	8002674 <NRF24_write_register>
}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b002      	add	sp, #8
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8002d1e:	b5b0      	push	{r4, r5, r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	0002      	movs	r2, r0
 8002d26:	1dfb      	adds	r3, r7, #7
 8002d28:	701a      	strb	r2, [r3, #0]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8002d2a:	250f      	movs	r5, #15
 8002d2c:	197c      	adds	r4, r7, r5
 8002d2e:	2006      	movs	r0, #6
 8002d30:	f7ff fc40 	bl	80025b4 <NRF24_read_register>
 8002d34:	0003      	movs	r3, r0
 8002d36:	7023      	strb	r3, [r4, #0]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002d38:	0028      	movs	r0, r5
 8002d3a:	183b      	adds	r3, r7, r0
 8002d3c:	183a      	adds	r2, r7, r0
 8002d3e:	7812      	ldrb	r2, [r2, #0]
 8002d40:	2106      	movs	r1, #6
 8002d42:	438a      	bics	r2, r1
 8002d44:	701a      	strb	r2, [r3, #0]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8002d46:	1dfb      	adds	r3, r7, #7
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d106      	bne.n	8002d5c <NRF24_setPALevel+0x3e>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002d4e:	183b      	adds	r3, r7, r0
 8002d50:	183a      	adds	r2, r7, r0
 8002d52:	7812      	ldrb	r2, [r2, #0]
 8002d54:	2106      	movs	r1, #6
 8002d56:	430a      	orrs	r2, r1
 8002d58:	701a      	strb	r2, [r3, #0]
 8002d5a:	e026      	b.n	8002daa <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m6dB )
 8002d5c:	1dfb      	adds	r3, r7, #7
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d107      	bne.n	8002d74 <NRF24_setPALevel+0x56>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8002d64:	220f      	movs	r2, #15
 8002d66:	18bb      	adds	r3, r7, r2
 8002d68:	18ba      	adds	r2, r7, r2
 8002d6a:	7812      	ldrb	r2, [r2, #0]
 8002d6c:	2104      	movs	r1, #4
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	e01a      	b.n	8002daa <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m12dB )
 8002d74:	1dfb      	adds	r3, r7, #7
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d107      	bne.n	8002d8c <NRF24_setPALevel+0x6e>
  {
    setup |= _BV(RF_PWR_LOW);
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	18bb      	adds	r3, r7, r2
 8002d80:	18ba      	adds	r2, r7, r2
 8002d82:	7812      	ldrb	r2, [r2, #0]
 8002d84:	2102      	movs	r1, #2
 8002d86:	430a      	orrs	r2, r1
 8002d88:	701a      	strb	r2, [r3, #0]
 8002d8a:	e00e      	b.n	8002daa <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m18dB )
 8002d8c:	1dfb      	adds	r3, r7, #7
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <NRF24_setPALevel+0x8c>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8002d94:	1dfb      	adds	r3, r7, #7
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d106      	bne.n	8002daa <NRF24_setPALevel+0x8c>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002d9c:	220f      	movs	r2, #15
 8002d9e:	18bb      	adds	r3, r7, r2
 8002da0:	18ba      	adds	r2, r7, r2
 8002da2:	7812      	ldrb	r2, [r2, #0]
 8002da4:	2106      	movs	r1, #6
 8002da6:	430a      	orrs	r2, r1
 8002da8:	701a      	strb	r2, [r3, #0]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8002daa:	230f      	movs	r3, #15
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	0019      	movs	r1, r3
 8002db2:	2006      	movs	r0, #6
 8002db4:	f7ff fc5e 	bl	8002674 <NRF24_write_register>
}
 8002db8:	46c0      	nop			; (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b004      	add	sp, #16
 8002dbe:	bdb0      	pop	{r4, r5, r7, pc}

08002dc0 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8002dc0:	b5b0      	push	{r4, r5, r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	0002      	movs	r2, r0
 8002dc8:	1dfb      	adds	r3, r7, #7
 8002dca:	701a      	strb	r2, [r3, #0]
	bool result = false;
 8002dcc:	230f      	movs	r3, #15
 8002dce:	18fb      	adds	r3, r7, r3
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8002dd4:	250e      	movs	r5, #14
 8002dd6:	197c      	adds	r4, r7, r5
 8002dd8:	2006      	movs	r0, #6
 8002dda:	f7ff fbeb 	bl	80025b4 <NRF24_read_register>
 8002dde:	0003      	movs	r3, r0
 8002de0:	7023      	strb	r3, [r4, #0]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8002de2:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <NRF24_setDataRate+0xb4>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8002de8:	0028      	movs	r0, r5
 8002dea:	183b      	adds	r3, r7, r0
 8002dec:	183a      	adds	r2, r7, r0
 8002dee:	7812      	ldrb	r2, [r2, #0]
 8002df0:	2128      	movs	r1, #40	; 0x28
 8002df2:	438a      	bics	r2, r1
 8002df4:	701a      	strb	r2, [r3, #0]
  if( speed == RF24_250KBPS )
 8002df6:	1dfb      	adds	r3, r7, #7
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d109      	bne.n	8002e12 <NRF24_setDataRate+0x52>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8002dfe:	4b1d      	ldr	r3, [pc, #116]	; (8002e74 <NRF24_setDataRate+0xb4>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8002e04:	183b      	adds	r3, r7, r0
 8002e06:	183a      	adds	r2, r7, r0
 8002e08:	7812      	ldrb	r2, [r2, #0]
 8002e0a:	2120      	movs	r1, #32
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	e011      	b.n	8002e36 <NRF24_setDataRate+0x76>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8002e12:	1dfb      	adds	r3, r7, #7
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d10a      	bne.n	8002e30 <NRF24_setDataRate+0x70>
    {
      wide_band = true ;
 8002e1a:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <NRF24_setDataRate+0xb4>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8002e20:	220e      	movs	r2, #14
 8002e22:	18bb      	adds	r3, r7, r2
 8002e24:	18ba      	adds	r2, r7, r2
 8002e26:	7812      	ldrb	r2, [r2, #0]
 8002e28:	2108      	movs	r1, #8
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	701a      	strb	r2, [r3, #0]
 8002e2e:	e002      	b.n	8002e36 <NRF24_setDataRate+0x76>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8002e30:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <NRF24_setDataRate+0xb4>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8002e36:	240e      	movs	r4, #14
 8002e38:	193b      	adds	r3, r7, r4
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	2006      	movs	r0, #6
 8002e40:	f7ff fc18 	bl	8002674 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8002e44:	2006      	movs	r0, #6
 8002e46:	f7ff fbb5 	bl	80025b4 <NRF24_read_register>
 8002e4a:	0003      	movs	r3, r0
 8002e4c:	001a      	movs	r2, r3
 8002e4e:	193b      	adds	r3, r7, r4
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d104      	bne.n	8002e60 <NRF24_setDataRate+0xa0>
  {
    result = true;
 8002e56:	230f      	movs	r3, #15
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	e002      	b.n	8002e66 <NRF24_setDataRate+0xa6>
  }
  else
  {
    wide_band = false;
 8002e60:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <NRF24_setDataRate+0xb4>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8002e66:	230f      	movs	r3, #15
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	781b      	ldrb	r3, [r3, #0]
}
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b004      	add	sp, #16
 8002e72:	bdb0      	pop	{r4, r5, r7, pc}
 8002e74:	20000234 	.word	0x20000234

08002e78 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	0002      	movs	r2, r0
 8002e80:	1dfb      	adds	r3, r7, #7
 8002e82:	701a      	strb	r2, [r3, #0]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8002e84:	2000      	movs	r0, #0
 8002e86:	f7ff fb95 	bl	80025b4 <NRF24_read_register>
 8002e8a:	0003      	movs	r3, r0
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	200f      	movs	r0, #15
 8002e90:	183b      	adds	r3, r7, r0
 8002e92:	220c      	movs	r2, #12
 8002e94:	4391      	bics	r1, r2
 8002e96:	000a      	movs	r2, r1
 8002e98:	701a      	strb	r2, [r3, #0]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8002e9a:	1dfb      	adds	r3, r7, #7
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d017      	beq.n	8002ed2 <NRF24_setCRCLength+0x5a>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8002ea2:	1dfb      	adds	r3, r7, #7
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d106      	bne.n	8002eb8 <NRF24_setCRCLength+0x40>
  {
    config |= _BV(BIT_EN_CRC);
 8002eaa:	183b      	adds	r3, r7, r0
 8002eac:	183a      	adds	r2, r7, r0
 8002eae:	7812      	ldrb	r2, [r2, #0]
 8002eb0:	2108      	movs	r1, #8
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	e00c      	b.n	8002ed2 <NRF24_setCRCLength+0x5a>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8002eb8:	200f      	movs	r0, #15
 8002eba:	183b      	adds	r3, r7, r0
 8002ebc:	183a      	adds	r2, r7, r0
 8002ebe:	7812      	ldrb	r2, [r2, #0]
 8002ec0:	2108      	movs	r1, #8
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	701a      	strb	r2, [r3, #0]
    config |= _BV( BIT_CRCO );
 8002ec6:	183b      	adds	r3, r7, r0
 8002ec8:	183a      	adds	r2, r7, r0
 8002eca:	7812      	ldrb	r2, [r2, #0]
 8002ecc:	2104      	movs	r1, #4
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	701a      	strb	r2, [r3, #0]
  }
  NRF24_write_register( REG_CONFIG, config );
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	0019      	movs	r1, r3
 8002eda:	2000      	movs	r0, #0
 8002edc:	f7ff fbca 	bl	8002674 <NRF24_write_register>
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b004      	add	sp, #16
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8002eec:	2000      	movs	r0, #0
 8002eee:	f7ff fb61 	bl	80025b4 <NRF24_read_register>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	001a      	movs	r2, r3
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	439a      	bics	r2, r3
 8002efa:	0013      	movs	r3, r2
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	0019      	movs	r1, r3
 8002f00:	2000      	movs	r0, #0
 8002f02:	f7ff fbb7 	bl	8002674 <NRF24_write_register>
}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8002f0c:	b5b0      	push	{r4, r5, r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8002f14:	250f      	movs	r5, #15
 8002f16:	197c      	adds	r4, r7, r5
 8002f18:	f7ff fc72 	bl	8002800 <NRF24_get_status>
 8002f1c:	0003      	movs	r3, r0
 8002f1e:	7023      	strb	r3, [r4, #0]

  bool result = ( status & _BV(BIT_RX_DR) );
 8002f20:	0028      	movs	r0, r5
 8002f22:	183b      	adds	r3, r7, r0
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2240      	movs	r2, #64	; 0x40
 8002f28:	401a      	ands	r2, r3
 8002f2a:	240e      	movs	r4, #14
 8002f2c:	193b      	adds	r3, r7, r4
 8002f2e:	1e51      	subs	r1, r2, #1
 8002f30:	418a      	sbcs	r2, r1
 8002f32:	701a      	strb	r2, [r3, #0]

  if (result)
 8002f34:	193b      	adds	r3, r7, r4
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d019      	beq.n	8002f70 <NRF24_availablePipe+0x64>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d008      	beq.n	8002f54 <NRF24_availablePipe+0x48>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8002f42:	183b      	adds	r3, r7, r0
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	085b      	lsrs	r3, r3, #1
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2207      	movs	r2, #7
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8002f54:	2140      	movs	r1, #64	; 0x40
 8002f56:	2007      	movs	r0, #7
 8002f58:	f7ff fb8c 	bl	8002674 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8002f5c:	230f      	movs	r3, #15
 8002f5e:	18fb      	adds	r3, r7, r3
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2220      	movs	r2, #32
 8002f64:	4013      	ands	r3, r2
 8002f66:	d003      	beq.n	8002f70 <NRF24_availablePipe+0x64>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8002f68:	2120      	movs	r1, #32
 8002f6a:	2007      	movs	r0, #7
 8002f6c:	f7ff fb82 	bl	8002674 <NRF24_write_register>
    }
  }
  return result;
 8002f70:	230e      	movs	r3, #14
 8002f72:	18fb      	adds	r3, r7, r3
 8002f74:	781b      	ldrb	r3, [r3, #0]
}
 8002f76:	0018      	movs	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	b004      	add	sp, #16
 8002f7c:	bdb0      	pop	{r4, r5, r7, pc}

08002f7e <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	000a      	movs	r2, r1
 8002f88:	1cfb      	adds	r3, r7, #3
 8002f8a:	701a      	strb	r2, [r3, #0]
  // Transmitter power-up
  NRF24_ce(0);
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	f7ff faf1 	bl	8002574 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8002f92:	2000      	movs	r0, #0
 8002f94:	f7ff fb0e 	bl	80025b4 <NRF24_read_register>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	001a      	movs	r2, r3
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	4393      	bics	r3, r2
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	0019      	movs	r1, r3
 8002faa:	2000      	movs	r0, #0
 8002fac:	f7ff fb62 	bl	8002674 <NRF24_write_register>
  NRF24_ce(1);
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	f7ff fadf 	bl	8002574 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8002fb6:	2096      	movs	r0, #150	; 0x96
 8002fb8:	f7ff fa9c 	bl	80024f4 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8002fbc:	1cfb      	adds	r3, r7, #3
 8002fbe:	781a      	ldrb	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	0011      	movs	r1, r2
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f7ff fbab 	bl	8002720 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f7ff fad2 	bl	8002574 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8002fd0:	200f      	movs	r0, #15
 8002fd2:	f7ff fa8f 	bl	80024f4 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	f7ff facc 	bl	8002574 <NRF24_ce>
}
 8002fdc:	46c0      	nop			; (mov r8, r8)
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b002      	add	sp, #8
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8002fe4:	b5b0      	push	{r4, r5, r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8002ff0:	2517      	movs	r5, #23
 8002ff2:	197c      	adds	r4, r7, r5
 8002ff4:	f7ff fc04 	bl	8002800 <NRF24_get_status>
 8002ff8:	0003      	movs	r3, r0
 8002ffa:	7023      	strb	r3, [r4, #0]
	*tx_ok = 0;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8003002:	2170      	movs	r1, #112	; 0x70
 8003004:	2007      	movs	r0, #7
 8003006:	f7ff fb35 	bl	8002674 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 800300a:	0029      	movs	r1, r5
 800300c:	187b      	adds	r3, r7, r1
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2220      	movs	r2, #32
 8003012:	4013      	ands	r3, r2
 8003014:	1e5a      	subs	r2, r3, #1
 8003016:	4193      	sbcs	r3, r2
 8003018:	b2da      	uxtb	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 800301e:	187b      	adds	r3, r7, r1
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2210      	movs	r2, #16
 8003024:	4013      	ands	r3, r2
 8003026:	1e5a      	subs	r2, r3, #1
 8003028:	4193      	sbcs	r3, r2
 800302a:	b2da      	uxtb	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8003030:	187b      	adds	r3, r7, r1
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2240      	movs	r2, #64	; 0x40
 8003036:	4013      	ands	r3, r2
 8003038:	1e5a      	subs	r2, r3, #1
 800303a:	4193      	sbcs	r3, r2
 800303c:	b2da      	uxtb	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	701a      	strb	r2, [r3, #0]
}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	46bd      	mov	sp, r7
 8003046:	b006      	add	sp, #24
 8003048:	bdb0      	pop	{r4, r5, r7, pc}

0800304a <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800304e:	2170      	movs	r1, #112	; 0x70
 8003050:	2007      	movs	r0, #7
 8003052:	f7ff fb0f 	bl	8002674 <NRF24_write_register>
}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8003062:	2000      	movs	r0, #0
 8003064:	f7ff fa66 	bl	8002534 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8003068:	1d3b      	adds	r3, r7, #4
 800306a:	2250      	movs	r2, #80	; 0x50
 800306c:	701a      	strb	r2, [r3, #0]
	cmdRxBuf[1] = 0x73;
 800306e:	1d3b      	adds	r3, r7, #4
 8003070:	2273      	movs	r2, #115	; 0x73
 8003072:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8003074:	1d39      	adds	r1, r7, #4
 8003076:	4806      	ldr	r0, [pc, #24]	; (8003090 <NRF24_ACTIVATE_cmd+0x34>)
 8003078:	2364      	movs	r3, #100	; 0x64
 800307a:	2202      	movs	r2, #2
 800307c:	f003 f914 	bl	80062a8 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8003080:	2001      	movs	r0, #1
 8003082:	f7ff fa57 	bl	8002534 <NRF24_csn>
}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	46bd      	mov	sp, r7
 800308a:	b002      	add	sp, #8
 800308c:	bd80      	pop	{r7, pc}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	20000244 	.word	0x20000244

08003094 <Heart_Power_On>:
 * @param void
 *
 * @return void
 */
void Heart_Power_On() 
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
	*
	*	 GPIO_PIN_7 is RESET pin
	* 	 GPIO_PIN_6 is MFIO pin	
	*/

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET); //reset pin
 8003098:	4b0f      	ldr	r3, [pc, #60]	; (80030d8 <Heart_Power_On+0x44>)
 800309a:	2200      	movs	r2, #0
 800309c:	2180      	movs	r1, #128	; 0x80
 800309e:	0018      	movs	r0, r3
 80030a0:	f001 fb12 	bl	80046c8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80030a4:	2005      	movs	r0, #5
 80030a6:	f000 fef5 	bl	8003e94 <HAL_Delay>
	
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET); //MFIO pin
 80030aa:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <Heart_Power_On+0x44>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	2140      	movs	r1, #64	; 0x40
 80030b0:	0018      	movs	r0, r3
 80030b2:	f001 fb09 	bl	80046c8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80030b6:	2005      	movs	r0, #5
 80030b8:	f000 feec 	bl	8003e94 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET); //reset pin
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <Heart_Power_On+0x44>)
 80030be:	2201      	movs	r2, #1
 80030c0:	2180      	movs	r1, #128	; 0x80
 80030c2:	0018      	movs	r0, r3
 80030c4:	f001 fb00 	bl	80046c8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80030c8:	23fa      	movs	r3, #250	; 0xfa
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	0018      	movs	r0, r3
 80030ce:	f000 fee1 	bl	8003e94 <HAL_Delay>

}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	50000400 	.word	0x50000400

080030dc <Heart_Init>:
 * @param void
 *
 * @return void
 */
void Heart_Init() 
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af02      	add	r7, sp, #8

	// Command to get version number
	HAL_I2C_Master_Transmit(&hi2c1, Heart_Addr, version_cmd, 2, 50);
 80030e2:	4a5f      	ldr	r2, [pc, #380]	; (8003260 <Heart_Init+0x184>)
 80030e4:	485f      	ldr	r0, [pc, #380]	; (8003264 <Heart_Init+0x188>)
 80030e6:	2332      	movs	r3, #50	; 0x32
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	2302      	movs	r3, #2
 80030ec:	21aa      	movs	r1, #170	; 0xaa
 80030ee:	f001 fbb9 	bl	8004864 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80030f2:	2001      	movs	r0, #1
 80030f4:	f000 fece 	bl	8003e94 <HAL_Delay>
	// Receiving the version number
	HAL_I2C_Master_Receive(&hi2c1, Heart_Addr | 0x01, rcv1, 5, 50);
 80030f8:	4a5b      	ldr	r2, [pc, #364]	; (8003268 <Heart_Init+0x18c>)
 80030fa:	485a      	ldr	r0, [pc, #360]	; (8003264 <Heart_Init+0x188>)
 80030fc:	2332      	movs	r3, #50	; 0x32
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	2305      	movs	r3, #5
 8003102:	21ab      	movs	r1, #171	; 0xab
 8003104:	f001 fcb6 	bl	8004a74 <HAL_I2C_Master_Receive>
	HAL_Delay(1);
 8003108:	2001      	movs	r0, #1
 800310a:	f000 fec3 	bl	8003e94 <HAL_Delay>

	// Command to for the module to exit the bootloader mode
	HAL_I2C_Master_Transmit(&hi2c1, Heart_Addr, exit_bootloader_cmd, 3, 50);
 800310e:	4a57      	ldr	r2, [pc, #348]	; (800326c <Heart_Init+0x190>)
 8003110:	4854      	ldr	r0, [pc, #336]	; (8003264 <Heart_Init+0x188>)
 8003112:	2332      	movs	r3, #50	; 0x32
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	2303      	movs	r3, #3
 8003118:	21aa      	movs	r1, #170	; 0xaa
 800311a:	f001 fba3 	bl	8004864 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800311e:	2001      	movs	r0, #1
 8003120:	f000 feb8 	bl	8003e94 <HAL_Delay>
	// Receiving the success response
	HAL_I2C_Master_Receive(&hi2c1, Heart_Addr | 0x01, &rcv, 1, 50);
 8003124:	4a52      	ldr	r2, [pc, #328]	; (8003270 <Heart_Init+0x194>)
 8003126:	484f      	ldr	r0, [pc, #316]	; (8003264 <Heart_Init+0x188>)
 8003128:	2332      	movs	r3, #50	; 0x32
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	2301      	movs	r3, #1
 800312e:	21ab      	movs	r1, #171	; 0xab
 8003130:	f001 fca0 	bl	8004a74 <HAL_I2C_Master_Receive>
	HAL_Delay(1);
 8003134:	2001      	movs	r0, #1
 8003136:	f000 fead 	bl	8003e94 <HAL_Delay>

	// Command to check the device mode
	HAL_I2C_Master_Transmit(&hi2c1, Heart_Addr, device_mode_cmd, 2, 50); // read device mode
 800313a:	4a4e      	ldr	r2, [pc, #312]	; (8003274 <Heart_Init+0x198>)
 800313c:	4849      	ldr	r0, [pc, #292]	; (8003264 <Heart_Init+0x188>)
 800313e:	2332      	movs	r3, #50	; 0x32
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	2302      	movs	r3, #2
 8003144:	21aa      	movs	r1, #170	; 0xaa
 8003146:	f001 fb8d 	bl	8004864 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800314a:	2001      	movs	r0, #1
 800314c:	f000 fea2 	bl	8003e94 <HAL_Delay>
	/* Response that shows device mode;
	 * 0x00: application mode
	 * 0x02: reset
	 * 0x08 Bootloader mode
	 */
	HAL_I2C_Master_Receive(&hi2c1, Heart_Addr | 0x01, &buf1[0], 1, 50);
 8003150:	4a49      	ldr	r2, [pc, #292]	; (8003278 <Heart_Init+0x19c>)
 8003152:	4844      	ldr	r0, [pc, #272]	; (8003264 <Heart_Init+0x188>)
 8003154:	2332      	movs	r3, #50	; 0x32
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	2301      	movs	r3, #1
 800315a:	21ab      	movs	r1, #171	; 0xab
 800315c:	f001 fc8a 	bl	8004a74 <HAL_I2C_Master_Receive>
	HAL_Delay(1);
 8003160:	2001      	movs	r0, #1
 8003162:	f000 fe97 	bl	8003e94 <HAL_Delay>


	//Re-using the same variable and initialising it to some random value, So we can check for a response of 0
	rcv = 0x02;
 8003166:	4b42      	ldr	r3, [pc, #264]	; (8003270 <Heart_Init+0x194>)
 8003168:	2202      	movs	r2, #2
 800316a:	701a      	strb	r2, [r3, #0]

	// Set the data mode; Set the threshold for the FIFO interrupt bit/pin
	HAL_I2C_Master_Transmit(&hi2c1, Heart_Addr, set_output_mode, 3, 50);
 800316c:	4a43      	ldr	r2, [pc, #268]	; (800327c <Heart_Init+0x1a0>)
 800316e:	483d      	ldr	r0, [pc, #244]	; (8003264 <Heart_Init+0x188>)
 8003170:	2332      	movs	r3, #50	; 0x32
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	2303      	movs	r3, #3
 8003176:	21aa      	movs	r1, #170	; 0xaa
 8003178:	f001 fb74 	bl	8004864 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800317c:	2001      	movs	r0, #1
 800317e:	f000 fe89 	bl	8003e94 <HAL_Delay>
	// Success response
	HAL_I2C_Master_Receive(&hi2c1, Heart_Addr | 0x01, &rcv, 1, 50);
 8003182:	4a3b      	ldr	r2, [pc, #236]	; (8003270 <Heart_Init+0x194>)
 8003184:	4837      	ldr	r0, [pc, #220]	; (8003264 <Heart_Init+0x188>)
 8003186:	2332      	movs	r3, #50	; 0x32
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	2301      	movs	r3, #1
 800318c:	21ab      	movs	r1, #171	; 0xab
 800318e:	f001 fc71 	bl	8004a74 <HAL_I2C_Master_Receive>
	HAL_Delay(1);
 8003192:	2001      	movs	r0, #1
 8003194:	f000 fe7e 	bl	8003e94 <HAL_Delay>

	//Re-using the same variable and initialising it to some random value, So we can check for a response of 0
	rcv = 0x02;
 8003198:	4b35      	ldr	r3, [pc, #212]	; (8003270 <Heart_Init+0x194>)
 800319a:	2202      	movs	r2, #2
 800319c:	701a      	strb	r2, [r3, #0]

	// Set the data mode; Set the threshold for the FIFO interrupt bit/pin
	HAL_I2C_Master_Transmit(&hi2c1, Heart_Addr, set_data_mode_cmd, 3, 50);
 800319e:	4a38      	ldr	r2, [pc, #224]	; (8003280 <Heart_Init+0x1a4>)
 80031a0:	4830      	ldr	r0, [pc, #192]	; (8003264 <Heart_Init+0x188>)
 80031a2:	2332      	movs	r3, #50	; 0x32
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	2303      	movs	r3, #3
 80031a8:	21aa      	movs	r1, #170	; 0xaa
 80031aa:	f001 fb5b 	bl	8004864 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80031ae:	2001      	movs	r0, #1
 80031b0:	f000 fe70 	bl	8003e94 <HAL_Delay>
	// Success response
	HAL_I2C_Master_Receive(&hi2c1, Heart_Addr | 0x01, &rcv, 1, 50);
 80031b4:	4a2e      	ldr	r2, [pc, #184]	; (8003270 <Heart_Init+0x194>)
 80031b6:	482b      	ldr	r0, [pc, #172]	; (8003264 <Heart_Init+0x188>)
 80031b8:	2332      	movs	r3, #50	; 0x32
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	2301      	movs	r3, #1
 80031be:	21ab      	movs	r1, #171	; 0xab
 80031c0:	f001 fc58 	bl	8004a74 <HAL_I2C_Master_Receive>
	HAL_Delay(1);
 80031c4:	2001      	movs	r0, #1
 80031c6:	f000 fe65 	bl	8003e94 <HAL_Delay>
	

	//Re-using the same variable and initialising it to some random value, So we can check for a response of 0
	rcv = 0x03;
 80031ca:	4b29      	ldr	r3, [pc, #164]	; (8003270 <Heart_Init+0x194>)
 80031cc:	2203      	movs	r2, #3
 80031ce:	701a      	strb	r2, [r3, #0]
	
	// Command to enable the sensor module
	HAL_I2C_Master_Transmit(&hi2c1, Heart_Addr, enable_sensor_cmd, 3, 50); //enable sensor
 80031d0:	4a2c      	ldr	r2, [pc, #176]	; (8003284 <Heart_Init+0x1a8>)
 80031d2:	4824      	ldr	r0, [pc, #144]	; (8003264 <Heart_Init+0x188>)
 80031d4:	2332      	movs	r3, #50	; 0x32
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	2303      	movs	r3, #3
 80031da:	21aa      	movs	r1, #170	; 0xaa
 80031dc:	f001 fb42 	bl	8004864 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80031e0:	2001      	movs	r0, #1
 80031e2:	f000 fe57 	bl	8003e94 <HAL_Delay>
	/// Success response
	HAL_I2C_Master_Receive(&hi2c1, Heart_Addr | 0x01, &rcv, 1, 50);
 80031e6:	4a22      	ldr	r2, [pc, #136]	; (8003270 <Heart_Init+0x194>)
 80031e8:	481e      	ldr	r0, [pc, #120]	; (8003264 <Heart_Init+0x188>)
 80031ea:	2332      	movs	r3, #50	; 0x32
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	2301      	movs	r3, #1
 80031f0:	21ab      	movs	r1, #171	; 0xab
 80031f2:	f001 fc3f 	bl	8004a74 <HAL_I2C_Master_Receive>
	HAL_Delay(1);
 80031f6:	2001      	movs	r0, #1
 80031f8:	f000 fe4c 	bl	8003e94 <HAL_Delay>

	//Re-using the same variable and initialising it to some random value, So we can check for a response of 0
	rcv = 0x04;
 80031fc:	4b1c      	ldr	r3, [pc, #112]	; (8003270 <Heart_Init+0x194>)
 80031fe:	2204      	movs	r2, #4
 8003200:	701a      	strb	r2, [r3, #0]

	// Enable the WHRM, MaximFast algorithm
	HAL_I2C_Master_Transmit(&hi2c1, Heart_Addr, whrm_enable, 3, 50); //wrist enable
 8003202:	4a21      	ldr	r2, [pc, #132]	; (8003288 <Heart_Init+0x1ac>)
 8003204:	4817      	ldr	r0, [pc, #92]	; (8003264 <Heart_Init+0x188>)
 8003206:	2332      	movs	r3, #50	; 0x32
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	2303      	movs	r3, #3
 800320c:	21aa      	movs	r1, #170	; 0xaa
 800320e:	f001 fb29 	bl	8004864 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8003212:	2001      	movs	r0, #1
 8003214:	f000 fe3e 	bl	8003e94 <HAL_Delay>
	// Sucess response
	HAL_I2C_Master_Receive(&hi2c1, Heart_Addr | 0x01, &rcv, 1, 50);
 8003218:	4a15      	ldr	r2, [pc, #84]	; (8003270 <Heart_Init+0x194>)
 800321a:	4812      	ldr	r0, [pc, #72]	; (8003264 <Heart_Init+0x188>)
 800321c:	2332      	movs	r3, #50	; 0x32
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2301      	movs	r3, #1
 8003222:	21ab      	movs	r1, #171	; 0xab
 8003224:	f001 fc26 	bl	8004a74 <HAL_I2C_Master_Receive>
	HAL_Delay(1);
 8003228:	2001      	movs	r0, #1
 800322a:	f000 fe33 	bl	8003e94 <HAL_Delay>

	// command to read the sensor hub status
	HAL_I2C_Master_Transmit(&hi2c1, Heart_Addr, read_status, 2, 50);
 800322e:	4a17      	ldr	r2, [pc, #92]	; (800328c <Heart_Init+0x1b0>)
 8003230:	480c      	ldr	r0, [pc, #48]	; (8003264 <Heart_Init+0x188>)
 8003232:	2332      	movs	r3, #50	; 0x32
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	2302      	movs	r3, #2
 8003238:	21aa      	movs	r1, #170	; 0xaa
 800323a:	f001 fb13 	bl	8004864 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800323e:	2001      	movs	r0, #1
 8003240:	f000 fe28 	bl	8003e94 <HAL_Delay>
	// 1 byte response
	HAL_I2C_Master_Receive(&hi2c1, Heart_Addr | 0x01, rcv2, 3, 50);
 8003244:	4a12      	ldr	r2, [pc, #72]	; (8003290 <Heart_Init+0x1b4>)
 8003246:	4807      	ldr	r0, [pc, #28]	; (8003264 <Heart_Init+0x188>)
 8003248:	2332      	movs	r3, #50	; 0x32
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	2303      	movs	r3, #3
 800324e:	21ab      	movs	r1, #171	; 0xab
 8003250:	f001 fc10 	bl	8004a74 <HAL_I2C_Master_Receive>
	HAL_Delay(1);
 8003254:	2001      	movs	r0, #1
 8003256:	f000 fe1d 	bl	8003e94 <HAL_Delay>
}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000000 	.word	0x20000000
 8003264:	2000034c 	.word	0x2000034c
 8003268:	200002a4 	.word	0x200002a4
 800326c:	20000004 	.word	0x20000004
 8003270:	20000023 	.word	0x20000023
 8003274:	20000008 	.word	0x20000008
 8003278:	20000024 	.word	0x20000024
 800327c:	20000020 	.word	0x20000020
 8003280:	2000000c 	.word	0x2000000c
 8003284:	20000014 	.word	0x20000014
 8003288:	20000018 	.word	0x20000018
 800328c:	200002a0 	.word	0x200002a0
 8003290:	200002ac 	.word	0x200002ac

08003294 <Heart_Read_Samples>:
 * @param void
 *
 * @return void
 */
void Heart_Read_Samples() 
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af02      	add	r7, sp, #8
	
	// First we read the number of samples that the sensor collected to give the heart and oxy readings
	HAL_I2C_Master_Transmit(&hi2c1, Heart_Addr, sample_read_cmd, 2, 50); //nu of samples
 800329a:	4a17      	ldr	r2, [pc, #92]	; (80032f8 <Heart_Read_Samples+0x64>)
 800329c:	4817      	ldr	r0, [pc, #92]	; (80032fc <Heart_Read_Samples+0x68>)
 800329e:	2332      	movs	r3, #50	; 0x32
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	2302      	movs	r3, #2
 80032a4:	21aa      	movs	r1, #170	; 0xaa
 80032a6:	f001 fadd 	bl	8004864 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80032aa:	2001      	movs	r0, #1
 80032ac:	f000 fdf2 	bl	8003e94 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, Heart_Addr | 0x01, buf1, 3, 50);
 80032b0:	4a13      	ldr	r2, [pc, #76]	; (8003300 <Heart_Read_Samples+0x6c>)
 80032b2:	4812      	ldr	r0, [pc, #72]	; (80032fc <Heart_Read_Samples+0x68>)
 80032b4:	2332      	movs	r3, #50	; 0x32
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	2303      	movs	r3, #3
 80032ba:	21ab      	movs	r1, #171	; 0xab
 80032bc:	f001 fbda 	bl	8004a74 <HAL_I2C_Master_Receive>
	HAL_Delay(1);
 80032c0:	2001      	movs	r0, #1
 80032c2:	f000 fde7 	bl	8003e94 <HAL_Delay>

	//Then we read the heart rate sensor, oxymeter readings in a 16byte array
	// This 16 byte also gives absorption rate of IR LED and RED LED , But we neglect this reading
	HAL_I2C_Master_Transmit(&hi2c1, Heart_Addr, read_data, 2, 50); //read data
 80032c6:	4a0f      	ldr	r2, [pc, #60]	; (8003304 <Heart_Read_Samples+0x70>)
 80032c8:	480c      	ldr	r0, [pc, #48]	; (80032fc <Heart_Read_Samples+0x68>)
 80032ca:	2332      	movs	r3, #50	; 0x32
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	2302      	movs	r3, #2
 80032d0:	21aa      	movs	r1, #170	; 0xaa
 80032d2:	f001 fac7 	bl	8004864 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80032d6:	2001      	movs	r0, #1
 80032d8:	f000 fddc 	bl	8003e94 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, Heart_Addr | 0x01, rcv3, 18, 50);
 80032dc:	4a0a      	ldr	r2, [pc, #40]	; (8003308 <Heart_Read_Samples+0x74>)
 80032de:	4807      	ldr	r0, [pc, #28]	; (80032fc <Heart_Read_Samples+0x68>)
 80032e0:	2332      	movs	r3, #50	; 0x32
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	2312      	movs	r3, #18
 80032e6:	21ab      	movs	r1, #171	; 0xab
 80032e8:	f001 fbc4 	bl	8004a74 <HAL_I2C_Master_Receive>
	HAL_Delay(1);
 80032ec:	2001      	movs	r0, #1
 80032ee:	f000 fdd1 	bl	8003e94 <HAL_Delay>
}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20000010 	.word	0x20000010
 80032fc:	2000034c 	.word	0x2000034c
 8003300:	20000024 	.word	0x20000024
 8003304:	2000001c 	.word	0x2000001c
 8003308:	200002b0 	.word	0x200002b0

0800330c <callibrate_heart_oxy_values>:
 * @param void
 *
 * @return void
 */
void callibrate_heart_oxy_values(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b094      	sub	sp, #80	; 0x50
 8003310:	af00      	add	r7, sp, #0
	//read the data from sensor
	Heart_Read_Samples();
 8003312:	f7ff ffbf 	bl	8003294 <Heart_Read_Samples>
	
	//the 12th and 13th byte of the received data makes up for the measured heart rate 
	heart = ((rcv3[12] << 8) + rcv3[13]) / 100;
 8003316:	4b1d      	ldr	r3, [pc, #116]	; (800338c <callibrate_heart_oxy_values+0x80>)
 8003318:	7b1b      	ldrb	r3, [r3, #12]
 800331a:	021b      	lsls	r3, r3, #8
 800331c:	4a1b      	ldr	r2, [pc, #108]	; (800338c <callibrate_heart_oxy_values+0x80>)
 800331e:	7b52      	ldrb	r2, [r2, #13]
 8003320:	189b      	adds	r3, r3, r2
 8003322:	2164      	movs	r1, #100	; 0x64
 8003324:	0018      	movs	r0, r3
 8003326:	f7fc ff95 	bl	8000254 <__divsi3>
 800332a:	0003      	movs	r3, r0
 800332c:	b29a      	uxth	r2, r3
 800332e:	4b18      	ldr	r3, [pc, #96]	; (8003390 <callibrate_heart_oxy_values+0x84>)
 8003330:	801a      	strh	r2, [r3, #0]
	//the 15th and 16th byte of the received data makes up for the measured oxygen rate 
	oxy = ((rcv3[15] << 8) + rcv3[16]) / 100;
 8003332:	4b16      	ldr	r3, [pc, #88]	; (800338c <callibrate_heart_oxy_values+0x80>)
 8003334:	7bdb      	ldrb	r3, [r3, #15]
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	4a14      	ldr	r2, [pc, #80]	; (800338c <callibrate_heart_oxy_values+0x80>)
 800333a:	7c12      	ldrb	r2, [r2, #16]
 800333c:	189b      	adds	r3, r3, r2
 800333e:	2164      	movs	r1, #100	; 0x64
 8003340:	0018      	movs	r0, r3
 8003342:	f7fc ff87 	bl	8000254 <__divsi3>
 8003346:	0003      	movs	r3, r0
 8003348:	b29a      	uxth	r2, r3
 800334a:	4b12      	ldr	r3, [pc, #72]	; (8003394 <callibrate_heart_oxy_values+0x88>)
 800334c:	801a      	strh	r2, [r3, #0]
	
	//sends the heart rate and oxy sensor data over the radio using NRF write
	sprintf(myTxData1, " heart=%d  oxy = %d ", heart, oxy);
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <callibrate_heart_oxy_values+0x84>)
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	001a      	movs	r2, r3
 8003354:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <callibrate_heart_oxy_values+0x88>)
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	490f      	ldr	r1, [pc, #60]	; (8003398 <callibrate_heart_oxy_values+0x8c>)
 800335a:	4810      	ldr	r0, [pc, #64]	; (800339c <callibrate_heart_oxy_values+0x90>)
 800335c:	f004 f9d0 	bl	8007700 <siprintf>
		if (NRF24_write(myTxData1, sizeof(myTxData1))) {
 8003360:	4b0e      	ldr	r3, [pc, #56]	; (800339c <callibrate_heart_oxy_values+0x90>)
 8003362:	2120      	movs	r1, #32
 8003364:	0018      	movs	r0, r3
 8003366:	f7ff fb5f 	bl	8002a28 <NRF24_write>
 800336a:	1e03      	subs	r3, r0, #0
 800336c:	d00a      	beq.n	8003384 <callibrate_heart_oxy_values+0x78>
			NRF24_read(AckPayload, 3);
 800336e:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <callibrate_heart_oxy_values+0x94>)
 8003370:	2103      	movs	r1, #3
 8003372:	0018      	movs	r0, r3
 8003374:	f7ff fbb7 	bl	8002ae6 <NRF24_read>
			char myDataack[80];
			sprintf(myDataack, "AckPayload:  %s \r\n", AckPayload);
 8003378:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <callibrate_heart_oxy_values+0x94>)
 800337a:	490a      	ldr	r1, [pc, #40]	; (80033a4 <callibrate_heart_oxy_values+0x98>)
 800337c:	003b      	movs	r3, r7
 800337e:	0018      	movs	r0, r3
 8003380:	f004 f9be 	bl	8007700 <siprintf>
		}
		
		
}
 8003384:	46c0      	nop			; (mov r8, r8)
 8003386:	46bd      	mov	sp, r7
 8003388:	b014      	add	sp, #80	; 0x50
 800338a:	bd80      	pop	{r7, pc}
 800338c:	200002b0 	.word	0x200002b0
 8003390:	2000029c 	.word	0x2000029c
 8003394:	2000029e 	.word	0x2000029e
 8003398:	08009cb0 	.word	0x08009cb0
 800339c:	20000414 	.word	0x20000414
 80033a0:	2000032c 	.word	0x2000032c
 80033a4:	08009cc8 	.word	0x08009cc8

080033a8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
 {
 80033a8:	b590      	push	{r4, r7, lr}
 80033aa:	b09d      	sub	sp, #116	; 0x74
 80033ac:	af00      	add	r7, sp, #0

	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80033ae:	2438      	movs	r4, #56	; 0x38
 80033b0:	193b      	adds	r3, r7, r4
 80033b2:	0018      	movs	r0, r3
 80033b4:	2338      	movs	r3, #56	; 0x38
 80033b6:	001a      	movs	r2, r3
 80033b8:	2100      	movs	r1, #0
 80033ba:	f003 fd1e 	bl	8006dfa <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80033be:	2324      	movs	r3, #36	; 0x24
 80033c0:	18fb      	adds	r3, r7, r3
 80033c2:	0018      	movs	r0, r3
 80033c4:	2314      	movs	r3, #20
 80033c6:	001a      	movs	r2, r3
 80033c8:	2100      	movs	r1, #0
 80033ca:	f003 fd16 	bl	8006dfa <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80033ce:	1d3b      	adds	r3, r7, #4
 80033d0:	0018      	movs	r0, r3
 80033d2:	2320      	movs	r3, #32
 80033d4:	001a      	movs	r2, r3
 80033d6:	2100      	movs	r1, #0
 80033d8:	f003 fd0f 	bl	8006dfa <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033dc:	4b27      	ldr	r3, [pc, #156]	; (800347c <SystemClock_Config+0xd4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a27      	ldr	r2, [pc, #156]	; (8003480 <SystemClock_Config+0xd8>)
 80033e2:	401a      	ands	r2, r3
 80033e4:	4b25      	ldr	r3, [pc, #148]	; (800347c <SystemClock_Config+0xd4>)
 80033e6:	2180      	movs	r1, #128	; 0x80
 80033e8:	0109      	lsls	r1, r1, #4
 80033ea:	430a      	orrs	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80033ee:	0021      	movs	r1, r4
 80033f0:	187b      	adds	r3, r7, r1
 80033f2:	220a      	movs	r2, #10
 80033f4:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033f6:	187b      	adds	r3, r7, r1
 80033f8:	2201      	movs	r2, #1
 80033fa:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033fc:	187b      	adds	r3, r7, r1
 80033fe:	2210      	movs	r2, #16
 8003400:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003402:	187b      	adds	r3, r7, r1
 8003404:	2201      	movs	r2, #1
 8003406:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003408:	187b      	adds	r3, r7, r1
 800340a:	2200      	movs	r2, #0
 800340c:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800340e:	187b      	adds	r3, r7, r1
 8003410:	0018      	movs	r0, r3
 8003412:	f001 fecd 	bl	80051b0 <HAL_RCC_OscConfig>
 8003416:	1e03      	subs	r3, r0, #0
 8003418:	d001      	beq.n	800341e <SystemClock_Config+0x76>
		Error_Handler();
 800341a:	f000 f9cb 	bl	80037b4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800341e:	2124      	movs	r1, #36	; 0x24
 8003420:	187b      	adds	r3, r7, r1
 8003422:	220f      	movs	r2, #15
 8003424:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003426:	187b      	adds	r3, r7, r1
 8003428:	2201      	movs	r2, #1
 800342a:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800342c:	187b      	adds	r3, r7, r1
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003432:	187b      	adds	r3, r7, r1
 8003434:	2200      	movs	r2, #0
 8003436:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003438:	187b      	adds	r3, r7, r1
 800343a:	2200      	movs	r2, #0
 800343c:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800343e:	187b      	adds	r3, r7, r1
 8003440:	2100      	movs	r1, #0
 8003442:	0018      	movs	r0, r3
 8003444:	f002 fa78 	bl	8005938 <HAL_RCC_ClockConfig>
 8003448:	1e03      	subs	r3, r0, #0
 800344a:	d001      	beq.n	8003450 <SystemClock_Config+0xa8>
		Error_Handler();
 800344c:	f000 f9b2 	bl	80037b4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_RTC;
 8003450:	1d3b      	adds	r3, r7, #4
 8003452:	2228      	movs	r2, #40	; 0x28
 8003454:	601a      	str	r2, [r3, #0]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	2200      	movs	r2, #0
 800345a:	615a      	str	r2, [r3, #20]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800345c:	1d3b      	adds	r3, r7, #4
 800345e:	2280      	movs	r2, #128	; 0x80
 8003460:	0292      	lsls	r2, r2, #10
 8003462:	605a      	str	r2, [r3, #4]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8003464:	1d3b      	adds	r3, r7, #4
 8003466:	0018      	movs	r0, r3
 8003468:	f002 fc54 	bl	8005d14 <HAL_RCCEx_PeriphCLKConfig>
 800346c:	1e03      	subs	r3, r0, #0
 800346e:	d001      	beq.n	8003474 <SystemClock_Config+0xcc>
		Error_Handler();
 8003470:	f000 f9a0 	bl	80037b4 <Error_Handler>
	}
}
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	b01d      	add	sp, #116	; 0x74
 800347a:	bd90      	pop	{r4, r7, pc}
 800347c:	40007000 	.word	0x40007000
 8003480:	ffffe7ff 	.word	0xffffe7ff

08003484 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
 void MX_I2C1_Init(void) {
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003488:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <MX_I2C1_Init+0x74>)
 800348a:	4a1c      	ldr	r2, [pc, #112]	; (80034fc <MX_I2C1_Init+0x78>)
 800348c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00303D5B;
 800348e:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <MX_I2C1_Init+0x74>)
 8003490:	4a1b      	ldr	r2, [pc, #108]	; (8003500 <MX_I2C1_Init+0x7c>)
 8003492:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8003494:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <MX_I2C1_Init+0x74>)
 8003496:	2200      	movs	r2, #0
 8003498:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800349a:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <MX_I2C1_Init+0x74>)
 800349c:	2201      	movs	r2, #1
 800349e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034a0:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <MX_I2C1_Init+0x74>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80034a6:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <MX_I2C1_Init+0x74>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80034ac:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <MX_I2C1_Init+0x74>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034b2:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <MX_I2C1_Init+0x74>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034b8:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <MX_I2C1_Init+0x74>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80034be:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <MX_I2C1_Init+0x74>)
 80034c0:	0018      	movs	r0, r3
 80034c2:	f001 f939 	bl	8004738 <HAL_I2C_Init>
 80034c6:	1e03      	subs	r3, r0, #0
 80034c8:	d001      	beq.n	80034ce <MX_I2C1_Init+0x4a>
		Error_Handler();
 80034ca:	f000 f973 	bl	80037b4 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80034ce:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <MX_I2C1_Init+0x74>)
 80034d0:	2100      	movs	r1, #0
 80034d2:	0018      	movs	r0, r3
 80034d4:	f001 fdba 	bl	800504c <HAL_I2CEx_ConfigAnalogFilter>
 80034d8:	1e03      	subs	r3, r0, #0
 80034da:	d001      	beq.n	80034e0 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80034dc:	f000 f96a 	bl	80037b4 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80034e0:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <MX_I2C1_Init+0x74>)
 80034e2:	2100      	movs	r1, #0
 80034e4:	0018      	movs	r0, r3
 80034e6:	f001 fdfd 	bl	80050e4 <HAL_I2CEx_ConfigDigitalFilter>
 80034ea:	1e03      	subs	r3, r0, #0
 80034ec:	d001      	beq.n	80034f2 <MX_I2C1_Init+0x6e>
		Error_Handler();
 80034ee:	f000 f961 	bl	80037b4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	2000034c 	.word	0x2000034c
 80034fc:	40005400 	.word	0x40005400
 8003500:	00303d5b 	.word	0x00303d5b

08003504 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
void MX_RTC_Init(void) {
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8003508:	4b11      	ldr	r3, [pc, #68]	; (8003550 <MX_RTC_Init+0x4c>)
 800350a:	4a12      	ldr	r2, [pc, #72]	; (8003554 <MX_RTC_Init+0x50>)
 800350c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800350e:	4b10      	ldr	r3, [pc, #64]	; (8003550 <MX_RTC_Init+0x4c>)
 8003510:	2200      	movs	r2, #0
 8003512:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8003514:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <MX_RTC_Init+0x4c>)
 8003516:	227f      	movs	r2, #127	; 0x7f
 8003518:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800351a:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <MX_RTC_Init+0x4c>)
 800351c:	22ff      	movs	r2, #255	; 0xff
 800351e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <MX_RTC_Init+0x4c>)
 8003522:	2200      	movs	r2, #0
 8003524:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003526:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <MX_RTC_Init+0x4c>)
 8003528:	2200      	movs	r2, #0
 800352a:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800352c:	4b08      	ldr	r3, [pc, #32]	; (8003550 <MX_RTC_Init+0x4c>)
 800352e:	2200      	movs	r2, #0
 8003530:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003532:	4b07      	ldr	r3, [pc, #28]	; (8003550 <MX_RTC_Init+0x4c>)
 8003534:	2200      	movs	r2, #0
 8003536:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8003538:	4b05      	ldr	r3, [pc, #20]	; (8003550 <MX_RTC_Init+0x4c>)
 800353a:	0018      	movs	r0, r3
 800353c:	f002 fd30 	bl	8005fa0 <HAL_RTC_Init>
 8003540:	1e03      	subs	r3, r0, #0
 8003542:	d001      	beq.n	8003548 <MX_RTC_Init+0x44>
		Error_Handler();
 8003544:	f000 f936 	bl	80037b4 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8003548:	46c0      	nop			; (mov r8, r8)
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	20000398 	.word	0x20000398
 8003554:	40002800 	.word	0x40002800

08003558 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
 void MX_SPI1_Init(void) {
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800355c:	4b18      	ldr	r3, [pc, #96]	; (80035c0 <MX_SPI1_Init+0x68>)
 800355e:	4a19      	ldr	r2, [pc, #100]	; (80035c4 <MX_SPI1_Init+0x6c>)
 8003560:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8003562:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <MX_SPI1_Init+0x68>)
 8003564:	2282      	movs	r2, #130	; 0x82
 8003566:	0052      	lsls	r2, r2, #1
 8003568:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800356a:	4b15      	ldr	r3, [pc, #84]	; (80035c0 <MX_SPI1_Init+0x68>)
 800356c:	2200      	movs	r2, #0
 800356e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003570:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <MX_SPI1_Init+0x68>)
 8003572:	2200      	movs	r2, #0
 8003574:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003576:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <MX_SPI1_Init+0x68>)
 8003578:	2200      	movs	r2, #0
 800357a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800357c:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <MX_SPI1_Init+0x68>)
 800357e:	2200      	movs	r2, #0
 8003580:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8003582:	4b0f      	ldr	r3, [pc, #60]	; (80035c0 <MX_SPI1_Init+0x68>)
 8003584:	2280      	movs	r2, #128	; 0x80
 8003586:	0092      	lsls	r2, r2, #2
 8003588:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800358a:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <MX_SPI1_Init+0x68>)
 800358c:	2200      	movs	r2, #0
 800358e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003590:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <MX_SPI1_Init+0x68>)
 8003592:	2200      	movs	r2, #0
 8003594:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003596:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <MX_SPI1_Init+0x68>)
 8003598:	2200      	movs	r2, #0
 800359a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800359c:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <MX_SPI1_Init+0x68>)
 800359e:	2200      	movs	r2, #0
 80035a0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80035a2:	4b07      	ldr	r3, [pc, #28]	; (80035c0 <MX_SPI1_Init+0x68>)
 80035a4:	2207      	movs	r2, #7
 80035a6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80035a8:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <MX_SPI1_Init+0x68>)
 80035aa:	0018      	movs	r0, r3
 80035ac:	f002 fde8 	bl	8006180 <HAL_SPI_Init>
 80035b0:	1e03      	subs	r3, r0, #0
 80035b2:	d001      	beq.n	80035b8 <MX_SPI1_Init+0x60>
		Error_Handler();
 80035b4:	f000 f8fe 	bl	80037b4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	200003bc 	.word	0x200003bc
 80035c4:	40013000 	.word	0x40013000

080035c8 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
 void MX_SPI2_Init(void) {
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80035cc:	4b18      	ldr	r3, [pc, #96]	; (8003630 <MX_SPI2_Init+0x68>)
 80035ce:	4a19      	ldr	r2, [pc, #100]	; (8003634 <MX_SPI2_Init+0x6c>)
 80035d0:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80035d2:	4b17      	ldr	r3, [pc, #92]	; (8003630 <MX_SPI2_Init+0x68>)
 80035d4:	2282      	movs	r2, #130	; 0x82
 80035d6:	0052      	lsls	r2, r2, #1
 80035d8:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80035da:	4b15      	ldr	r3, [pc, #84]	; (8003630 <MX_SPI2_Init+0x68>)
 80035dc:	2200      	movs	r2, #0
 80035de:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80035e0:	4b13      	ldr	r3, [pc, #76]	; (8003630 <MX_SPI2_Init+0x68>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035e6:	4b12      	ldr	r3, [pc, #72]	; (8003630 <MX_SPI2_Init+0x68>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035ec:	4b10      	ldr	r3, [pc, #64]	; (8003630 <MX_SPI2_Init+0x68>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80035f2:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <MX_SPI2_Init+0x68>)
 80035f4:	2280      	movs	r2, #128	; 0x80
 80035f6:	0092      	lsls	r2, r2, #2
 80035f8:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80035fa:	4b0d      	ldr	r3, [pc, #52]	; (8003630 <MX_SPI2_Init+0x68>)
 80035fc:	2210      	movs	r2, #16
 80035fe:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <MX_SPI2_Init+0x68>)
 8003602:	2200      	movs	r2, #0
 8003604:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003606:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <MX_SPI2_Init+0x68>)
 8003608:	2200      	movs	r2, #0
 800360a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800360c:	4b08      	ldr	r3, [pc, #32]	; (8003630 <MX_SPI2_Init+0x68>)
 800360e:	2200      	movs	r2, #0
 8003610:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8003612:	4b07      	ldr	r3, [pc, #28]	; (8003630 <MX_SPI2_Init+0x68>)
 8003614:	2207      	movs	r2, #7
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <MX_SPI2_Init+0x68>)
 800361a:	0018      	movs	r0, r3
 800361c:	f002 fdb0 	bl	8006180 <HAL_SPI_Init>
 8003620:	1e03      	subs	r3, r0, #0
 8003622:	d001      	beq.n	8003628 <MX_SPI2_Init+0x60>
		Error_Handler();
 8003624:	f000 f8c6 	bl	80037b4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8003628:	46c0      	nop			; (mov r8, r8)
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	200002d4 	.word	0x200002d4
 8003634:	40003800 	.word	0x40003800

08003638 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
 void MX_GPIO_Init(void) {
 8003638:	b590      	push	{r4, r7, lr}
 800363a:	b089      	sub	sp, #36	; 0x24
 800363c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800363e:	240c      	movs	r4, #12
 8003640:	193b      	adds	r3, r7, r4
 8003642:	0018      	movs	r0, r3
 8003644:	2314      	movs	r3, #20
 8003646:	001a      	movs	r2, r3
 8003648:	2100      	movs	r1, #0
 800364a:	f003 fbd6 	bl	8006dfa <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800364e:	4b55      	ldr	r3, [pc, #340]	; (80037a4 <MX_GPIO_Init+0x16c>)
 8003650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003652:	4b54      	ldr	r3, [pc, #336]	; (80037a4 <MX_GPIO_Init+0x16c>)
 8003654:	2104      	movs	r1, #4
 8003656:	430a      	orrs	r2, r1
 8003658:	62da      	str	r2, [r3, #44]	; 0x2c
 800365a:	4b52      	ldr	r3, [pc, #328]	; (80037a4 <MX_GPIO_Init+0x16c>)
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	2204      	movs	r2, #4
 8003660:	4013      	ands	r3, r2
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003666:	4b4f      	ldr	r3, [pc, #316]	; (80037a4 <MX_GPIO_Init+0x16c>)
 8003668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366a:	4b4e      	ldr	r3, [pc, #312]	; (80037a4 <MX_GPIO_Init+0x16c>)
 800366c:	2101      	movs	r1, #1
 800366e:	430a      	orrs	r2, r1
 8003670:	62da      	str	r2, [r3, #44]	; 0x2c
 8003672:	4b4c      	ldr	r3, [pc, #304]	; (80037a4 <MX_GPIO_Init+0x16c>)
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	2201      	movs	r2, #1
 8003678:	4013      	ands	r3, r2
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800367e:	4b49      	ldr	r3, [pc, #292]	; (80037a4 <MX_GPIO_Init+0x16c>)
 8003680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003682:	4b48      	ldr	r3, [pc, #288]	; (80037a4 <MX_GPIO_Init+0x16c>)
 8003684:	2102      	movs	r1, #2
 8003686:	430a      	orrs	r2, r1
 8003688:	62da      	str	r2, [r3, #44]	; 0x2c
 800368a:	4b46      	ldr	r3, [pc, #280]	; (80037a4 <MX_GPIO_Init+0x16c>)
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	2202      	movs	r2, #2
 8003690:	4013      	ands	r3, r2
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2 | GPIO_PIN_4, GPIO_PIN_RESET);
 8003696:	23a0      	movs	r3, #160	; 0xa0
 8003698:	05db      	lsls	r3, r3, #23
 800369a:	2200      	movs	r2, #0
 800369c:	2114      	movs	r1, #20
 800369e:	0018      	movs	r0, r3
 80036a0:	f001 f812 	bl	80046c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80036a4:	4940      	ldr	r1, [pc, #256]	; (80037a8 <MX_GPIO_Init+0x170>)
 80036a6:	4b41      	ldr	r3, [pc, #260]	; (80037ac <MX_GPIO_Init+0x174>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	0018      	movs	r0, r3
 80036ac:	f001 f80c 	bl	80046c8 <HAL_GPIO_WritePin>
	GPIO_PIN_2 | slave_select_Pin | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Chip_enable_GPIO_Port, Chip_enable_Pin, GPIO_PIN_RESET);
 80036b0:	4b3f      	ldr	r3, [pc, #252]	; (80037b0 <MX_GPIO_Init+0x178>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	2140      	movs	r1, #64	; 0x40
 80036b6:	0018      	movs	r0, r3
 80036b8:	f001 f806 	bl	80046c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80036bc:	193b      	adds	r3, r7, r4
 80036be:	2204      	movs	r2, #4
 80036c0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036c2:	193b      	adds	r3, r7, r4
 80036c4:	2201      	movs	r2, #1
 80036c6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	193b      	adds	r3, r7, r4
 80036ca:	2200      	movs	r2, #0
 80036cc:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80036ce:	193b      	adds	r3, r7, r4
 80036d0:	2201      	movs	r2, #1
 80036d2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d4:	193a      	adds	r2, r7, r4
 80036d6:	23a0      	movs	r3, #160	; 0xa0
 80036d8:	05db      	lsls	r3, r3, #23
 80036da:	0011      	movs	r1, r2
 80036dc:	0018      	movs	r0, r3
 80036de:	f000 fe7d 	bl	80043dc <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80036e2:	193b      	adds	r3, r7, r4
 80036e4:	2210      	movs	r2, #16
 80036e6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036e8:	193b      	adds	r3, r7, r4
 80036ea:	2201      	movs	r2, #1
 80036ec:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ee:	193b      	adds	r3, r7, r4
 80036f0:	2200      	movs	r2, #0
 80036f2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f4:	193b      	adds	r3, r7, r4
 80036f6:	2200      	movs	r2, #0
 80036f8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036fa:	193a      	adds	r2, r7, r4
 80036fc:	23a0      	movs	r3, #160	; 0xa0
 80036fe:	05db      	lsls	r3, r3, #23
 8003700:	0011      	movs	r1, r2
 8003702:	0018      	movs	r0, r3
 8003704:	f000 fe6a 	bl	80043dc <HAL_GPIO_Init>

	/*Configure GPIO pins : PC4 PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8003708:	193b      	adds	r3, r7, r4
 800370a:	2230      	movs	r2, #48	; 0x30
 800370c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800370e:	193b      	adds	r3, r7, r4
 8003710:	2200      	movs	r2, #0
 8003712:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003714:	193b      	adds	r3, r7, r4
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800371a:	193b      	adds	r3, r7, r4
 800371c:	4a24      	ldr	r2, [pc, #144]	; (80037b0 <MX_GPIO_Init+0x178>)
 800371e:	0019      	movs	r1, r3
 8003720:	0010      	movs	r0, r2
 8003722:	f000 fe5b 	bl	80043dc <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003726:	193b      	adds	r3, r7, r4
 8003728:	2204      	movs	r2, #4
 800372a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800372c:	193b      	adds	r3, r7, r4
 800372e:	2201      	movs	r2, #1
 8003730:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003732:	193b      	adds	r3, r7, r4
 8003734:	2200      	movs	r2, #0
 8003736:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003738:	193b      	adds	r3, r7, r4
 800373a:	2201      	movs	r2, #1
 800373c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800373e:	193b      	adds	r3, r7, r4
 8003740:	4a1a      	ldr	r2, [pc, #104]	; (80037ac <MX_GPIO_Init+0x174>)
 8003742:	0019      	movs	r1, r3
 8003744:	0010      	movs	r0, r2
 8003746:	f000 fe49 	bl	80043dc <HAL_GPIO_Init>

	/*Configure GPIO pins : slave_select_Pin PB6 PB7 */
	GPIO_InitStruct.Pin = slave_select_Pin | GPIO_PIN_6 | GPIO_PIN_7;
 800374a:	0021      	movs	r1, r4
 800374c:	187b      	adds	r3, r7, r1
 800374e:	2286      	movs	r2, #134	; 0x86
 8003750:	0152      	lsls	r2, r2, #5
 8003752:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003754:	000c      	movs	r4, r1
 8003756:	193b      	adds	r3, r7, r4
 8003758:	2201      	movs	r2, #1
 800375a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375c:	193b      	adds	r3, r7, r4
 800375e:	2200      	movs	r2, #0
 8003760:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003762:	193b      	adds	r3, r7, r4
 8003764:	2200      	movs	r2, #0
 8003766:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003768:	193b      	adds	r3, r7, r4
 800376a:	4a10      	ldr	r2, [pc, #64]	; (80037ac <MX_GPIO_Init+0x174>)
 800376c:	0019      	movs	r1, r3
 800376e:	0010      	movs	r0, r2
 8003770:	f000 fe34 	bl	80043dc <HAL_GPIO_Init>

	/*Configure GPIO pin : Chip_enable_Pin */
	GPIO_InitStruct.Pin = Chip_enable_Pin;
 8003774:	0021      	movs	r1, r4
 8003776:	187b      	adds	r3, r7, r1
 8003778:	2240      	movs	r2, #64	; 0x40
 800377a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800377c:	187b      	adds	r3, r7, r1
 800377e:	2201      	movs	r2, #1
 8003780:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003782:	187b      	adds	r3, r7, r1
 8003784:	2200      	movs	r2, #0
 8003786:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003788:	187b      	adds	r3, r7, r1
 800378a:	2200      	movs	r2, #0
 800378c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(Chip_enable_GPIO_Port, &GPIO_InitStruct);
 800378e:	187b      	adds	r3, r7, r1
 8003790:	4a07      	ldr	r2, [pc, #28]	; (80037b0 <MX_GPIO_Init+0x178>)
 8003792:	0019      	movs	r1, r3
 8003794:	0010      	movs	r0, r2
 8003796:	f000 fe21 	bl	80043dc <HAL_GPIO_Init>

}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	46bd      	mov	sp, r7
 800379e:	b009      	add	sp, #36	; 0x24
 80037a0:	bd90      	pop	{r4, r7, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	40021000 	.word	0x40021000
 80037a8:	000010c4 	.word	0x000010c4
 80037ac:	50000400 	.word	0x50000400
 80037b0:	50000800 	.word	0x50000800

080037b4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037b8:	b672      	cpsid	i
}
 80037ba:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80037bc:	e7fe      	b.n	80037bc <Error_Handler+0x8>
	...

080037c0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) 
{
 80037c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037c2:	b097      	sub	sp, #92	; 0x5c
 80037c4:	af16      	add	r7, sp, #88	; 0x58
	

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80037c6:	f000 faf5 	bl	8003db4 <HAL_Init>

	
	/* Configure the system clock */
	SystemClock_Config();
 80037ca:	f7ff fded 	bl	80033a8 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80037ce:	f7ff ff33 	bl	8003638 <MX_GPIO_Init>
	MX_RTC_Init();
 80037d2:	f7ff fe97 	bl	8003504 <MX_RTC_Init>
	MX_SPI2_Init();
 80037d6:	f7ff fef7 	bl	80035c8 <MX_SPI2_Init>
	MX_I2C1_Init();
 80037da:	f7ff fe53 	bl	8003484 <MX_I2C1_Init>
	MX_SPI1_Init();
 80037de:	f7ff febb 	bl	8003558 <MX_SPI1_Init>
	
	//Begin the NRF radio communication
	NRF24_begin(GPIOC, GPIOB, GPIO_PIN_12, GPIO_PIN_6, hspi2);
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	015c      	lsls	r4, r3, #5
 80037e6:	4e1b      	ldr	r6, [pc, #108]	; (8003854 <main+0x94>)
 80037e8:	4d1b      	ldr	r5, [pc, #108]	; (8003858 <main+0x98>)
 80037ea:	4a1c      	ldr	r2, [pc, #112]	; (800385c <main+0x9c>)
 80037ec:	466b      	mov	r3, sp
 80037ee:	0018      	movs	r0, r3
 80037f0:	0011      	movs	r1, r2
 80037f2:	2358      	movs	r3, #88	; 0x58
 80037f4:	001a      	movs	r2, r3
 80037f6:	f003 faf7 	bl	8006de8 <memcpy>
 80037fa:	2340      	movs	r3, #64	; 0x40
 80037fc:	0022      	movs	r2, r4
 80037fe:	0031      	movs	r1, r6
 8003800:	0028      	movs	r0, r5
 8003802:	f7ff f80d 	bl	8002820 <NRF24_begin>

	//**** TRANSMIT - ACK ****//
	NRF24_stopListening();
 8003806:	f7ff f903 	bl	8002a10 <NRF24_stopListening>
	NRF24_openWritingPipe(TxpipeAddrs);
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <main+0xa0>)
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	0010      	movs	r0, r2
 8003812:	0019      	movs	r1, r3
 8003814:	f7ff f98c 	bl	8002b30 <NRF24_openWritingPipe>
	NRF24_setAutoAck(true);
 8003818:	2001      	movs	r0, #1
 800381a:	f7ff fa69 	bl	8002cf0 <NRF24_setAutoAck>
	NRF24_setChannel(76);
 800381e:	204c      	movs	r0, #76	; 0x4c
 8003820:	f7ff f9ce 	bl	8002bc0 <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 8003824:	2020      	movs	r0, #32
 8003826:	f7ff f9e7 	bl	8002bf8 <NRF24_setPayloadSize>
	//NRF24_enableDynamicPayloads();
	NRF24_enableAckPayload();
 800382a:	f7ff fa14 	bl	8002c56 <NRF24_enableAckPayload>

	// Starting up the heart-oxy module
	Heart_Power_On();
 800382e:	f7ff fc31 	bl	8003094 <Heart_Power_On>

	// Initializing commands for the heart-oxy module
	Heart_Init();
 8003832:	f7ff fc53 	bl	80030dc <Heart_Init>
	/* Infinite loop */
	
	while (1)
	{	
		
		callibrate_temperature_value();	//read and send temperature sensor
 8003836:	f000 fa3d 	bl	8003cb4 <callibrate_temperature_value>
		callibrate_heart_oxy_values(); //read and send heart and oxy sensor
 800383a:	f7ff fd67 	bl	800330c <callibrate_heart_oxy_values>
			
		//Toggle LED at 1sec
		HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 800383e:	4b05      	ldr	r3, [pc, #20]	; (8003854 <main+0x94>)
 8003840:	2104      	movs	r1, #4
 8003842:	0018      	movs	r0, r3
 8003844:	f000 ff5d 	bl	8004702 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8003848:	23fa      	movs	r3, #250	; 0xfa
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	0018      	movs	r0, r3
 800384e:	f000 fb21 	bl	8003e94 <HAL_Delay>
		callibrate_temperature_value();	//read and send temperature sensor
 8003852:	e7f0      	b.n	8003836 <main+0x76>
 8003854:	50000400 	.word	0x50000400
 8003858:	50000800 	.word	0x50000800
 800385c:	200002d4 	.word	0x200002d4
 8003860:	20000028 	.word	0x20000028

08003864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003868:	4b13      	ldr	r3, [pc, #76]	; (80038b8 <HAL_MspInit+0x54>)
 800386a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800386c:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <HAL_MspInit+0x54>)
 800386e:	2101      	movs	r1, #1
 8003870:	430a      	orrs	r2, r1
 8003872:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003874:	4b10      	ldr	r3, [pc, #64]	; (80038b8 <HAL_MspInit+0x54>)
 8003876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003878:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <HAL_MspInit+0x54>)
 800387a:	2180      	movs	r1, #128	; 0x80
 800387c:	0549      	lsls	r1, r1, #21
 800387e:	430a      	orrs	r2, r1
 8003880:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8003882:	2200      	movs	r2, #0
 8003884:	2100      	movs	r1, #0
 8003886:	2001      	movs	r0, #1
 8003888:	f000 fbd4 	bl	8004034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800388c:	2001      	movs	r0, #1
 800388e:	f000 fbe6 	bl	800405e <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8003892:	2200      	movs	r2, #0
 8003894:	2100      	movs	r1, #0
 8003896:	2003      	movs	r0, #3
 8003898:	f000 fbcc 	bl	8004034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800389c:	2003      	movs	r0, #3
 800389e:	f000 fbde 	bl	800405e <HAL_NVIC_EnableIRQ>
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 80038a2:	2200      	movs	r2, #0
 80038a4:	2100      	movs	r1, #0
 80038a6:	2004      	movs	r0, #4
 80038a8:	f000 fbc4 	bl	8004034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 80038ac:	2004      	movs	r0, #4
 80038ae:	f000 fbd6 	bl	800405e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40021000 	.word	0x40021000

080038bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038bc:	b590      	push	{r4, r7, lr}
 80038be:	b089      	sub	sp, #36	; 0x24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c4:	240c      	movs	r4, #12
 80038c6:	193b      	adds	r3, r7, r4
 80038c8:	0018      	movs	r0, r3
 80038ca:	2314      	movs	r3, #20
 80038cc:	001a      	movs	r2, r3
 80038ce:	2100      	movs	r1, #0
 80038d0:	f003 fa93 	bl	8006dfa <memset>
  if(hi2c->Instance==I2C1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a18      	ldr	r2, [pc, #96]	; (800393c <HAL_I2C_MspInit+0x80>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d129      	bne.n	8003932 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038de:	4b18      	ldr	r3, [pc, #96]	; (8003940 <HAL_I2C_MspInit+0x84>)
 80038e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e2:	4b17      	ldr	r3, [pc, #92]	; (8003940 <HAL_I2C_MspInit+0x84>)
 80038e4:	2102      	movs	r1, #2
 80038e6:	430a      	orrs	r2, r1
 80038e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80038ea:	4b15      	ldr	r3, [pc, #84]	; (8003940 <HAL_I2C_MspInit+0x84>)
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	2202      	movs	r2, #2
 80038f0:	4013      	ands	r3, r2
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80038f6:	193b      	adds	r3, r7, r4
 80038f8:	22c0      	movs	r2, #192	; 0xc0
 80038fa:	0092      	lsls	r2, r2, #2
 80038fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038fe:	0021      	movs	r1, r4
 8003900:	187b      	adds	r3, r7, r1
 8003902:	2212      	movs	r2, #18
 8003904:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003906:	187b      	adds	r3, r7, r1
 8003908:	2201      	movs	r2, #1
 800390a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800390c:	187b      	adds	r3, r7, r1
 800390e:	2203      	movs	r2, #3
 8003910:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003912:	187b      	adds	r3, r7, r1
 8003914:	2204      	movs	r2, #4
 8003916:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003918:	187b      	adds	r3, r7, r1
 800391a:	4a0a      	ldr	r2, [pc, #40]	; (8003944 <HAL_I2C_MspInit+0x88>)
 800391c:	0019      	movs	r1, r3
 800391e:	0010      	movs	r0, r2
 8003920:	f000 fd5c 	bl	80043dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003924:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_I2C_MspInit+0x84>)
 8003926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <HAL_I2C_MspInit+0x84>)
 800392a:	2180      	movs	r1, #128	; 0x80
 800392c:	0389      	lsls	r1, r1, #14
 800392e:	430a      	orrs	r2, r1
 8003930:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	46bd      	mov	sp, r7
 8003936:	b009      	add	sp, #36	; 0x24
 8003938:	bd90      	pop	{r4, r7, pc}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	40005400 	.word	0x40005400
 8003940:	40021000 	.word	0x40021000
 8003944:	50000400 	.word	0x50000400

08003948 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a06      	ldr	r2, [pc, #24]	; (8003970 <HAL_RTC_MspInit+0x28>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d106      	bne.n	8003968 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_RTC_MspInit+0x2c>)
 800395c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_RTC_MspInit+0x2c>)
 8003960:	2180      	movs	r1, #128	; 0x80
 8003962:	02c9      	lsls	r1, r1, #11
 8003964:	430a      	orrs	r2, r1
 8003966:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003968:	46c0      	nop			; (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b002      	add	sp, #8
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40002800 	.word	0x40002800
 8003974:	40021000 	.word	0x40021000

08003978 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003978:	b590      	push	{r4, r7, lr}
 800397a:	b08b      	sub	sp, #44	; 0x2c
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	2414      	movs	r4, #20
 8003982:	193b      	adds	r3, r7, r4
 8003984:	0018      	movs	r0, r3
 8003986:	2314      	movs	r3, #20
 8003988:	001a      	movs	r2, r3
 800398a:	2100      	movs	r1, #0
 800398c:	f003 fa35 	bl	8006dfa <memset>
  if(hspi->Instance==SPI1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a30      	ldr	r2, [pc, #192]	; (8003a58 <HAL_SPI_MspInit+0xe0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d12a      	bne.n	80039f0 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800399a:	4b30      	ldr	r3, [pc, #192]	; (8003a5c <HAL_SPI_MspInit+0xe4>)
 800399c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800399e:	4b2f      	ldr	r3, [pc, #188]	; (8003a5c <HAL_SPI_MspInit+0xe4>)
 80039a0:	2180      	movs	r1, #128	; 0x80
 80039a2:	0149      	lsls	r1, r1, #5
 80039a4:	430a      	orrs	r2, r1
 80039a6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a8:	4b2c      	ldr	r3, [pc, #176]	; (8003a5c <HAL_SPI_MspInit+0xe4>)
 80039aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ac:	4b2b      	ldr	r3, [pc, #172]	; (8003a5c <HAL_SPI_MspInit+0xe4>)
 80039ae:	2101      	movs	r1, #1
 80039b0:	430a      	orrs	r2, r1
 80039b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80039b4:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <HAL_SPI_MspInit+0xe4>)
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	2201      	movs	r2, #1
 80039ba:	4013      	ands	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80039c0:	0021      	movs	r1, r4
 80039c2:	187b      	adds	r3, r7, r1
 80039c4:	22e0      	movs	r2, #224	; 0xe0
 80039c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c8:	187b      	adds	r3, r7, r1
 80039ca:	2202      	movs	r2, #2
 80039cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ce:	187b      	adds	r3, r7, r1
 80039d0:	2200      	movs	r2, #0
 80039d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d4:	187b      	adds	r3, r7, r1
 80039d6:	2203      	movs	r2, #3
 80039d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80039da:	187b      	adds	r3, r7, r1
 80039dc:	2200      	movs	r2, #0
 80039de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e0:	187a      	adds	r2, r7, r1
 80039e2:	23a0      	movs	r3, #160	; 0xa0
 80039e4:	05db      	lsls	r3, r3, #23
 80039e6:	0011      	movs	r1, r2
 80039e8:	0018      	movs	r0, r3
 80039ea:	f000 fcf7 	bl	80043dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80039ee:	e02e      	b.n	8003a4e <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1a      	ldr	r2, [pc, #104]	; (8003a60 <HAL_SPI_MspInit+0xe8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d129      	bne.n	8003a4e <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80039fa:	4b18      	ldr	r3, [pc, #96]	; (8003a5c <HAL_SPI_MspInit+0xe4>)
 80039fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039fe:	4b17      	ldr	r3, [pc, #92]	; (8003a5c <HAL_SPI_MspInit+0xe4>)
 8003a00:	2180      	movs	r1, #128	; 0x80
 8003a02:	01c9      	lsls	r1, r1, #7
 8003a04:	430a      	orrs	r2, r1
 8003a06:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a08:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <HAL_SPI_MspInit+0xe4>)
 8003a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0c:	4b13      	ldr	r3, [pc, #76]	; (8003a5c <HAL_SPI_MspInit+0xe4>)
 8003a0e:	2102      	movs	r1, #2
 8003a10:	430a      	orrs	r2, r1
 8003a12:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a14:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <HAL_SPI_MspInit+0xe4>)
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	2202      	movs	r2, #2
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003a20:	2114      	movs	r1, #20
 8003a22:	187b      	adds	r3, r7, r1
 8003a24:	22e0      	movs	r2, #224	; 0xe0
 8003a26:	0212      	lsls	r2, r2, #8
 8003a28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a2a:	187b      	adds	r3, r7, r1
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a30:	187b      	adds	r3, r7, r1
 8003a32:	2200      	movs	r2, #0
 8003a34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a36:	187b      	adds	r3, r7, r1
 8003a38:	2203      	movs	r2, #3
 8003a3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003a3c:	187b      	adds	r3, r7, r1
 8003a3e:	2200      	movs	r2, #0
 8003a40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a42:	187b      	adds	r3, r7, r1
 8003a44:	4a07      	ldr	r2, [pc, #28]	; (8003a64 <HAL_SPI_MspInit+0xec>)
 8003a46:	0019      	movs	r1, r3
 8003a48:	0010      	movs	r0, r2
 8003a4a:	f000 fcc7 	bl	80043dc <HAL_GPIO_Init>
}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b00b      	add	sp, #44	; 0x2c
 8003a54:	bd90      	pop	{r4, r7, pc}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	40013000 	.word	0x40013000
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	40003800 	.word	0x40003800
 8003a64:	50000400 	.word	0x50000400

08003a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a6c:	e7fe      	b.n	8003a6c <NMI_Handler+0x4>

08003a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a72:	e7fe      	b.n	8003a72 <HardFault_Handler+0x4>

08003a74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003a78:	46c0      	nop			; (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a8c:	f000 f9e6 	bl	8003e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8003a9a:	f001 fb6f 	bl	800517c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash and EEPROM global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8003aa8:	f000 faf6 	bl	8004098 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8003aac:	46c0      	nop			; (mov r8, r8)
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupt.
  */
void RCC_CRS_IRQHandler(void)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8003ab6:	46c0      	nop			; (mov r8, r8)
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
	return 1;
 8003ac0:	2301      	movs	r3, #1
}
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <_kill>:

int _kill(int pid, int sig)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ad2:	f003 f95f 	bl	8006d94 <__errno>
 8003ad6:	0003      	movs	r3, r0
 8003ad8:	2216      	movs	r2, #22
 8003ada:	601a      	str	r2, [r3, #0]
	return -1;
 8003adc:	2301      	movs	r3, #1
 8003ade:	425b      	negs	r3, r3
}
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b002      	add	sp, #8
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <_exit>:

void _exit (int status)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003af0:	2301      	movs	r3, #1
 8003af2:	425a      	negs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	0011      	movs	r1, r2
 8003af8:	0018      	movs	r0, r3
 8003afa:	f7ff ffe5 	bl	8003ac8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003afe:	e7fe      	b.n	8003afe <_exit+0x16>

08003b00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	e00a      	b.n	8003b28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b12:	e000      	b.n	8003b16 <_read+0x16>
 8003b14:	bf00      	nop
 8003b16:	0001      	movs	r1, r0
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	60ba      	str	r2, [r7, #8]
 8003b1e:	b2ca      	uxtb	r2, r1
 8003b20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	3301      	adds	r3, #1
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	dbf0      	blt.n	8003b12 <_read+0x12>
	}

return len;
 8003b30:	687b      	ldr	r3, [r7, #4]
}
 8003b32:	0018      	movs	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	b006      	add	sp, #24
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b086      	sub	sp, #24
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	e009      	b.n	8003b60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	60ba      	str	r2, [r7, #8]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	0018      	movs	r0, r3
 8003b56:	e000      	b.n	8003b5a <_write+0x20>
 8003b58:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	617b      	str	r3, [r7, #20]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	dbf1      	blt.n	8003b4c <_write+0x12>
	}
	return len;
 8003b68:	687b      	ldr	r3, [r7, #4]
}
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	b006      	add	sp, #24
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <_close>:

int _close(int file)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b082      	sub	sp, #8
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
	return -1;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	425b      	negs	r3, r3
}
 8003b7e:	0018      	movs	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	b002      	add	sp, #8
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2280      	movs	r2, #128	; 0x80
 8003b94:	0192      	lsls	r2, r2, #6
 8003b96:	605a      	str	r2, [r3, #4]
	return 0;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b002      	add	sp, #8
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <_isatty>:

int _isatty(int file)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
	return 1;
 8003baa:	2301      	movs	r3, #1
}
 8003bac:	0018      	movs	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b002      	add	sp, #8
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
	return 0;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b004      	add	sp, #16
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bd4:	4a14      	ldr	r2, [pc, #80]	; (8003c28 <_sbrk+0x5c>)
 8003bd6:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <_sbrk+0x60>)
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003be0:	4b13      	ldr	r3, [pc, #76]	; (8003c30 <_sbrk+0x64>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d102      	bne.n	8003bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003be8:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <_sbrk+0x64>)
 8003bea:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <_sbrk+0x68>)
 8003bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bee:	4b10      	ldr	r3, [pc, #64]	; (8003c30 <_sbrk+0x64>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	18d3      	adds	r3, r2, r3
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d207      	bcs.n	8003c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bfc:	f003 f8ca 	bl	8006d94 <__errno>
 8003c00:	0003      	movs	r3, r0
 8003c02:	220c      	movs	r2, #12
 8003c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c06:	2301      	movs	r3, #1
 8003c08:	425b      	negs	r3, r3
 8003c0a:	e009      	b.n	8003c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c0c:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <_sbrk+0x64>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c12:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <_sbrk+0x64>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	18d2      	adds	r2, r2, r3
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <_sbrk+0x64>)
 8003c1c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
}
 8003c20:	0018      	movs	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b006      	add	sp, #24
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20002000 	.word	0x20002000
 8003c2c:	00000400 	.word	0x00000400
 8003c30:	200002c4 	.word	0x200002c4
 8003c34:	20000480 	.word	0x20000480

08003c38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <read_temperature>:
 * @params void
 *
 * @return void
 */
void read_temperature()
 {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
	 // Pull the enable pin low for temperature  sensor
	HAL_GPIO_WritePin(TEMP_SENSOR_PORT, TEMP_SENSOR_PIN, RESET);
 8003c48:	23a0      	movs	r3, #160	; 0xa0
 8003c4a:	05db      	lsls	r3, r3, #23
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	2110      	movs	r1, #16
 8003c50:	0018      	movs	r0, r3
 8003c52:	f000 fd39 	bl	80046c8 <HAL_GPIO_WritePin>
	 
	 //Flush the buffer of temperature sensor by sending FF command
	HAL_SPI_Transmit(&hspi1, tem_buf2, 2, 50);
 8003c56:	4912      	ldr	r1, [pc, #72]	; (8003ca0 <read_temperature+0x5c>)
 8003c58:	4812      	ldr	r0, [pc, #72]	; (8003ca4 <read_temperature+0x60>)
 8003c5a:	2332      	movs	r3, #50	; 0x32
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	f002 fb23 	bl	80062a8 <HAL_SPI_Transmit>
	 
	// command to set in continuous read mode
	HAL_SPI_Transmit(&hspi1, &tem_buf[0], 1, 50);
 8003c62:	4911      	ldr	r1, [pc, #68]	; (8003ca8 <read_temperature+0x64>)
 8003c64:	480f      	ldr	r0, [pc, #60]	; (8003ca4 <read_temperature+0x60>)
 8003c66:	2332      	movs	r3, #50	; 0x32
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f002 fb1d 	bl	80062a8 <HAL_SPI_Transmit>

	HAL_Delay(20);
 8003c6e:	2014      	movs	r0, #20
 8003c70:	f000 f910 	bl	8003e94 <HAL_Delay>

	// Read the temperature buffer
	HAL_SPI_Receive(&hspi1, tem_buf1, 2, 50);
 8003c74:	490d      	ldr	r1, [pc, #52]	; (8003cac <read_temperature+0x68>)
 8003c76:	480b      	ldr	r0, [pc, #44]	; (8003ca4 <read_temperature+0x60>)
 8003c78:	2332      	movs	r3, #50	; 0x32
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f002 fc6a 	bl	8006554 <HAL_SPI_Receive>

	HAL_Delay(20);
 8003c80:	2014      	movs	r0, #20
 8003c82:	f000 f907 	bl	8003e94 <HAL_Delay>

	// Stop the continuous read mode
	HAL_SPI_Transmit(&hspi1, &tem_buf[1], 1, 50);
 8003c86:	490a      	ldr	r1, [pc, #40]	; (8003cb0 <read_temperature+0x6c>)
 8003c88:	4806      	ldr	r0, [pc, #24]	; (8003ca4 <read_temperature+0x60>)
 8003c8a:	2332      	movs	r3, #50	; 0x32
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f002 fb0b 	bl	80062a8 <HAL_SPI_Transmit>

	HAL_Delay(20);
 8003c92:	2014      	movs	r0, #20
 8003c94:	f000 f8fe 	bl	8003e94 <HAL_Delay>
}
 8003c98:	46c0      	nop			; (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	20000038 	.word	0x20000038
 8003ca4:	200003bc 	.word	0x200003bc
 8003ca8:	20000034 	.word	0x20000034
 8003cac:	200002c8 	.word	0x200002c8
 8003cb0:	20000035 	.word	0x20000035

08003cb4 <callibrate_temperature_value>:
 * @params void
 *
 * @return void
 */
void callibrate_temperature_value(void)
 {
 8003cb4:	b5b0      	push	{r4, r5, r7, lr}
 8003cb6:	b096      	sub	sp, #88	; 0x58
 8003cb8:	af00      	add	r7, sp, #0

	float temp=0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	657b      	str	r3, [r7, #84]	; 0x54
	 
	 //start reading temperature
	 read_temperature();
 8003cbe:	f7ff ffc1 	bl	8003c44 <read_temperature>

	
	// the first byte is the decimal value of temperature
	// the second byte is the 0.0625 sensitive floating number of the measured temperature
	//second byte is masked for the last 5 bits as we are interested in the 13-bit temperature output
	temp = (tem_buf1[0]) + ((tem_buf1[1] && 0x01F) * 0.0625);
 8003cc2:	4b20      	ldr	r3, [pc, #128]	; (8003d44 <callibrate_temperature_value+0x90>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f7fe fac4 	bl	8002254 <__aeabi_i2d>
 8003ccc:	0004      	movs	r4, r0
 8003cce:	000d      	movs	r5, r1
 8003cd0:	4b1c      	ldr	r3, [pc, #112]	; (8003d44 <callibrate_temperature_value+0x90>)
 8003cd2:	785b      	ldrb	r3, [r3, #1]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <callibrate_temperature_value+0x2a>
 8003cd8:	2000      	movs	r0, #0
 8003cda:	491b      	ldr	r1, [pc, #108]	; (8003d48 <callibrate_temperature_value+0x94>)
 8003cdc:	e001      	b.n	8003ce2 <callibrate_temperature_value+0x2e>
 8003cde:	2000      	movs	r0, #0
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	4b19      	ldr	r3, [pc, #100]	; (8003d4c <callibrate_temperature_value+0x98>)
 8003ce6:	f7fd fc63 	bl	80015b0 <__aeabi_dmul>
 8003cea:	0002      	movs	r2, r0
 8003cec:	000b      	movs	r3, r1
 8003cee:	0020      	movs	r0, r4
 8003cf0:	0029      	movs	r1, r5
 8003cf2:	f7fc fced 	bl	80006d0 <__aeabi_dadd>
 8003cf6:	0002      	movs	r2, r0
 8003cf8:	000b      	movs	r3, r1
 8003cfa:	0010      	movs	r0, r2
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	f7fe fb47 	bl	8002390 <__aeabi_d2f>
 8003d02:	1c03      	adds	r3, r0, #0
 8003d04:	657b      	str	r3, [r7, #84]	; 0x54
	
	
		// Radio module Transmission, 
		//sends measured temperature over the radio module
		sprintf(myTxData, "temp= %f", temp);
 8003d06:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003d08:	f7fe fafa 	bl	8002300 <__aeabi_f2d>
 8003d0c:	0002      	movs	r2, r0
 8003d0e:	000b      	movs	r3, r1
 8003d10:	490f      	ldr	r1, [pc, #60]	; (8003d50 <callibrate_temperature_value+0x9c>)
 8003d12:	4810      	ldr	r0, [pc, #64]	; (8003d54 <callibrate_temperature_value+0xa0>)
 8003d14:	f003 fcf4 	bl	8007700 <siprintf>

		if (NRF24_write(myTxData, sizeof(myTxData))) 
 8003d18:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <callibrate_temperature_value+0xa0>)
 8003d1a:	2120      	movs	r1, #32
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f7fe fe83 	bl	8002a28 <NRF24_write>
 8003d22:	1e03      	subs	r3, r0, #0
 8003d24:	d00a      	beq.n	8003d3c <callibrate_temperature_value+0x88>
		{
			NRF24_read(AckPayload, 3);
 8003d26:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <callibrate_temperature_value+0xa4>)
 8003d28:	2103      	movs	r1, #3
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f7fe fedb 	bl	8002ae6 <NRF24_read>
			char myDataack[80];
			sprintf(myDataack, "AckPayload:  %s \r\n", AckPayload);
 8003d30:	4a09      	ldr	r2, [pc, #36]	; (8003d58 <callibrate_temperature_value+0xa4>)
 8003d32:	490a      	ldr	r1, [pc, #40]	; (8003d5c <callibrate_temperature_value+0xa8>)
 8003d34:	1d3b      	adds	r3, r7, #4
 8003d36:	0018      	movs	r0, r3
 8003d38:	f003 fce2 	bl	8007700 <siprintf>
		}
}
 8003d3c:	46c0      	nop			; (mov r8, r8)
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b016      	add	sp, #88	; 0x58
 8003d42:	bdb0      	pop	{r4, r5, r7, pc}
 8003d44:	200002c8 	.word	0x200002c8
 8003d48:	3ff00000 	.word	0x3ff00000
 8003d4c:	3fb00000 	.word	0x3fb00000
 8003d50:	08009cdc 	.word	0x08009cdc
 8003d54:	20000434 	.word	0x20000434
 8003d58:	2000032c 	.word	0x2000032c
 8003d5c:	08009ce8 	.word	0x08009ce8

08003d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003d60:	480d      	ldr	r0, [pc, #52]	; (8003d98 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003d62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d64:	480d      	ldr	r0, [pc, #52]	; (8003d9c <LoopForever+0x6>)
  ldr r1, =_edata
 8003d66:	490e      	ldr	r1, [pc, #56]	; (8003da0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d68:	4a0e      	ldr	r2, [pc, #56]	; (8003da4 <LoopForever+0xe>)
  movs r3, #0
 8003d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d6c:	e002      	b.n	8003d74 <LoopCopyDataInit>

08003d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d72:	3304      	adds	r3, #4

08003d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d78:	d3f9      	bcc.n	8003d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d7a:	4a0b      	ldr	r2, [pc, #44]	; (8003da8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d7c:	4c0b      	ldr	r4, [pc, #44]	; (8003dac <LoopForever+0x16>)
  movs r3, #0
 8003d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d80:	e001      	b.n	8003d86 <LoopFillZerobss>

08003d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d84:	3204      	adds	r2, #4

08003d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d88:	d3fb      	bcc.n	8003d82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003d8a:	f7ff ff55 	bl	8003c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d8e:	f003 f807 	bl	8006da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d92:	f7ff fd15 	bl	80037c0 <main>

08003d96 <LoopForever>:

LoopForever:
    b LoopForever
 8003d96:	e7fe      	b.n	8003d96 <LoopForever>
   ldr   r0, =_estack
 8003d98:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003da0:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8003da4:	0800a18c 	.word	0x0800a18c
  ldr r2, =_sbss
 8003da8:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8003dac:	20000480 	.word	0x20000480

08003db0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003db0:	e7fe      	b.n	8003db0 <ADC1_COMP_IRQHandler>
	...

08003db4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003dba:	1dfb      	adds	r3, r7, #7
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <HAL_Init+0x3c>)
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <HAL_Init+0x3c>)
 8003dc6:	2140      	movs	r1, #64	; 0x40
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dcc:	2000      	movs	r0, #0
 8003dce:	f000 f811 	bl	8003df4 <HAL_InitTick>
 8003dd2:	1e03      	subs	r3, r0, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003dd6:	1dfb      	adds	r3, r7, #7
 8003dd8:	2201      	movs	r2, #1
 8003dda:	701a      	strb	r2, [r3, #0]
 8003ddc:	e001      	b.n	8003de2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003dde:	f7ff fd41 	bl	8003864 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003de2:	1dfb      	adds	r3, r7, #7
 8003de4:	781b      	ldrb	r3, [r3, #0]
}
 8003de6:	0018      	movs	r0, r3
 8003de8:	46bd      	mov	sp, r7
 8003dea:	b002      	add	sp, #8
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	40022000 	.word	0x40022000

08003df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003df4:	b590      	push	{r4, r7, lr}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dfc:	4b14      	ldr	r3, [pc, #80]	; (8003e50 <HAL_InitTick+0x5c>)
 8003dfe:	681c      	ldr	r4, [r3, #0]
 8003e00:	4b14      	ldr	r3, [pc, #80]	; (8003e54 <HAL_InitTick+0x60>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	0019      	movs	r1, r3
 8003e06:	23fa      	movs	r3, #250	; 0xfa
 8003e08:	0098      	lsls	r0, r3, #2
 8003e0a:	f7fc f999 	bl	8000140 <__udivsi3>
 8003e0e:	0003      	movs	r3, r0
 8003e10:	0019      	movs	r1, r3
 8003e12:	0020      	movs	r0, r4
 8003e14:	f7fc f994 	bl	8000140 <__udivsi3>
 8003e18:	0003      	movs	r3, r0
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f000 f92f 	bl	800407e <HAL_SYSTICK_Config>
 8003e20:	1e03      	subs	r3, r0, #0
 8003e22:	d001      	beq.n	8003e28 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e00f      	b.n	8003e48 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d80b      	bhi.n	8003e46 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	2301      	movs	r3, #1
 8003e32:	425b      	negs	r3, r3
 8003e34:	2200      	movs	r2, #0
 8003e36:	0018      	movs	r0, r3
 8003e38:	f000 f8fc 	bl	8004034 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e3c:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <HAL_InitTick+0x64>)
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	e000      	b.n	8003e48 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
}
 8003e48:	0018      	movs	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b003      	add	sp, #12
 8003e4e:	bd90      	pop	{r4, r7, pc}
 8003e50:	20000030 	.word	0x20000030
 8003e54:	20000040 	.word	0x20000040
 8003e58:	2000003c 	.word	0x2000003c

08003e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e60:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_IncTick+0x1c>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	001a      	movs	r2, r3
 8003e66:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <HAL_IncTick+0x20>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	18d2      	adds	r2, r2, r3
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <HAL_IncTick+0x20>)
 8003e6e:	601a      	str	r2, [r3, #0]
}
 8003e70:	46c0      	nop			; (mov r8, r8)
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	20000040 	.word	0x20000040
 8003e7c:	20000454 	.word	0x20000454

08003e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  return uwTick;
 8003e84:	4b02      	ldr	r3, [pc, #8]	; (8003e90 <HAL_GetTick+0x10>)
 8003e86:	681b      	ldr	r3, [r3, #0]
}
 8003e88:	0018      	movs	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	20000454 	.word	0x20000454

08003e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e9c:	f7ff fff0 	bl	8003e80 <HAL_GetTick>
 8003ea0:	0003      	movs	r3, r0
 8003ea2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	d005      	beq.n	8003eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003eae:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <HAL_Delay+0x44>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	001a      	movs	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	189b      	adds	r3, r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	f7ff ffe0 	bl	8003e80 <HAL_GetTick>
 8003ec0:	0002      	movs	r2, r0
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d8f7      	bhi.n	8003ebc <HAL_Delay+0x28>
  {
  }
}
 8003ecc:	46c0      	nop			; (mov r8, r8)
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	b004      	add	sp, #16
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	20000040 	.word	0x20000040

08003edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	0002      	movs	r2, r0
 8003ee4:	1dfb      	adds	r3, r7, #7
 8003ee6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ee8:	1dfb      	adds	r3, r7, #7
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b7f      	cmp	r3, #127	; 0x7f
 8003eee:	d809      	bhi.n	8003f04 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ef0:	1dfb      	adds	r3, r7, #7
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	001a      	movs	r2, r3
 8003ef6:	231f      	movs	r3, #31
 8003ef8:	401a      	ands	r2, r3
 8003efa:	4b04      	ldr	r3, [pc, #16]	; (8003f0c <__NVIC_EnableIRQ+0x30>)
 8003efc:	2101      	movs	r1, #1
 8003efe:	4091      	lsls	r1, r2
 8003f00:	000a      	movs	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]
  }
}
 8003f04:	46c0      	nop			; (mov r8, r8)
 8003f06:	46bd      	mov	sp, r7
 8003f08:	b002      	add	sp, #8
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	e000e100 	.word	0xe000e100

08003f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f10:	b590      	push	{r4, r7, lr}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	0002      	movs	r2, r0
 8003f18:	6039      	str	r1, [r7, #0]
 8003f1a:	1dfb      	adds	r3, r7, #7
 8003f1c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f1e:	1dfb      	adds	r3, r7, #7
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b7f      	cmp	r3, #127	; 0x7f
 8003f24:	d828      	bhi.n	8003f78 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f26:	4a2f      	ldr	r2, [pc, #188]	; (8003fe4 <__NVIC_SetPriority+0xd4>)
 8003f28:	1dfb      	adds	r3, r7, #7
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	b25b      	sxtb	r3, r3
 8003f2e:	089b      	lsrs	r3, r3, #2
 8003f30:	33c0      	adds	r3, #192	; 0xc0
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	589b      	ldr	r3, [r3, r2]
 8003f36:	1dfa      	adds	r2, r7, #7
 8003f38:	7812      	ldrb	r2, [r2, #0]
 8003f3a:	0011      	movs	r1, r2
 8003f3c:	2203      	movs	r2, #3
 8003f3e:	400a      	ands	r2, r1
 8003f40:	00d2      	lsls	r2, r2, #3
 8003f42:	21ff      	movs	r1, #255	; 0xff
 8003f44:	4091      	lsls	r1, r2
 8003f46:	000a      	movs	r2, r1
 8003f48:	43d2      	mvns	r2, r2
 8003f4a:	401a      	ands	r2, r3
 8003f4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	019b      	lsls	r3, r3, #6
 8003f52:	22ff      	movs	r2, #255	; 0xff
 8003f54:	401a      	ands	r2, r3
 8003f56:	1dfb      	adds	r3, r7, #7
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	4003      	ands	r3, r0
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f64:	481f      	ldr	r0, [pc, #124]	; (8003fe4 <__NVIC_SetPriority+0xd4>)
 8003f66:	1dfb      	adds	r3, r7, #7
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	b25b      	sxtb	r3, r3
 8003f6c:	089b      	lsrs	r3, r3, #2
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	33c0      	adds	r3, #192	; 0xc0
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003f76:	e031      	b.n	8003fdc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f78:	4a1b      	ldr	r2, [pc, #108]	; (8003fe8 <__NVIC_SetPriority+0xd8>)
 8003f7a:	1dfb      	adds	r3, r7, #7
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	0019      	movs	r1, r3
 8003f80:	230f      	movs	r3, #15
 8003f82:	400b      	ands	r3, r1
 8003f84:	3b08      	subs	r3, #8
 8003f86:	089b      	lsrs	r3, r3, #2
 8003f88:	3306      	adds	r3, #6
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	18d3      	adds	r3, r2, r3
 8003f8e:	3304      	adds	r3, #4
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	1dfa      	adds	r2, r7, #7
 8003f94:	7812      	ldrb	r2, [r2, #0]
 8003f96:	0011      	movs	r1, r2
 8003f98:	2203      	movs	r2, #3
 8003f9a:	400a      	ands	r2, r1
 8003f9c:	00d2      	lsls	r2, r2, #3
 8003f9e:	21ff      	movs	r1, #255	; 0xff
 8003fa0:	4091      	lsls	r1, r2
 8003fa2:	000a      	movs	r2, r1
 8003fa4:	43d2      	mvns	r2, r2
 8003fa6:	401a      	ands	r2, r3
 8003fa8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	019b      	lsls	r3, r3, #6
 8003fae:	22ff      	movs	r2, #255	; 0xff
 8003fb0:	401a      	ands	r2, r3
 8003fb2:	1dfb      	adds	r3, r7, #7
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	2303      	movs	r3, #3
 8003fba:	4003      	ands	r3, r0
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fc0:	4809      	ldr	r0, [pc, #36]	; (8003fe8 <__NVIC_SetPriority+0xd8>)
 8003fc2:	1dfb      	adds	r3, r7, #7
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	001c      	movs	r4, r3
 8003fc8:	230f      	movs	r3, #15
 8003fca:	4023      	ands	r3, r4
 8003fcc:	3b08      	subs	r3, #8
 8003fce:	089b      	lsrs	r3, r3, #2
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	3306      	adds	r3, #6
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	18c3      	adds	r3, r0, r3
 8003fd8:	3304      	adds	r3, #4
 8003fda:	601a      	str	r2, [r3, #0]
}
 8003fdc:	46c0      	nop			; (mov r8, r8)
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	b003      	add	sp, #12
 8003fe2:	bd90      	pop	{r4, r7, pc}
 8003fe4:	e000e100 	.word	0xe000e100
 8003fe8:	e000ed00 	.word	0xe000ed00

08003fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	1e5a      	subs	r2, r3, #1
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	045b      	lsls	r3, r3, #17
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d301      	bcc.n	8004004 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004000:	2301      	movs	r3, #1
 8004002:	e010      	b.n	8004026 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004004:	4b0a      	ldr	r3, [pc, #40]	; (8004030 <SysTick_Config+0x44>)
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	3a01      	subs	r2, #1
 800400a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800400c:	2301      	movs	r3, #1
 800400e:	425b      	negs	r3, r3
 8004010:	2103      	movs	r1, #3
 8004012:	0018      	movs	r0, r3
 8004014:	f7ff ff7c 	bl	8003f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004018:	4b05      	ldr	r3, [pc, #20]	; (8004030 <SysTick_Config+0x44>)
 800401a:	2200      	movs	r2, #0
 800401c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800401e:	4b04      	ldr	r3, [pc, #16]	; (8004030 <SysTick_Config+0x44>)
 8004020:	2207      	movs	r2, #7
 8004022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004024:	2300      	movs	r3, #0
}
 8004026:	0018      	movs	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	b002      	add	sp, #8
 800402c:	bd80      	pop	{r7, pc}
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	e000e010 	.word	0xe000e010

08004034 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
 800403e:	210f      	movs	r1, #15
 8004040:	187b      	adds	r3, r7, r1
 8004042:	1c02      	adds	r2, r0, #0
 8004044:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	187b      	adds	r3, r7, r1
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	b25b      	sxtb	r3, r3
 800404e:	0011      	movs	r1, r2
 8004050:	0018      	movs	r0, r3
 8004052:	f7ff ff5d 	bl	8003f10 <__NVIC_SetPriority>
}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	46bd      	mov	sp, r7
 800405a:	b004      	add	sp, #16
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b082      	sub	sp, #8
 8004062:	af00      	add	r7, sp, #0
 8004064:	0002      	movs	r2, r0
 8004066:	1dfb      	adds	r3, r7, #7
 8004068:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800406a:	1dfb      	adds	r3, r7, #7
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	b25b      	sxtb	r3, r3
 8004070:	0018      	movs	r0, r3
 8004072:	f7ff ff33 	bl	8003edc <__NVIC_EnableIRQ>
}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	46bd      	mov	sp, r7
 800407a:	b002      	add	sp, #8
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	0018      	movs	r0, r3
 800408a:	f7ff ffaf 	bl	8003fec <SysTick_Config>
 800408e:	0003      	movs	r3, r0
}
 8004090:	0018      	movs	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	b002      	add	sp, #8
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0;
 800409e:	2300      	movs	r3, #0
 80040a0:	607b      	str	r3, [r7, #4]
   *           Note :The revId of the device can be retrieved via the HAL_GetREVID()
   *           function.
   *
   */

  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80040a2:	4b62      	ldr	r3, [pc, #392]	; (800422c <HAL_FLASH_IRQHandler+0x194>)
 80040a4:	699a      	ldr	r2, [r3, #24]
 80040a6:	2380      	movs	r3, #128	; 0x80
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	401a      	ands	r2, r3
 80040ac:	2380      	movs	r3, #128	; 0x80
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d035      	beq.n	8004120 <HAL_FLASH_IRQHandler+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80040b4:	4b5d      	ldr	r3, [pc, #372]	; (800422c <HAL_FLASH_IRQHandler+0x194>)
 80040b6:	699a      	ldr	r2, [r3, #24]
 80040b8:	2380      	movs	r3, #128	; 0x80
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80040be:	2380      	movs	r3, #128	; 0x80
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d02c      	beq.n	8004120 <HAL_FLASH_IRQHandler+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80040c6:	4b59      	ldr	r3, [pc, #356]	; (800422c <HAL_FLASH_IRQHandler+0x194>)
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	2380      	movs	r3, #128	; 0x80
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80040d0:	2380      	movs	r3, #128	; 0x80
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d023      	beq.n	8004120 <HAL_FLASH_IRQHandler+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80040d8:	4b54      	ldr	r3, [pc, #336]	; (800422c <HAL_FLASH_IRQHandler+0x194>)
 80040da:	699a      	ldr	r2, [r3, #24]
 80040dc:	2380      	movs	r3, #128	; 0x80
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80040e2:	2380      	movs	r3, #128	; 0x80
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d01a      	beq.n	8004120 <HAL_FLASH_IRQHandler+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80040ea:	4b50      	ldr	r3, [pc, #320]	; (800422c <HAL_FLASH_IRQHandler+0x194>)
 80040ec:	699a      	ldr	r2, [r3, #24]
 80040ee:	2380      	movs	r3, #128	; 0x80
 80040f0:	019b      	lsls	r3, r3, #6
 80040f2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80040f4:	2380      	movs	r3, #128	; 0x80
 80040f6:	019b      	lsls	r3, r3, #6
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d011      	beq.n	8004120 <HAL_FLASH_IRQHandler+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80040fc:	4b4b      	ldr	r3, [pc, #300]	; (800422c <HAL_FLASH_IRQHandler+0x194>)
 80040fe:	699a      	ldr	r2, [r3, #24]
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	029b      	lsls	r3, r3, #10
 8004104:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8004106:	2380      	movs	r3, #128	; 0x80
 8004108:	029b      	lsls	r3, r3, #10
 800410a:	429a      	cmp	r2, r3
 800410c:	d008      	beq.n	8004120 <HAL_FLASH_IRQHandler+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800410e:	4b47      	ldr	r3, [pc, #284]	; (800422c <HAL_FLASH_IRQHandler+0x194>)
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	2380      	movs	r3, #128	; 0x80
 8004114:	025b      	lsls	r3, r3, #9
 8004116:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8004118:	2380      	movs	r3, #128	; 0x80
 800411a:	025b      	lsls	r3, r3, #9
 800411c:	429a      	cmp	r2, r3
 800411e:	d118      	bne.n	8004152 <HAL_FLASH_IRQHandler+0xba>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8004120:	4b43      	ldr	r3, [pc, #268]	; (8004230 <HAL_FLASH_IRQHandler+0x198>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b01      	cmp	r3, #1
 8004128:	d107      	bne.n	800413a <HAL_FLASH_IRQHandler+0xa2>
    {
      /* Return the faulty sector */
      addresstmp = pFlash.Page;
 800412a:	4b41      	ldr	r3, [pc, #260]	; (8004230 <HAL_FLASH_IRQHandler+0x198>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	607b      	str	r3, [r7, #4]
      pFlash.Page = 0xFFFFFFFFU;
 8004130:	4b3f      	ldr	r3, [pc, #252]	; (8004230 <HAL_FLASH_IRQHandler+0x198>)
 8004132:	2201      	movs	r2, #1
 8004134:	4252      	negs	r2, r2
 8004136:	60da      	str	r2, [r3, #12]
 8004138:	e002      	b.n	8004140 <HAL_FLASH_IRQHandler+0xa8>
    }
    else
    {
      /* Return the faulty address */
      addresstmp = pFlash.Address;
 800413a:	4b3d      	ldr	r3, [pc, #244]	; (8004230 <HAL_FLASH_IRQHandler+0x198>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	607b      	str	r3, [r7, #4]
    }
    /* Save the Error code */
    FLASH_SetErrorCode();
 8004140:	f000 f88e 	bl	8004260 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	0018      	movs	r0, r3
 8004148:	f000 f882 	bl	8004250 <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800414c:	4b38      	ldr	r3, [pc, #224]	; (8004230 <HAL_FLASH_IRQHandler+0x198>)
 800414e:	2200      	movs	r2, #0
 8004150:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004152:	4b36      	ldr	r3, [pc, #216]	; (800422c <HAL_FLASH_IRQHandler+0x194>)
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	2202      	movs	r2, #2
 8004158:	4013      	ands	r3, r2
 800415a:	2b02      	cmp	r3, #2
 800415c:	d14e      	bne.n	80041fc <HAL_FLASH_IRQHandler+0x164>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800415e:	4b33      	ldr	r3, [pc, #204]	; (800422c <HAL_FLASH_IRQHandler+0x194>)
 8004160:	2202      	movs	r2, #2
 8004162:	619a      	str	r2, [r3, #24]
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8004164:	4b32      	ldr	r3, [pc, #200]	; (8004230 <HAL_FLASH_IRQHandler+0x198>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d046      	beq.n	80041fc <HAL_FLASH_IRQHandler+0x164>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 800416e:	4b30      	ldr	r3, [pc, #192]	; (8004230 <HAL_FLASH_IRQHandler+0x198>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b01      	cmp	r3, #1
 8004176:	d12f      	bne.n	80041d8 <HAL_FLASH_IRQHandler+0x140>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.NbPagesToErase--;
 8004178:	4b2d      	ldr	r3, [pc, #180]	; (8004230 <HAL_FLASH_IRQHandler+0x198>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	1e5a      	subs	r2, r3, #1
 800417e:	4b2c      	ldr	r3, [pc, #176]	; (8004230 <HAL_FLASH_IRQHandler+0x198>)
 8004180:	605a      	str	r2, [r3, #4]

        /* Check if there are still pages to erase */
        if(pFlash.NbPagesToErase != 0U)
 8004182:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <HAL_FLASH_IRQHandler+0x198>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d018      	beq.n	80041bc <HAL_FLASH_IRQHandler+0x124>
        {
          addresstmp = pFlash.Page;
 800418a:	4b29      	ldr	r3, [pc, #164]	; (8004230 <HAL_FLASH_IRQHandler+0x198>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	0018      	movs	r0, r3
 8004194:	f000 f854 	bl	8004240 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Page + FLASH_PAGE_SIZE;
 8004198:	4b25      	ldr	r3, [pc, #148]	; (8004230 <HAL_FLASH_IRQHandler+0x198>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	3380      	adds	r3, #128	; 0x80
 800419e:	607b      	str	r3, [r7, #4]
          pFlash.Page = addresstmp;
 80041a0:	4b23      	ldr	r3, [pc, #140]	; (8004230 <HAL_FLASH_IRQHandler+0x198>)
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	60da      	str	r2, [r3, #12]

          /* If the erase operation is completed, disable the ERASE Bit */
          CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 80041a6:	4b21      	ldr	r3, [pc, #132]	; (800422c <HAL_FLASH_IRQHandler+0x194>)
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	4b20      	ldr	r3, [pc, #128]	; (800422c <HAL_FLASH_IRQHandler+0x194>)
 80041ac:	4921      	ldr	r1, [pc, #132]	; (8004234 <HAL_FLASH_IRQHandler+0x19c>)
 80041ae:	400a      	ands	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]

          FLASH_PageErase(addresstmp);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	0018      	movs	r0, r3
 80041b6:	f000 f8ef 	bl	8004398 <FLASH_PageErase>
 80041ba:	e01f      	b.n	80041fc <HAL_FLASH_IRQHandler+0x164>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Page = addresstmp = 0xFFFFFFFFU;
 80041bc:	2301      	movs	r3, #1
 80041be:	425b      	negs	r3, r3
 80041c0:	607b      	str	r3, [r7, #4]
 80041c2:	4b1b      	ldr	r3, [pc, #108]	; (8004230 <HAL_FLASH_IRQHandler+0x198>)
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	60da      	str	r2, [r3, #12]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80041c8:	4b19      	ldr	r3, [pc, #100]	; (8004230 <HAL_FLASH_IRQHandler+0x198>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	0018      	movs	r0, r3
 80041d2:	f000 f835 	bl	8004240 <HAL_FLASH_EndOfOperationCallback>
 80041d6:	e011      	b.n	80041fc <HAL_FLASH_IRQHandler+0x164>
        }
      }
      else
      {
          /* If the program operation is completed, disable the PROG Bit */
          CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 80041d8:	4b14      	ldr	r3, [pc, #80]	; (800422c <HAL_FLASH_IRQHandler+0x194>)
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	4b13      	ldr	r3, [pc, #76]	; (800422c <HAL_FLASH_IRQHandler+0x194>)
 80041de:	2108      	movs	r1, #8
 80041e0:	438a      	bics	r2, r1
 80041e2:	605a      	str	r2, [r3, #4]

          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80041e4:	4b12      	ldr	r3, [pc, #72]	; (8004230 <HAL_FLASH_IRQHandler+0x198>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	0018      	movs	r0, r3
 80041ea:	f000 f829 	bl	8004240 <HAL_FLASH_EndOfOperationCallback>
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 80041ee:	4b10      	ldr	r3, [pc, #64]	; (8004230 <HAL_FLASH_IRQHandler+0x198>)
 80041f0:	2201      	movs	r2, #1
 80041f2:	4252      	negs	r2, r2
 80041f4:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80041f6:	4b0e      	ldr	r3, [pc, #56]	; (8004230 <HAL_FLASH_IRQHandler+0x198>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80041fc:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <HAL_FLASH_IRQHandler+0x198>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10e      	bne.n	8004224 <HAL_FLASH_IRQHandler+0x18c>
  {
    /* Operation is completed, disable the PROG and ERASE */
    CLEAR_BIT(FLASH->PECR, (FLASH_PECR_ERASE | FLASH_PECR_PROG));
 8004206:	4b09      	ldr	r3, [pc, #36]	; (800422c <HAL_FLASH_IRQHandler+0x194>)
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	4b08      	ldr	r3, [pc, #32]	; (800422c <HAL_FLASH_IRQHandler+0x194>)
 800420c:	490a      	ldr	r1, [pc, #40]	; (8004238 <HAL_FLASH_IRQHandler+0x1a0>)
 800420e:	400a      	ands	r2, r1
 8004210:	605a      	str	r2, [r3, #4]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8004212:	4b06      	ldr	r3, [pc, #24]	; (800422c <HAL_FLASH_IRQHandler+0x194>)
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	4b05      	ldr	r3, [pc, #20]	; (800422c <HAL_FLASH_IRQHandler+0x194>)
 8004218:	4908      	ldr	r1, [pc, #32]	; (800423c <HAL_FLASH_IRQHandler+0x1a4>)
 800421a:	400a      	ands	r2, r1
 800421c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800421e:	4b04      	ldr	r3, [pc, #16]	; (8004230 <HAL_FLASH_IRQHandler+0x198>)
 8004220:	2200      	movs	r2, #0
 8004222:	741a      	strb	r2, [r3, #16]
  }
}
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	46bd      	mov	sp, r7
 8004228:	b002      	add	sp, #8
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40022000 	.word	0x40022000
 8004230:	20000458 	.word	0x20000458
 8004234:	fffffdff 	.word	0xfffffdff
 8004238:	fffffdf7 	.word	0xfffffdf7
 800423c:	fffcffff 	.word	0xfffcffff

08004240 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8004248:	46c0      	nop			; (mov r8, r8)
 800424a:	46bd      	mov	sp, r7
 800424c:	b002      	add	sp, #8
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8004258:	46c0      	nop			; (mov r8, r8)
 800425a:	46bd      	mov	sp, r7
 800425c:	b002      	add	sp, #8
 800425e:	bd80      	pop	{r7, pc}

08004260 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800426a:	4b49      	ldr	r3, [pc, #292]	; (8004390 <FLASH_SetErrorCode+0x130>)
 800426c:	699a      	ldr	r2, [r3, #24]
 800426e:	2380      	movs	r3, #128	; 0x80
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	401a      	ands	r2, r3
 8004274:	2380      	movs	r3, #128	; 0x80
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	429a      	cmp	r2, r3
 800427a:	d10a      	bne.n	8004292 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800427c:	4b45      	ldr	r3, [pc, #276]	; (8004394 <FLASH_SetErrorCode+0x134>)
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	2202      	movs	r2, #2
 8004282:	431a      	orrs	r2, r3
 8004284:	4b43      	ldr	r3, [pc, #268]	; (8004394 <FLASH_SetErrorCode+0x134>)
 8004286:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2280      	movs	r2, #128	; 0x80
 800428c:	0052      	lsls	r2, r2, #1
 800428e:	4313      	orrs	r3, r2
 8004290:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8004292:	4b3f      	ldr	r3, [pc, #252]	; (8004390 <FLASH_SetErrorCode+0x130>)
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	2380      	movs	r3, #128	; 0x80
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	401a      	ands	r2, r3
 800429c:	2380      	movs	r3, #128	; 0x80
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d10a      	bne.n	80042ba <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80042a4:	4b3b      	ldr	r3, [pc, #236]	; (8004394 <FLASH_SetErrorCode+0x134>)
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	2201      	movs	r2, #1
 80042aa:	431a      	orrs	r2, r3
 80042ac:	4b39      	ldr	r3, [pc, #228]	; (8004394 <FLASH_SetErrorCode+0x134>)
 80042ae:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2280      	movs	r2, #128	; 0x80
 80042b4:	0092      	lsls	r2, r2, #2
 80042b6:	4313      	orrs	r3, r2
 80042b8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80042ba:	4b35      	ldr	r3, [pc, #212]	; (8004390 <FLASH_SetErrorCode+0x130>)
 80042bc:	699a      	ldr	r2, [r3, #24]
 80042be:	2380      	movs	r3, #128	; 0x80
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	401a      	ands	r2, r3
 80042c4:	2380      	movs	r3, #128	; 0x80
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d10a      	bne.n	80042e2 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80042cc:	4b31      	ldr	r3, [pc, #196]	; (8004394 <FLASH_SetErrorCode+0x134>)
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	2208      	movs	r2, #8
 80042d2:	431a      	orrs	r2, r3
 80042d4:	4b2f      	ldr	r3, [pc, #188]	; (8004394 <FLASH_SetErrorCode+0x134>)
 80042d6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2280      	movs	r2, #128	; 0x80
 80042dc:	00d2      	lsls	r2, r2, #3
 80042de:	4313      	orrs	r3, r2
 80042e0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80042e2:	4b2b      	ldr	r3, [pc, #172]	; (8004390 <FLASH_SetErrorCode+0x130>)
 80042e4:	699a      	ldr	r2, [r3, #24]
 80042e6:	2380      	movs	r3, #128	; 0x80
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	401a      	ands	r2, r3
 80042ec:	2380      	movs	r3, #128	; 0x80
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d10a      	bne.n	800430a <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80042f4:	4b27      	ldr	r3, [pc, #156]	; (8004394 <FLASH_SetErrorCode+0x134>)
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	2204      	movs	r2, #4
 80042fa:	431a      	orrs	r2, r3
 80042fc:	4b25      	ldr	r3, [pc, #148]	; (8004394 <FLASH_SetErrorCode+0x134>)
 80042fe:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2280      	movs	r2, #128	; 0x80
 8004304:	0112      	lsls	r2, r2, #4
 8004306:	4313      	orrs	r3, r2
 8004308:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800430a:	4b21      	ldr	r3, [pc, #132]	; (8004390 <FLASH_SetErrorCode+0x130>)
 800430c:	699a      	ldr	r2, [r3, #24]
 800430e:	2380      	movs	r3, #128	; 0x80
 8004310:	019b      	lsls	r3, r3, #6
 8004312:	401a      	ands	r2, r3
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	019b      	lsls	r3, r3, #6
 8004318:	429a      	cmp	r2, r3
 800431a:	d10a      	bne.n	8004332 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800431c:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <FLASH_SetErrorCode+0x134>)
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	2210      	movs	r2, #16
 8004322:	431a      	orrs	r2, r3
 8004324:	4b1b      	ldr	r3, [pc, #108]	; (8004394 <FLASH_SetErrorCode+0x134>)
 8004326:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2280      	movs	r2, #128	; 0x80
 800432c:	0192      	lsls	r2, r2, #6
 800432e:	4313      	orrs	r3, r2
 8004330:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8004332:	4b17      	ldr	r3, [pc, #92]	; (8004390 <FLASH_SetErrorCode+0x130>)
 8004334:	699a      	ldr	r2, [r3, #24]
 8004336:	2380      	movs	r3, #128	; 0x80
 8004338:	029b      	lsls	r3, r3, #10
 800433a:	401a      	ands	r2, r3
 800433c:	2380      	movs	r3, #128	; 0x80
 800433e:	029b      	lsls	r3, r3, #10
 8004340:	429a      	cmp	r2, r3
 8004342:	d109      	bne.n	8004358 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8004344:	4b13      	ldr	r3, [pc, #76]	; (8004394 <FLASH_SetErrorCode+0x134>)
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	2220      	movs	r2, #32
 800434a:	431a      	orrs	r2, r3
 800434c:	4b11      	ldr	r3, [pc, #68]	; (8004394 <FLASH_SetErrorCode+0x134>)
 800434e:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	4313      	orrs	r3, r2
 8004356:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8004358:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <FLASH_SetErrorCode+0x130>)
 800435a:	699a      	ldr	r2, [r3, #24]
 800435c:	2380      	movs	r3, #128	; 0x80
 800435e:	025b      	lsls	r3, r3, #9
 8004360:	401a      	ands	r2, r3
 8004362:	2380      	movs	r3, #128	; 0x80
 8004364:	025b      	lsls	r3, r3, #9
 8004366:	429a      	cmp	r2, r3
 8004368:	d10a      	bne.n	8004380 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800436a:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <FLASH_SetErrorCode+0x134>)
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	2240      	movs	r2, #64	; 0x40
 8004370:	431a      	orrs	r2, r3
 8004372:	4b08      	ldr	r3, [pc, #32]	; (8004394 <FLASH_SetErrorCode+0x134>)
 8004374:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2280      	movs	r2, #128	; 0x80
 800437a:	0252      	lsls	r2, r2, #9
 800437c:	4313      	orrs	r3, r2
 800437e:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004380:	4b03      	ldr	r3, [pc, #12]	; (8004390 <FLASH_SetErrorCode+0x130>)
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	619a      	str	r2, [r3, #24]
}  
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	46bd      	mov	sp, r7
 800438a:	b002      	add	sp, #8
 800438c:	bd80      	pop	{r7, pc}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	40022000 	.word	0x40022000
 8004394:	20000458 	.word	0x20000458

08004398 <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load 
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043a0:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <FLASH_PageErase+0x3c>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 80043a6:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <FLASH_PageErase+0x40>)
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <FLASH_PageErase+0x40>)
 80043ac:	2180      	movs	r1, #128	; 0x80
 80043ae:	0089      	lsls	r1, r1, #2
 80043b0:	430a      	orrs	r2, r1
 80043b2:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 80043b4:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <FLASH_PageErase+0x40>)
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <FLASH_PageErase+0x40>)
 80043ba:	2108      	movs	r1, #8
 80043bc:	430a      	orrs	r2, r1
 80043be:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	227f      	movs	r2, #127	; 0x7f
 80043c4:	4393      	bics	r3, r2
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b002      	add	sp, #8
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	20000458 	.word	0x20000458
 80043d8:	40022000 	.word	0x40022000

080043dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80043f2:	e14f      	b.n	8004694 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2101      	movs	r1, #1
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4091      	lsls	r1, r2
 80043fe:	000a      	movs	r2, r1
 8004400:	4013      	ands	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d100      	bne.n	800440c <HAL_GPIO_Init+0x30>
 800440a:	e140      	b.n	800468e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d00b      	beq.n	800442c <HAL_GPIO_Init+0x50>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d007      	beq.n	800442c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004420:	2b11      	cmp	r3, #17
 8004422:	d003      	beq.n	800442c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b12      	cmp	r3, #18
 800442a:	d130      	bne.n	800448e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	2203      	movs	r2, #3
 8004438:	409a      	lsls	r2, r3
 800443a:	0013      	movs	r3, r2
 800443c:	43da      	mvns	r2, r3
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	4013      	ands	r3, r2
 8004442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	409a      	lsls	r2, r3
 800444e:	0013      	movs	r3, r2
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004462:	2201      	movs	r2, #1
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	409a      	lsls	r2, r3
 8004468:	0013      	movs	r3, r2
 800446a:	43da      	mvns	r2, r3
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	4013      	ands	r3, r2
 8004470:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	091b      	lsrs	r3, r3, #4
 8004478:	2201      	movs	r2, #1
 800447a:	401a      	ands	r2, r3
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	409a      	lsls	r2, r3
 8004480:	0013      	movs	r3, r2
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	2203      	movs	r2, #3
 800449a:	409a      	lsls	r2, r3
 800449c:	0013      	movs	r3, r2
 800449e:	43da      	mvns	r2, r3
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4013      	ands	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	409a      	lsls	r2, r3
 80044b0:	0013      	movs	r3, r2
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d003      	beq.n	80044ce <HAL_GPIO_Init+0xf2>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b12      	cmp	r3, #18
 80044cc:	d123      	bne.n	8004516 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	08da      	lsrs	r2, r3, #3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3208      	adds	r2, #8
 80044d6:	0092      	lsls	r2, r2, #2
 80044d8:	58d3      	ldr	r3, [r2, r3]
 80044da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2207      	movs	r2, #7
 80044e0:	4013      	ands	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	220f      	movs	r2, #15
 80044e6:	409a      	lsls	r2, r3
 80044e8:	0013      	movs	r3, r2
 80044ea:	43da      	mvns	r2, r3
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4013      	ands	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2107      	movs	r1, #7
 80044fa:	400b      	ands	r3, r1
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	409a      	lsls	r2, r3
 8004500:	0013      	movs	r3, r2
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	08da      	lsrs	r2, r3, #3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3208      	adds	r2, #8
 8004510:	0092      	lsls	r2, r2, #2
 8004512:	6939      	ldr	r1, [r7, #16]
 8004514:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	2203      	movs	r2, #3
 8004522:	409a      	lsls	r2, r3
 8004524:	0013      	movs	r3, r2
 8004526:	43da      	mvns	r2, r3
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	4013      	ands	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2203      	movs	r2, #3
 8004534:	401a      	ands	r2, r3
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	409a      	lsls	r2, r3
 800453c:	0013      	movs	r3, r2
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	2380      	movs	r3, #128	; 0x80
 8004550:	055b      	lsls	r3, r3, #21
 8004552:	4013      	ands	r3, r2
 8004554:	d100      	bne.n	8004558 <HAL_GPIO_Init+0x17c>
 8004556:	e09a      	b.n	800468e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004558:	4b54      	ldr	r3, [pc, #336]	; (80046ac <HAL_GPIO_Init+0x2d0>)
 800455a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800455c:	4b53      	ldr	r3, [pc, #332]	; (80046ac <HAL_GPIO_Init+0x2d0>)
 800455e:	2101      	movs	r1, #1
 8004560:	430a      	orrs	r2, r1
 8004562:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004564:	4a52      	ldr	r2, [pc, #328]	; (80046b0 <HAL_GPIO_Init+0x2d4>)
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	089b      	lsrs	r3, r3, #2
 800456a:	3302      	adds	r3, #2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	589b      	ldr	r3, [r3, r2]
 8004570:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2203      	movs	r2, #3
 8004576:	4013      	ands	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	220f      	movs	r2, #15
 800457c:	409a      	lsls	r2, r3
 800457e:	0013      	movs	r3, r2
 8004580:	43da      	mvns	r2, r3
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	4013      	ands	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	23a0      	movs	r3, #160	; 0xa0
 800458c:	05db      	lsls	r3, r3, #23
 800458e:	429a      	cmp	r2, r3
 8004590:	d019      	beq.n	80045c6 <HAL_GPIO_Init+0x1ea>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a47      	ldr	r2, [pc, #284]	; (80046b4 <HAL_GPIO_Init+0x2d8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d013      	beq.n	80045c2 <HAL_GPIO_Init+0x1e6>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a46      	ldr	r2, [pc, #280]	; (80046b8 <HAL_GPIO_Init+0x2dc>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00d      	beq.n	80045be <HAL_GPIO_Init+0x1e2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a45      	ldr	r2, [pc, #276]	; (80046bc <HAL_GPIO_Init+0x2e0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d007      	beq.n	80045ba <HAL_GPIO_Init+0x1de>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a44      	ldr	r2, [pc, #272]	; (80046c0 <HAL_GPIO_Init+0x2e4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d101      	bne.n	80045b6 <HAL_GPIO_Init+0x1da>
 80045b2:	2305      	movs	r3, #5
 80045b4:	e008      	b.n	80045c8 <HAL_GPIO_Init+0x1ec>
 80045b6:	2306      	movs	r3, #6
 80045b8:	e006      	b.n	80045c8 <HAL_GPIO_Init+0x1ec>
 80045ba:	2303      	movs	r3, #3
 80045bc:	e004      	b.n	80045c8 <HAL_GPIO_Init+0x1ec>
 80045be:	2302      	movs	r3, #2
 80045c0:	e002      	b.n	80045c8 <HAL_GPIO_Init+0x1ec>
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <HAL_GPIO_Init+0x1ec>
 80045c6:	2300      	movs	r3, #0
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	2103      	movs	r1, #3
 80045cc:	400a      	ands	r2, r1
 80045ce:	0092      	lsls	r2, r2, #2
 80045d0:	4093      	lsls	r3, r2
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045d8:	4935      	ldr	r1, [pc, #212]	; (80046b0 <HAL_GPIO_Init+0x2d4>)
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	089b      	lsrs	r3, r3, #2
 80045de:	3302      	adds	r3, #2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045e6:	4b37      	ldr	r3, [pc, #220]	; (80046c4 <HAL_GPIO_Init+0x2e8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	43da      	mvns	r2, r3
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	4013      	ands	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	2380      	movs	r3, #128	; 0x80
 80045fc:	025b      	lsls	r3, r3, #9
 80045fe:	4013      	ands	r3, r2
 8004600:	d003      	beq.n	800460a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800460a:	4b2e      	ldr	r3, [pc, #184]	; (80046c4 <HAL_GPIO_Init+0x2e8>)
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004610:	4b2c      	ldr	r3, [pc, #176]	; (80046c4 <HAL_GPIO_Init+0x2e8>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	43da      	mvns	r2, r3
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	4013      	ands	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	2380      	movs	r3, #128	; 0x80
 8004626:	029b      	lsls	r3, r3, #10
 8004628:	4013      	ands	r3, r2
 800462a:	d003      	beq.n	8004634 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004634:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <HAL_GPIO_Init+0x2e8>)
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800463a:	4b22      	ldr	r3, [pc, #136]	; (80046c4 <HAL_GPIO_Init+0x2e8>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	43da      	mvns	r2, r3
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	4013      	ands	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	2380      	movs	r3, #128	; 0x80
 8004650:	035b      	lsls	r3, r3, #13
 8004652:	4013      	ands	r3, r2
 8004654:	d003      	beq.n	800465e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800465e:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <HAL_GPIO_Init+0x2e8>)
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004664:	4b17      	ldr	r3, [pc, #92]	; (80046c4 <HAL_GPIO_Init+0x2e8>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	43da      	mvns	r2, r3
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	4013      	ands	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	2380      	movs	r3, #128	; 0x80
 800467a:	039b      	lsls	r3, r3, #14
 800467c:	4013      	ands	r3, r2
 800467e:	d003      	beq.n	8004688 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004688:	4b0e      	ldr	r3, [pc, #56]	; (80046c4 <HAL_GPIO_Init+0x2e8>)
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	3301      	adds	r3, #1
 8004692:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	40da      	lsrs	r2, r3
 800469c:	1e13      	subs	r3, r2, #0
 800469e:	d000      	beq.n	80046a2 <HAL_GPIO_Init+0x2c6>
 80046a0:	e6a8      	b.n	80043f4 <HAL_GPIO_Init+0x18>
  }
}
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	46c0      	nop			; (mov r8, r8)
 80046a6:	46bd      	mov	sp, r7
 80046a8:	b006      	add	sp, #24
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40021000 	.word	0x40021000
 80046b0:	40010000 	.word	0x40010000
 80046b4:	50000400 	.word	0x50000400
 80046b8:	50000800 	.word	0x50000800
 80046bc:	50000c00 	.word	0x50000c00
 80046c0:	50001c00 	.word	0x50001c00
 80046c4:	40010400 	.word	0x40010400

080046c8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	0008      	movs	r0, r1
 80046d2:	0011      	movs	r1, r2
 80046d4:	1cbb      	adds	r3, r7, #2
 80046d6:	1c02      	adds	r2, r0, #0
 80046d8:	801a      	strh	r2, [r3, #0]
 80046da:	1c7b      	adds	r3, r7, #1
 80046dc:	1c0a      	adds	r2, r1, #0
 80046de:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046e0:	1c7b      	adds	r3, r7, #1
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d004      	beq.n	80046f2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046e8:	1cbb      	adds	r3, r7, #2
 80046ea:	881a      	ldrh	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80046f0:	e003      	b.n	80046fa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80046f2:	1cbb      	adds	r3, r7, #2
 80046f4:	881a      	ldrh	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046fa:	46c0      	nop			; (mov r8, r8)
 80046fc:	46bd      	mov	sp, r7
 80046fe:	b002      	add	sp, #8
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b084      	sub	sp, #16
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	000a      	movs	r2, r1
 800470c:	1cbb      	adds	r3, r7, #2
 800470e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004716:	1cbb      	adds	r3, r7, #2
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4013      	ands	r3, r2
 800471e:	041a      	lsls	r2, r3, #16
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	43db      	mvns	r3, r3
 8004724:	1cb9      	adds	r1, r7, #2
 8004726:	8809      	ldrh	r1, [r1, #0]
 8004728:	400b      	ands	r3, r1
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	619a      	str	r2, [r3, #24]
}
 8004730:	46c0      	nop			; (mov r8, r8)
 8004732:	46bd      	mov	sp, r7
 8004734:	b004      	add	sp, #16
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e082      	b.n	8004850 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2241      	movs	r2, #65	; 0x41
 800474e:	5c9b      	ldrb	r3, [r3, r2]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d107      	bne.n	8004766 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2240      	movs	r2, #64	; 0x40
 800475a:	2100      	movs	r1, #0
 800475c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	0018      	movs	r0, r3
 8004762:	f7ff f8ab 	bl	80038bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2241      	movs	r2, #65	; 0x41
 800476a:	2124      	movs	r1, #36	; 0x24
 800476c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2101      	movs	r1, #1
 800477a:	438a      	bics	r2, r1
 800477c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4934      	ldr	r1, [pc, #208]	; (8004858 <HAL_I2C_Init+0x120>)
 8004788:	400a      	ands	r2, r1
 800478a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4931      	ldr	r1, [pc, #196]	; (800485c <HAL_I2C_Init+0x124>)
 8004798:	400a      	ands	r2, r1
 800479a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d108      	bne.n	80047b6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2180      	movs	r1, #128	; 0x80
 80047ae:	0209      	lsls	r1, r1, #8
 80047b0:	430a      	orrs	r2, r1
 80047b2:	609a      	str	r2, [r3, #8]
 80047b4:	e007      	b.n	80047c6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2184      	movs	r1, #132	; 0x84
 80047c0:	0209      	lsls	r1, r1, #8
 80047c2:	430a      	orrs	r2, r1
 80047c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d104      	bne.n	80047d8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2280      	movs	r2, #128	; 0x80
 80047d4:	0112      	lsls	r2, r2, #4
 80047d6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	491f      	ldr	r1, [pc, #124]	; (8004860 <HAL_I2C_Init+0x128>)
 80047e4:	430a      	orrs	r2, r1
 80047e6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	491a      	ldr	r1, [pc, #104]	; (800485c <HAL_I2C_Init+0x124>)
 80047f4:	400a      	ands	r2, r1
 80047f6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	431a      	orrs	r2, r3
 8004802:	0011      	movs	r1, r2
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	021a      	lsls	r2, r3, #8
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69d9      	ldr	r1, [r3, #28]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1a      	ldr	r2, [r3, #32]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2101      	movs	r1, #1
 800482e:	430a      	orrs	r2, r1
 8004830:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2241      	movs	r2, #65	; 0x41
 800483c:	2120      	movs	r1, #32
 800483e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2242      	movs	r2, #66	; 0x42
 800484a:	2100      	movs	r1, #0
 800484c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	0018      	movs	r0, r3
 8004852:	46bd      	mov	sp, r7
 8004854:	b002      	add	sp, #8
 8004856:	bd80      	pop	{r7, pc}
 8004858:	f0ffffff 	.word	0xf0ffffff
 800485c:	ffff7fff 	.word	0xffff7fff
 8004860:	02008000 	.word	0x02008000

08004864 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004864:	b590      	push	{r4, r7, lr}
 8004866:	b089      	sub	sp, #36	; 0x24
 8004868:	af02      	add	r7, sp, #8
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	0008      	movs	r0, r1
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	0019      	movs	r1, r3
 8004872:	230a      	movs	r3, #10
 8004874:	18fb      	adds	r3, r7, r3
 8004876:	1c02      	adds	r2, r0, #0
 8004878:	801a      	strh	r2, [r3, #0]
 800487a:	2308      	movs	r3, #8
 800487c:	18fb      	adds	r3, r7, r3
 800487e:	1c0a      	adds	r2, r1, #0
 8004880:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2241      	movs	r2, #65	; 0x41
 8004886:	5c9b      	ldrb	r3, [r3, r2]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b20      	cmp	r3, #32
 800488c:	d000      	beq.n	8004890 <HAL_I2C_Master_Transmit+0x2c>
 800488e:	e0e7      	b.n	8004a60 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2240      	movs	r2, #64	; 0x40
 8004894:	5c9b      	ldrb	r3, [r3, r2]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_I2C_Master_Transmit+0x3a>
 800489a:	2302      	movs	r3, #2
 800489c:	e0e1      	b.n	8004a62 <HAL_I2C_Master_Transmit+0x1fe>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2240      	movs	r2, #64	; 0x40
 80048a2:	2101      	movs	r1, #1
 80048a4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048a6:	f7ff faeb 	bl	8003e80 <HAL_GetTick>
 80048aa:	0003      	movs	r3, r0
 80048ac:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048ae:	2380      	movs	r3, #128	; 0x80
 80048b0:	0219      	lsls	r1, r3, #8
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	2319      	movs	r3, #25
 80048ba:	2201      	movs	r2, #1
 80048bc:	f000 fa04 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 80048c0:	1e03      	subs	r3, r0, #0
 80048c2:	d001      	beq.n	80048c8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0cc      	b.n	8004a62 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2241      	movs	r2, #65	; 0x41
 80048cc:	2121      	movs	r1, #33	; 0x21
 80048ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2242      	movs	r2, #66	; 0x42
 80048d4:	2110      	movs	r1, #16
 80048d6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2208      	movs	r2, #8
 80048e8:	18ba      	adds	r2, r7, r2
 80048ea:	8812      	ldrh	r2, [r2, #0]
 80048ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2bff      	cmp	r3, #255	; 0xff
 80048fc:	d911      	bls.n	8004922 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	22ff      	movs	r2, #255	; 0xff
 8004902:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004908:	b2da      	uxtb	r2, r3
 800490a:	2380      	movs	r3, #128	; 0x80
 800490c:	045c      	lsls	r4, r3, #17
 800490e:	230a      	movs	r3, #10
 8004910:	18fb      	adds	r3, r7, r3
 8004912:	8819      	ldrh	r1, [r3, #0]
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	4b55      	ldr	r3, [pc, #340]	; (8004a6c <HAL_I2C_Master_Transmit+0x208>)
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	0023      	movs	r3, r4
 800491c:	f000 fb60 	bl	8004fe0 <I2C_TransferConfig>
 8004920:	e075      	b.n	8004a0e <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004930:	b2da      	uxtb	r2, r3
 8004932:	2380      	movs	r3, #128	; 0x80
 8004934:	049c      	lsls	r4, r3, #18
 8004936:	230a      	movs	r3, #10
 8004938:	18fb      	adds	r3, r7, r3
 800493a:	8819      	ldrh	r1, [r3, #0]
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	4b4b      	ldr	r3, [pc, #300]	; (8004a6c <HAL_I2C_Master_Transmit+0x208>)
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	0023      	movs	r3, r4
 8004944:	f000 fb4c 	bl	8004fe0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004948:	e061      	b.n	8004a0e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	0018      	movs	r0, r3
 8004952:	f000 f9f8 	bl	8004d46 <I2C_WaitOnTXISFlagUntilTimeout>
 8004956:	1e03      	subs	r3, r0, #0
 8004958:	d001      	beq.n	800495e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e081      	b.n	8004a62 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	781a      	ldrb	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004978:	b29b      	uxth	r3, r3
 800497a:	3b01      	subs	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004986:	3b01      	subs	r3, #1
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d03a      	beq.n	8004a0e <HAL_I2C_Master_Transmit+0x1aa>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499c:	2b00      	cmp	r3, #0
 800499e:	d136      	bne.n	8004a0e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80049a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	0013      	movs	r3, r2
 80049aa:	2200      	movs	r2, #0
 80049ac:	2180      	movs	r1, #128	; 0x80
 80049ae:	f000 f98b 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 80049b2:	1e03      	subs	r3, r0, #0
 80049b4:	d001      	beq.n	80049ba <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e053      	b.n	8004a62 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2bff      	cmp	r3, #255	; 0xff
 80049c2:	d911      	bls.n	80049e8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	22ff      	movs	r2, #255	; 0xff
 80049c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	2380      	movs	r3, #128	; 0x80
 80049d2:	045c      	lsls	r4, r3, #17
 80049d4:	230a      	movs	r3, #10
 80049d6:	18fb      	adds	r3, r7, r3
 80049d8:	8819      	ldrh	r1, [r3, #0]
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	2300      	movs	r3, #0
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	0023      	movs	r3, r4
 80049e2:	f000 fafd 	bl	8004fe0 <I2C_TransferConfig>
 80049e6:	e012      	b.n	8004a0e <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	2380      	movs	r3, #128	; 0x80
 80049fa:	049c      	lsls	r4, r3, #18
 80049fc:	230a      	movs	r3, #10
 80049fe:	18fb      	adds	r3, r7, r3
 8004a00:	8819      	ldrh	r1, [r3, #0]
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	2300      	movs	r3, #0
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	0023      	movs	r3, r4
 8004a0a:	f000 fae9 	bl	8004fe0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d198      	bne.n	800494a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f000 f9d0 	bl	8004dc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a24:	1e03      	subs	r3, r0, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e01a      	b.n	8004a62 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2220      	movs	r2, #32
 8004a32:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	490c      	ldr	r1, [pc, #48]	; (8004a70 <HAL_I2C_Master_Transmit+0x20c>)
 8004a40:	400a      	ands	r2, r1
 8004a42:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2241      	movs	r2, #65	; 0x41
 8004a48:	2120      	movs	r1, #32
 8004a4a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2242      	movs	r2, #66	; 0x42
 8004a50:	2100      	movs	r1, #0
 8004a52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2240      	movs	r2, #64	; 0x40
 8004a58:	2100      	movs	r1, #0
 8004a5a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	e000      	b.n	8004a62 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004a60:	2302      	movs	r3, #2
  }
}
 8004a62:	0018      	movs	r0, r3
 8004a64:	46bd      	mov	sp, r7
 8004a66:	b007      	add	sp, #28
 8004a68:	bd90      	pop	{r4, r7, pc}
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	80002000 	.word	0x80002000
 8004a70:	fe00e800 	.word	0xfe00e800

08004a74 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8004a74:	b590      	push	{r4, r7, lr}
 8004a76:	b089      	sub	sp, #36	; 0x24
 8004a78:	af02      	add	r7, sp, #8
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	0008      	movs	r0, r1
 8004a7e:	607a      	str	r2, [r7, #4]
 8004a80:	0019      	movs	r1, r3
 8004a82:	230a      	movs	r3, #10
 8004a84:	18fb      	adds	r3, r7, r3
 8004a86:	1c02      	adds	r2, r0, #0
 8004a88:	801a      	strh	r2, [r3, #0]
 8004a8a:	2308      	movs	r3, #8
 8004a8c:	18fb      	adds	r3, r7, r3
 8004a8e:	1c0a      	adds	r2, r1, #0
 8004a90:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2241      	movs	r2, #65	; 0x41
 8004a96:	5c9b      	ldrb	r3, [r3, r2]
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b20      	cmp	r3, #32
 8004a9c:	d000      	beq.n	8004aa0 <HAL_I2C_Master_Receive+0x2c>
 8004a9e:	e0e8      	b.n	8004c72 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2240      	movs	r2, #64	; 0x40
 8004aa4:	5c9b      	ldrb	r3, [r3, r2]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <HAL_I2C_Master_Receive+0x3a>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e0e2      	b.n	8004c74 <HAL_I2C_Master_Receive+0x200>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2240      	movs	r2, #64	; 0x40
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ab6:	f7ff f9e3 	bl	8003e80 <HAL_GetTick>
 8004aba:	0003      	movs	r3, r0
 8004abc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004abe:	2380      	movs	r3, #128	; 0x80
 8004ac0:	0219      	lsls	r1, r3, #8
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	2319      	movs	r3, #25
 8004aca:	2201      	movs	r2, #1
 8004acc:	f000 f8fc 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8004ad0:	1e03      	subs	r3, r0, #0
 8004ad2:	d001      	beq.n	8004ad8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e0cd      	b.n	8004c74 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2241      	movs	r2, #65	; 0x41
 8004adc:	2122      	movs	r1, #34	; 0x22
 8004ade:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2242      	movs	r2, #66	; 0x42
 8004ae4:	2110      	movs	r1, #16
 8004ae6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2208      	movs	r2, #8
 8004af8:	18ba      	adds	r2, r7, r2
 8004afa:	8812      	ldrh	r2, [r2, #0]
 8004afc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2bff      	cmp	r3, #255	; 0xff
 8004b0c:	d911      	bls.n	8004b32 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	22ff      	movs	r2, #255	; 0xff
 8004b12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	2380      	movs	r3, #128	; 0x80
 8004b1c:	045c      	lsls	r4, r3, #17
 8004b1e:	230a      	movs	r3, #10
 8004b20:	18fb      	adds	r3, r7, r3
 8004b22:	8819      	ldrh	r1, [r3, #0]
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	4b55      	ldr	r3, [pc, #340]	; (8004c7c <HAL_I2C_Master_Receive+0x208>)
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	0023      	movs	r3, r4
 8004b2c:	f000 fa58 	bl	8004fe0 <I2C_TransferConfig>
 8004b30:	e076      	b.n	8004c20 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	2380      	movs	r3, #128	; 0x80
 8004b44:	049c      	lsls	r4, r3, #18
 8004b46:	230a      	movs	r3, #10
 8004b48:	18fb      	adds	r3, r7, r3
 8004b4a:	8819      	ldrh	r1, [r3, #0]
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	4b4b      	ldr	r3, [pc, #300]	; (8004c7c <HAL_I2C_Master_Receive+0x208>)
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	0023      	movs	r3, r4
 8004b54:	f000 fa44 	bl	8004fe0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004b58:	e062      	b.n	8004c20 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	0018      	movs	r0, r3
 8004b62:	f000 f96b 	bl	8004e3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b66:	1e03      	subs	r3, r0, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e082      	b.n	8004c74 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	b2d2      	uxtb	r2, r2
 8004b7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d03a      	beq.n	8004c20 <HAL_I2C_Master_Receive+0x1ac>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d136      	bne.n	8004c20 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	0013      	movs	r3, r2
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2180      	movs	r1, #128	; 0x80
 8004bc0:	f000 f882 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8004bc4:	1e03      	subs	r3, r0, #0
 8004bc6:	d001      	beq.n	8004bcc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e053      	b.n	8004c74 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	2bff      	cmp	r3, #255	; 0xff
 8004bd4:	d911      	bls.n	8004bfa <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	22ff      	movs	r2, #255	; 0xff
 8004bda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	2380      	movs	r3, #128	; 0x80
 8004be4:	045c      	lsls	r4, r3, #17
 8004be6:	230a      	movs	r3, #10
 8004be8:	18fb      	adds	r3, r7, r3
 8004bea:	8819      	ldrh	r1, [r3, #0]
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	2300      	movs	r3, #0
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	0023      	movs	r3, r4
 8004bf4:	f000 f9f4 	bl	8004fe0 <I2C_TransferConfig>
 8004bf8:	e012      	b.n	8004c20 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	2380      	movs	r3, #128	; 0x80
 8004c0c:	049c      	lsls	r4, r3, #18
 8004c0e:	230a      	movs	r3, #10
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	8819      	ldrh	r1, [r3, #0]
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	2300      	movs	r3, #0
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	0023      	movs	r3, r4
 8004c1c:	f000 f9e0 	bl	8004fe0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d197      	bne.n	8004b5a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	0018      	movs	r0, r3
 8004c32:	f000 f8c7 	bl	8004dc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c36:	1e03      	subs	r3, r0, #0
 8004c38:	d001      	beq.n	8004c3e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e01a      	b.n	8004c74 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2220      	movs	r2, #32
 8004c44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	490b      	ldr	r1, [pc, #44]	; (8004c80 <HAL_I2C_Master_Receive+0x20c>)
 8004c52:	400a      	ands	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2241      	movs	r2, #65	; 0x41
 8004c5a:	2120      	movs	r1, #32
 8004c5c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2242      	movs	r2, #66	; 0x42
 8004c62:	2100      	movs	r1, #0
 8004c64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2240      	movs	r2, #64	; 0x40
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	e000      	b.n	8004c74 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004c72:	2302      	movs	r3, #2
  }
}
 8004c74:	0018      	movs	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	b007      	add	sp, #28
 8004c7a:	bd90      	pop	{r4, r7, pc}
 8004c7c:	80002400 	.word	0x80002400
 8004c80:	fe00e800 	.word	0xfe00e800

08004c84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	2202      	movs	r2, #2
 8004c94:	4013      	ands	r3, r2
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d103      	bne.n	8004ca2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d007      	beq.n	8004cc0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2101      	movs	r1, #1
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	619a      	str	r2, [r3, #24]
  }
}
 8004cc0:	46c0      	nop			; (mov r8, r8)
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b002      	add	sp, #8
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	1dfb      	adds	r3, r7, #7
 8004cd6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cd8:	e021      	b.n	8004d1e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	d01e      	beq.n	8004d1e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce0:	f7ff f8ce 	bl	8003e80 <HAL_GetTick>
 8004ce4:	0002      	movs	r2, r0
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d302      	bcc.n	8004cf6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d113      	bne.n	8004d1e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2241      	movs	r2, #65	; 0x41
 8004d06:	2120      	movs	r1, #32
 8004d08:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2242      	movs	r2, #66	; 0x42
 8004d0e:	2100      	movs	r1, #0
 8004d10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2240      	movs	r2, #64	; 0x40
 8004d16:	2100      	movs	r1, #0
 8004d18:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e00f      	b.n	8004d3e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	4013      	ands	r3, r2
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	425a      	negs	r2, r3
 8004d2e:	4153      	adcs	r3, r2
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	001a      	movs	r2, r3
 8004d34:	1dfb      	adds	r3, r7, #7
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d0ce      	beq.n	8004cda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	0018      	movs	r0, r3
 8004d40:	46bd      	mov	sp, r7
 8004d42:	b004      	add	sp, #16
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b084      	sub	sp, #16
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	60f8      	str	r0, [r7, #12]
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d52:	e02b      	b.n	8004dac <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f000 f8da 	bl	8004f14 <I2C_IsAcknowledgeFailed>
 8004d60:	1e03      	subs	r3, r0, #0
 8004d62:	d001      	beq.n	8004d68 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e029      	b.n	8004dbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	d01e      	beq.n	8004dac <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6e:	f7ff f887 	bl	8003e80 <HAL_GetTick>
 8004d72:	0002      	movs	r2, r0
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d302      	bcc.n	8004d84 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d113      	bne.n	8004dac <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d88:	2220      	movs	r2, #32
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2241      	movs	r2, #65	; 0x41
 8004d94:	2120      	movs	r1, #32
 8004d96:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2242      	movs	r2, #66	; 0x42
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2240      	movs	r2, #64	; 0x40
 8004da4:	2100      	movs	r1, #0
 8004da6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e007      	b.n	8004dbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	2202      	movs	r2, #2
 8004db4:	4013      	ands	r3, r2
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d1cc      	bne.n	8004d54 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	b004      	add	sp, #16
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dd0:	e028      	b.n	8004e24 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	68b9      	ldr	r1, [r7, #8]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	0018      	movs	r0, r3
 8004dda:	f000 f89b 	bl	8004f14 <I2C_IsAcknowledgeFailed>
 8004dde:	1e03      	subs	r3, r0, #0
 8004de0:	d001      	beq.n	8004de6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e026      	b.n	8004e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de6:	f7ff f84b 	bl	8003e80 <HAL_GetTick>
 8004dea:	0002      	movs	r2, r0
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d302      	bcc.n	8004dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d113      	bne.n	8004e24 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e00:	2220      	movs	r2, #32
 8004e02:	431a      	orrs	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2241      	movs	r2, #65	; 0x41
 8004e0c:	2120      	movs	r1, #32
 8004e0e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2242      	movs	r2, #66	; 0x42
 8004e14:	2100      	movs	r1, #0
 8004e16:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2240      	movs	r2, #64	; 0x40
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e007      	b.n	8004e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	2b20      	cmp	r3, #32
 8004e30:	d1cf      	bne.n	8004dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	0018      	movs	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	b004      	add	sp, #16
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e48:	e055      	b.n	8004ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	0018      	movs	r0, r3
 8004e52:	f000 f85f 	bl	8004f14 <I2C_IsAcknowledgeFailed>
 8004e56:	1e03      	subs	r3, r0, #0
 8004e58:	d001      	beq.n	8004e5e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e053      	b.n	8004f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	2220      	movs	r2, #32
 8004e66:	4013      	ands	r3, r2
 8004e68:	2b20      	cmp	r3, #32
 8004e6a:	d129      	bne.n	8004ec0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	2204      	movs	r2, #4
 8004e74:	4013      	ands	r3, r2
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d105      	bne.n	8004e86 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	e03f      	b.n	8004f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	491d      	ldr	r1, [pc, #116]	; (8004f10 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004e9a:	400a      	ands	r2, r1
 8004e9c:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2241      	movs	r2, #65	; 0x41
 8004ea8:	2120      	movs	r1, #32
 8004eaa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2242      	movs	r2, #66	; 0x42
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2240      	movs	r2, #64	; 0x40
 8004eb8:	2100      	movs	r1, #0
 8004eba:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e022      	b.n	8004f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec0:	f7fe ffde 	bl	8003e80 <HAL_GetTick>
 8004ec4:	0002      	movs	r2, r0
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d302      	bcc.n	8004ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10f      	bne.n	8004ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	2220      	movs	r2, #32
 8004edc:	431a      	orrs	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2241      	movs	r2, #65	; 0x41
 8004ee6:	2120      	movs	r1, #32
 8004ee8:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2240      	movs	r2, #64	; 0x40
 8004eee:	2100      	movs	r1, #0
 8004ef0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e007      	b.n	8004f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	2204      	movs	r2, #4
 8004efe:	4013      	ands	r3, r2
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d1a2      	bne.n	8004e4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	0018      	movs	r0, r3
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b004      	add	sp, #16
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	fe00e800 	.word	0xfe00e800

08004f14 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	2210      	movs	r2, #16
 8004f28:	4013      	ands	r3, r2
 8004f2a:	2b10      	cmp	r3, #16
 8004f2c:	d151      	bne.n	8004fd2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f2e:	e021      	b.n	8004f74 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	3301      	adds	r3, #1
 8004f34:	d01e      	beq.n	8004f74 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f36:	f7fe ffa3 	bl	8003e80 <HAL_GetTick>
 8004f3a:	0002      	movs	r2, r0
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d302      	bcc.n	8004f4c <I2C_IsAcknowledgeFailed+0x38>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d113      	bne.n	8004f74 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f50:	2220      	movs	r2, #32
 8004f52:	431a      	orrs	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2241      	movs	r2, #65	; 0x41
 8004f5c:	2120      	movs	r1, #32
 8004f5e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2242      	movs	r2, #66	; 0x42
 8004f64:	2100      	movs	r1, #0
 8004f66:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2240      	movs	r2, #64	; 0x40
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e02f      	b.n	8004fd4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	2b20      	cmp	r3, #32
 8004f80:	d1d6      	bne.n	8004f30 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2210      	movs	r2, #16
 8004f88:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	0018      	movs	r0, r3
 8004f96:	f7ff fe75 	bl	8004c84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	490d      	ldr	r1, [pc, #52]	; (8004fdc <I2C_IsAcknowledgeFailed+0xc8>)
 8004fa6:	400a      	ands	r2, r1
 8004fa8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fae:	2204      	movs	r2, #4
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2241      	movs	r2, #65	; 0x41
 8004fba:	2120      	movs	r1, #32
 8004fbc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2242      	movs	r2, #66	; 0x42
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2240      	movs	r2, #64	; 0x40
 8004fca:	2100      	movs	r1, #0
 8004fcc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	b004      	add	sp, #16
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	fe00e800 	.word	0xfe00e800

08004fe0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004fe0:	b590      	push	{r4, r7, lr}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	0008      	movs	r0, r1
 8004fea:	0011      	movs	r1, r2
 8004fec:	607b      	str	r3, [r7, #4]
 8004fee:	240a      	movs	r4, #10
 8004ff0:	193b      	adds	r3, r7, r4
 8004ff2:	1c02      	adds	r2, r0, #0
 8004ff4:	801a      	strh	r2, [r3, #0]
 8004ff6:	2009      	movs	r0, #9
 8004ff8:	183b      	adds	r3, r7, r0
 8004ffa:	1c0a      	adds	r2, r1, #0
 8004ffc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	6a3a      	ldr	r2, [r7, #32]
 8005006:	0d51      	lsrs	r1, r2, #21
 8005008:	2280      	movs	r2, #128	; 0x80
 800500a:	00d2      	lsls	r2, r2, #3
 800500c:	400a      	ands	r2, r1
 800500e:	490e      	ldr	r1, [pc, #56]	; (8005048 <I2C_TransferConfig+0x68>)
 8005010:	430a      	orrs	r2, r1
 8005012:	43d2      	mvns	r2, r2
 8005014:	401a      	ands	r2, r3
 8005016:	0011      	movs	r1, r2
 8005018:	193b      	adds	r3, r7, r4
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	059b      	lsls	r3, r3, #22
 800501e:	0d9a      	lsrs	r2, r3, #22
 8005020:	183b      	adds	r3, r7, r0
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	0418      	lsls	r0, r3, #16
 8005026:	23ff      	movs	r3, #255	; 0xff
 8005028:	041b      	lsls	r3, r3, #16
 800502a:	4003      	ands	r3, r0
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	431a      	orrs	r2, r3
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	431a      	orrs	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800503e:	46c0      	nop			; (mov r8, r8)
 8005040:	46bd      	mov	sp, r7
 8005042:	b005      	add	sp, #20
 8005044:	bd90      	pop	{r4, r7, pc}
 8005046:	46c0      	nop			; (mov r8, r8)
 8005048:	03ff63ff 	.word	0x03ff63ff

0800504c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2241      	movs	r2, #65	; 0x41
 800505a:	5c9b      	ldrb	r3, [r3, r2]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b20      	cmp	r3, #32
 8005060:	d138      	bne.n	80050d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2240      	movs	r2, #64	; 0x40
 8005066:	5c9b      	ldrb	r3, [r3, r2]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800506c:	2302      	movs	r3, #2
 800506e:	e032      	b.n	80050d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2240      	movs	r2, #64	; 0x40
 8005074:	2101      	movs	r1, #1
 8005076:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2241      	movs	r2, #65	; 0x41
 800507c:	2124      	movs	r1, #36	; 0x24
 800507e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2101      	movs	r1, #1
 800508c:	438a      	bics	r2, r1
 800508e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4911      	ldr	r1, [pc, #68]	; (80050e0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800509c:	400a      	ands	r2, r1
 800509e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6819      	ldr	r1, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2101      	movs	r1, #1
 80050bc:	430a      	orrs	r2, r1
 80050be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2241      	movs	r2, #65	; 0x41
 80050c4:	2120      	movs	r1, #32
 80050c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2240      	movs	r2, #64	; 0x40
 80050cc:	2100      	movs	r1, #0
 80050ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	e000      	b.n	80050d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050d4:	2302      	movs	r3, #2
  }
}
 80050d6:	0018      	movs	r0, r3
 80050d8:	46bd      	mov	sp, r7
 80050da:	b002      	add	sp, #8
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	ffffefff 	.word	0xffffefff

080050e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2241      	movs	r2, #65	; 0x41
 80050f2:	5c9b      	ldrb	r3, [r3, r2]
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b20      	cmp	r3, #32
 80050f8:	d139      	bne.n	800516e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2240      	movs	r2, #64	; 0x40
 80050fe:	5c9b      	ldrb	r3, [r3, r2]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005104:	2302      	movs	r3, #2
 8005106:	e033      	b.n	8005170 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2240      	movs	r2, #64	; 0x40
 800510c:	2101      	movs	r1, #1
 800510e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2241      	movs	r2, #65	; 0x41
 8005114:	2124      	movs	r1, #36	; 0x24
 8005116:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2101      	movs	r1, #1
 8005124:	438a      	bics	r2, r1
 8005126:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4a11      	ldr	r2, [pc, #68]	; (8005178 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005134:	4013      	ands	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2101      	movs	r1, #1
 8005156:	430a      	orrs	r2, r1
 8005158:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2241      	movs	r2, #65	; 0x41
 800515e:	2120      	movs	r1, #32
 8005160:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2240      	movs	r2, #64	; 0x40
 8005166:	2100      	movs	r1, #0
 8005168:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	e000      	b.n	8005170 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800516e:	2302      	movs	r3, #2
  }
}
 8005170:	0018      	movs	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	b004      	add	sp, #16
 8005176:	bd80      	pop	{r7, pc}
 8005178:	fffff0ff 	.word	0xfffff0ff

0800517c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8005180:	4b07      	ldr	r3, [pc, #28]	; (80051a0 <HAL_PWR_PVD_IRQHandler+0x24>)
 8005182:	695a      	ldr	r2, [r3, #20]
 8005184:	2380      	movs	r3, #128	; 0x80
 8005186:	025b      	lsls	r3, r3, #9
 8005188:	4013      	ands	r3, r2
 800518a:	d005      	beq.n	8005198 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800518c:	f000 f80a 	bl	80051a4 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8005190:	4b03      	ldr	r3, [pc, #12]	; (80051a0 <HAL_PWR_PVD_IRQHandler+0x24>)
 8005192:	2280      	movs	r2, #128	; 0x80
 8005194:	0252      	lsls	r2, r2, #9
 8005196:	615a      	str	r2, [r3, #20]
  }
}
 8005198:	46c0      	nop			; (mov r8, r8)
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	40010400 	.word	0x40010400

080051a4 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80051a8:	46c0      	nop			; (mov r8, r8)
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051b0:	b5b0      	push	{r4, r5, r7, lr}
 80051b2:	b08a      	sub	sp, #40	; 0x28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d102      	bne.n	80051c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	f000 fbaf 	bl	8005922 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051c4:	4bcf      	ldr	r3, [pc, #828]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	220c      	movs	r2, #12
 80051ca:	4013      	ands	r3, r2
 80051cc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051ce:	4bcd      	ldr	r3, [pc, #820]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	2380      	movs	r3, #128	; 0x80
 80051d4:	025b      	lsls	r3, r3, #9
 80051d6:	4013      	ands	r3, r2
 80051d8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2201      	movs	r2, #1
 80051e0:	4013      	ands	r3, r2
 80051e2:	d100      	bne.n	80051e6 <HAL_RCC_OscConfig+0x36>
 80051e4:	e07e      	b.n	80052e4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d007      	beq.n	80051fc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	2b0c      	cmp	r3, #12
 80051f0:	d112      	bne.n	8005218 <HAL_RCC_OscConfig+0x68>
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	2380      	movs	r3, #128	; 0x80
 80051f6:	025b      	lsls	r3, r3, #9
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d10d      	bne.n	8005218 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051fc:	4bc1      	ldr	r3, [pc, #772]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	2380      	movs	r3, #128	; 0x80
 8005202:	029b      	lsls	r3, r3, #10
 8005204:	4013      	ands	r3, r2
 8005206:	d100      	bne.n	800520a <HAL_RCC_OscConfig+0x5a>
 8005208:	e06b      	b.n	80052e2 <HAL_RCC_OscConfig+0x132>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d167      	bne.n	80052e2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	f000 fb85 	bl	8005922 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	2380      	movs	r3, #128	; 0x80
 800521e:	025b      	lsls	r3, r3, #9
 8005220:	429a      	cmp	r2, r3
 8005222:	d107      	bne.n	8005234 <HAL_RCC_OscConfig+0x84>
 8005224:	4bb7      	ldr	r3, [pc, #732]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	4bb6      	ldr	r3, [pc, #728]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 800522a:	2180      	movs	r1, #128	; 0x80
 800522c:	0249      	lsls	r1, r1, #9
 800522e:	430a      	orrs	r2, r1
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	e027      	b.n	8005284 <HAL_RCC_OscConfig+0xd4>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	23a0      	movs	r3, #160	; 0xa0
 800523a:	02db      	lsls	r3, r3, #11
 800523c:	429a      	cmp	r2, r3
 800523e:	d10e      	bne.n	800525e <HAL_RCC_OscConfig+0xae>
 8005240:	4bb0      	ldr	r3, [pc, #704]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	4baf      	ldr	r3, [pc, #700]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 8005246:	2180      	movs	r1, #128	; 0x80
 8005248:	02c9      	lsls	r1, r1, #11
 800524a:	430a      	orrs	r2, r1
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	4bad      	ldr	r3, [pc, #692]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	4bac      	ldr	r3, [pc, #688]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 8005254:	2180      	movs	r1, #128	; 0x80
 8005256:	0249      	lsls	r1, r1, #9
 8005258:	430a      	orrs	r2, r1
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	e012      	b.n	8005284 <HAL_RCC_OscConfig+0xd4>
 800525e:	4ba9      	ldr	r3, [pc, #676]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	4ba8      	ldr	r3, [pc, #672]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 8005264:	49a8      	ldr	r1, [pc, #672]	; (8005508 <HAL_RCC_OscConfig+0x358>)
 8005266:	400a      	ands	r2, r1
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	4ba6      	ldr	r3, [pc, #664]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	2380      	movs	r3, #128	; 0x80
 8005270:	025b      	lsls	r3, r3, #9
 8005272:	4013      	ands	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4ba2      	ldr	r3, [pc, #648]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	4ba1      	ldr	r3, [pc, #644]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 800527e:	49a3      	ldr	r1, [pc, #652]	; (800550c <HAL_RCC_OscConfig+0x35c>)
 8005280:	400a      	ands	r2, r1
 8005282:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d015      	beq.n	80052b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800528c:	f7fe fdf8 	bl	8003e80 <HAL_GetTick>
 8005290:	0003      	movs	r3, r0
 8005292:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005294:	e009      	b.n	80052aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005296:	f7fe fdf3 	bl	8003e80 <HAL_GetTick>
 800529a:	0002      	movs	r2, r0
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b64      	cmp	r3, #100	; 0x64
 80052a2:	d902      	bls.n	80052aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	f000 fb3c 	bl	8005922 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052aa:	4b96      	ldr	r3, [pc, #600]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	2380      	movs	r3, #128	; 0x80
 80052b0:	029b      	lsls	r3, r3, #10
 80052b2:	4013      	ands	r3, r2
 80052b4:	d0ef      	beq.n	8005296 <HAL_RCC_OscConfig+0xe6>
 80052b6:	e015      	b.n	80052e4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b8:	f7fe fde2 	bl	8003e80 <HAL_GetTick>
 80052bc:	0003      	movs	r3, r0
 80052be:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052c2:	f7fe fddd 	bl	8003e80 <HAL_GetTick>
 80052c6:	0002      	movs	r2, r0
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b64      	cmp	r3, #100	; 0x64
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e326      	b.n	8005922 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052d4:	4b8b      	ldr	r3, [pc, #556]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	2380      	movs	r3, #128	; 0x80
 80052da:	029b      	lsls	r3, r3, #10
 80052dc:	4013      	ands	r3, r2
 80052de:	d1f0      	bne.n	80052c2 <HAL_RCC_OscConfig+0x112>
 80052e0:	e000      	b.n	80052e4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052e2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2202      	movs	r2, #2
 80052ea:	4013      	ands	r3, r2
 80052ec:	d100      	bne.n	80052f0 <HAL_RCC_OscConfig+0x140>
 80052ee:	e08b      	b.n	8005408 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d005      	beq.n	8005308 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	2b0c      	cmp	r3, #12
 8005300:	d13e      	bne.n	8005380 <HAL_RCC_OscConfig+0x1d0>
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d13b      	bne.n	8005380 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005308:	4b7e      	ldr	r3, [pc, #504]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2204      	movs	r2, #4
 800530e:	4013      	ands	r3, r2
 8005310:	d004      	beq.n	800531c <HAL_RCC_OscConfig+0x16c>
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e302      	b.n	8005922 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800531c:	4b79      	ldr	r3, [pc, #484]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	4a7b      	ldr	r2, [pc, #492]	; (8005510 <HAL_RCC_OscConfig+0x360>)
 8005322:	4013      	ands	r3, r2
 8005324:	0019      	movs	r1, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	021a      	lsls	r2, r3, #8
 800532c:	4b75      	ldr	r3, [pc, #468]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 800532e:	430a      	orrs	r2, r1
 8005330:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005332:	4b74      	ldr	r3, [pc, #464]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2209      	movs	r2, #9
 8005338:	4393      	bics	r3, r2
 800533a:	0019      	movs	r1, r3
 800533c:	4b71      	ldr	r3, [pc, #452]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	430a      	orrs	r2, r1
 8005342:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005344:	f000 fc40 	bl	8005bc8 <HAL_RCC_GetSysClockFreq>
 8005348:	0001      	movs	r1, r0
 800534a:	4b6e      	ldr	r3, [pc, #440]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	091b      	lsrs	r3, r3, #4
 8005350:	220f      	movs	r2, #15
 8005352:	4013      	ands	r3, r2
 8005354:	4a6f      	ldr	r2, [pc, #444]	; (8005514 <HAL_RCC_OscConfig+0x364>)
 8005356:	5cd3      	ldrb	r3, [r2, r3]
 8005358:	000a      	movs	r2, r1
 800535a:	40da      	lsrs	r2, r3
 800535c:	4b6e      	ldr	r3, [pc, #440]	; (8005518 <HAL_RCC_OscConfig+0x368>)
 800535e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005360:	4b6e      	ldr	r3, [pc, #440]	; (800551c <HAL_RCC_OscConfig+0x36c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2513      	movs	r5, #19
 8005366:	197c      	adds	r4, r7, r5
 8005368:	0018      	movs	r0, r3
 800536a:	f7fe fd43 	bl	8003df4 <HAL_InitTick>
 800536e:	0003      	movs	r3, r0
 8005370:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005372:	197b      	adds	r3, r7, r5
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d046      	beq.n	8005408 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800537a:	197b      	adds	r3, r7, r5
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	e2d0      	b.n	8005922 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d027      	beq.n	80053d6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005386:	4b5f      	ldr	r3, [pc, #380]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2209      	movs	r2, #9
 800538c:	4393      	bics	r3, r2
 800538e:	0019      	movs	r1, r3
 8005390:	4b5c      	ldr	r3, [pc, #368]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	430a      	orrs	r2, r1
 8005396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005398:	f7fe fd72 	bl	8003e80 <HAL_GetTick>
 800539c:	0003      	movs	r3, r0
 800539e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053a2:	f7fe fd6d 	bl	8003e80 <HAL_GetTick>
 80053a6:	0002      	movs	r2, r0
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e2b6      	b.n	8005922 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053b4:	4b53      	ldr	r3, [pc, #332]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2204      	movs	r2, #4
 80053ba:	4013      	ands	r3, r2
 80053bc:	d0f1      	beq.n	80053a2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053be:	4b51      	ldr	r3, [pc, #324]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	4a53      	ldr	r2, [pc, #332]	; (8005510 <HAL_RCC_OscConfig+0x360>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	0019      	movs	r1, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	021a      	lsls	r2, r3, #8
 80053ce:	4b4d      	ldr	r3, [pc, #308]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 80053d0:	430a      	orrs	r2, r1
 80053d2:	605a      	str	r2, [r3, #4]
 80053d4:	e018      	b.n	8005408 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053d6:	4b4b      	ldr	r3, [pc, #300]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4b4a      	ldr	r3, [pc, #296]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 80053dc:	2101      	movs	r1, #1
 80053de:	438a      	bics	r2, r1
 80053e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e2:	f7fe fd4d 	bl	8003e80 <HAL_GetTick>
 80053e6:	0003      	movs	r3, r0
 80053e8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053ec:	f7fe fd48 	bl	8003e80 <HAL_GetTick>
 80053f0:	0002      	movs	r2, r0
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e291      	b.n	8005922 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053fe:	4b41      	ldr	r3, [pc, #260]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2204      	movs	r2, #4
 8005404:	4013      	ands	r3, r2
 8005406:	d1f1      	bne.n	80053ec <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2210      	movs	r2, #16
 800540e:	4013      	ands	r3, r2
 8005410:	d100      	bne.n	8005414 <HAL_RCC_OscConfig+0x264>
 8005412:	e0a1      	b.n	8005558 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d140      	bne.n	800549c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800541a:	4b3a      	ldr	r3, [pc, #232]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	2380      	movs	r3, #128	; 0x80
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4013      	ands	r3, r2
 8005424:	d005      	beq.n	8005432 <HAL_RCC_OscConfig+0x282>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e277      	b.n	8005922 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005432:	4b34      	ldr	r3, [pc, #208]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	4a3a      	ldr	r2, [pc, #232]	; (8005520 <HAL_RCC_OscConfig+0x370>)
 8005438:	4013      	ands	r3, r2
 800543a:	0019      	movs	r1, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005440:	4b30      	ldr	r3, [pc, #192]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 8005442:	430a      	orrs	r2, r1
 8005444:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005446:	4b2f      	ldr	r3, [pc, #188]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	021b      	lsls	r3, r3, #8
 800544c:	0a19      	lsrs	r1, r3, #8
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	061a      	lsls	r2, r3, #24
 8005454:	4b2b      	ldr	r3, [pc, #172]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 8005456:	430a      	orrs	r2, r1
 8005458:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	0b5b      	lsrs	r3, r3, #13
 8005460:	3301      	adds	r3, #1
 8005462:	2280      	movs	r2, #128	; 0x80
 8005464:	0212      	lsls	r2, r2, #8
 8005466:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005468:	4b26      	ldr	r3, [pc, #152]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	091b      	lsrs	r3, r3, #4
 800546e:	210f      	movs	r1, #15
 8005470:	400b      	ands	r3, r1
 8005472:	4928      	ldr	r1, [pc, #160]	; (8005514 <HAL_RCC_OscConfig+0x364>)
 8005474:	5ccb      	ldrb	r3, [r1, r3]
 8005476:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005478:	4b27      	ldr	r3, [pc, #156]	; (8005518 <HAL_RCC_OscConfig+0x368>)
 800547a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800547c:	4b27      	ldr	r3, [pc, #156]	; (800551c <HAL_RCC_OscConfig+0x36c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2513      	movs	r5, #19
 8005482:	197c      	adds	r4, r7, r5
 8005484:	0018      	movs	r0, r3
 8005486:	f7fe fcb5 	bl	8003df4 <HAL_InitTick>
 800548a:	0003      	movs	r3, r0
 800548c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800548e:	197b      	adds	r3, r7, r5
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d060      	beq.n	8005558 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8005496:	197b      	adds	r3, r7, r5
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	e242      	b.n	8005922 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d03f      	beq.n	8005524 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80054a4:	4b17      	ldr	r3, [pc, #92]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	4b16      	ldr	r3, [pc, #88]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 80054aa:	2180      	movs	r1, #128	; 0x80
 80054ac:	0049      	lsls	r1, r1, #1
 80054ae:	430a      	orrs	r2, r1
 80054b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b2:	f7fe fce5 	bl	8003e80 <HAL_GetTick>
 80054b6:	0003      	movs	r3, r0
 80054b8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054bc:	f7fe fce0 	bl	8003e80 <HAL_GetTick>
 80054c0:	0002      	movs	r2, r0
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e229      	b.n	8005922 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80054ce:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	2380      	movs	r3, #128	; 0x80
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4013      	ands	r3, r2
 80054d8:	d0f0      	beq.n	80054bc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054da:	4b0a      	ldr	r3, [pc, #40]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	4a10      	ldr	r2, [pc, #64]	; (8005520 <HAL_RCC_OscConfig+0x370>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	0019      	movs	r1, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054e8:	4b06      	ldr	r3, [pc, #24]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 80054ea:	430a      	orrs	r2, r1
 80054ec:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054ee:	4b05      	ldr	r3, [pc, #20]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	021b      	lsls	r3, r3, #8
 80054f4:	0a19      	lsrs	r1, r3, #8
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	061a      	lsls	r2, r3, #24
 80054fc:	4b01      	ldr	r3, [pc, #4]	; (8005504 <HAL_RCC_OscConfig+0x354>)
 80054fe:	430a      	orrs	r2, r1
 8005500:	605a      	str	r2, [r3, #4]
 8005502:	e029      	b.n	8005558 <HAL_RCC_OscConfig+0x3a8>
 8005504:	40021000 	.word	0x40021000
 8005508:	fffeffff 	.word	0xfffeffff
 800550c:	fffbffff 	.word	0xfffbffff
 8005510:	ffffe0ff 	.word	0xffffe0ff
 8005514:	08009d7c 	.word	0x08009d7c
 8005518:	20000030 	.word	0x20000030
 800551c:	2000003c 	.word	0x2000003c
 8005520:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005524:	4bbd      	ldr	r3, [pc, #756]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	4bbc      	ldr	r3, [pc, #752]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 800552a:	49bd      	ldr	r1, [pc, #756]	; (8005820 <HAL_RCC_OscConfig+0x670>)
 800552c:	400a      	ands	r2, r1
 800552e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005530:	f7fe fca6 	bl	8003e80 <HAL_GetTick>
 8005534:	0003      	movs	r3, r0
 8005536:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005538:	e008      	b.n	800554c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800553a:	f7fe fca1 	bl	8003e80 <HAL_GetTick>
 800553e:	0002      	movs	r2, r0
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d901      	bls.n	800554c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e1ea      	b.n	8005922 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800554c:	4bb3      	ldr	r3, [pc, #716]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	2380      	movs	r3, #128	; 0x80
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4013      	ands	r3, r2
 8005556:	d1f0      	bne.n	800553a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2208      	movs	r2, #8
 800555e:	4013      	ands	r3, r2
 8005560:	d036      	beq.n	80055d0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d019      	beq.n	800559e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800556a:	4bac      	ldr	r3, [pc, #688]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 800556c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800556e:	4bab      	ldr	r3, [pc, #684]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 8005570:	2101      	movs	r1, #1
 8005572:	430a      	orrs	r2, r1
 8005574:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005576:	f7fe fc83 	bl	8003e80 <HAL_GetTick>
 800557a:	0003      	movs	r3, r0
 800557c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005580:	f7fe fc7e 	bl	8003e80 <HAL_GetTick>
 8005584:	0002      	movs	r2, r0
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e1c7      	b.n	8005922 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005592:	4ba2      	ldr	r3, [pc, #648]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 8005594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005596:	2202      	movs	r2, #2
 8005598:	4013      	ands	r3, r2
 800559a:	d0f1      	beq.n	8005580 <HAL_RCC_OscConfig+0x3d0>
 800559c:	e018      	b.n	80055d0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800559e:	4b9f      	ldr	r3, [pc, #636]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 80055a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055a2:	4b9e      	ldr	r3, [pc, #632]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 80055a4:	2101      	movs	r1, #1
 80055a6:	438a      	bics	r2, r1
 80055a8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055aa:	f7fe fc69 	bl	8003e80 <HAL_GetTick>
 80055ae:	0003      	movs	r3, r0
 80055b0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055b4:	f7fe fc64 	bl	8003e80 <HAL_GetTick>
 80055b8:	0002      	movs	r2, r0
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e1ad      	b.n	8005922 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055c6:	4b95      	ldr	r3, [pc, #596]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 80055c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ca:	2202      	movs	r2, #2
 80055cc:	4013      	ands	r3, r2
 80055ce:	d1f1      	bne.n	80055b4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2204      	movs	r2, #4
 80055d6:	4013      	ands	r3, r2
 80055d8:	d100      	bne.n	80055dc <HAL_RCC_OscConfig+0x42c>
 80055da:	e0ae      	b.n	800573a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055dc:	2027      	movs	r0, #39	; 0x27
 80055de:	183b      	adds	r3, r7, r0
 80055e0:	2200      	movs	r2, #0
 80055e2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055e4:	4b8d      	ldr	r3, [pc, #564]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 80055e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055e8:	2380      	movs	r3, #128	; 0x80
 80055ea:	055b      	lsls	r3, r3, #21
 80055ec:	4013      	ands	r3, r2
 80055ee:	d109      	bne.n	8005604 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055f0:	4b8a      	ldr	r3, [pc, #552]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 80055f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055f4:	4b89      	ldr	r3, [pc, #548]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 80055f6:	2180      	movs	r1, #128	; 0x80
 80055f8:	0549      	lsls	r1, r1, #21
 80055fa:	430a      	orrs	r2, r1
 80055fc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80055fe:	183b      	adds	r3, r7, r0
 8005600:	2201      	movs	r2, #1
 8005602:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005604:	4b87      	ldr	r3, [pc, #540]	; (8005824 <HAL_RCC_OscConfig+0x674>)
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	2380      	movs	r3, #128	; 0x80
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	4013      	ands	r3, r2
 800560e:	d11a      	bne.n	8005646 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005610:	4b84      	ldr	r3, [pc, #528]	; (8005824 <HAL_RCC_OscConfig+0x674>)
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	4b83      	ldr	r3, [pc, #524]	; (8005824 <HAL_RCC_OscConfig+0x674>)
 8005616:	2180      	movs	r1, #128	; 0x80
 8005618:	0049      	lsls	r1, r1, #1
 800561a:	430a      	orrs	r2, r1
 800561c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800561e:	f7fe fc2f 	bl	8003e80 <HAL_GetTick>
 8005622:	0003      	movs	r3, r0
 8005624:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005628:	f7fe fc2a 	bl	8003e80 <HAL_GetTick>
 800562c:	0002      	movs	r2, r0
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b64      	cmp	r3, #100	; 0x64
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e173      	b.n	8005922 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563a:	4b7a      	ldr	r3, [pc, #488]	; (8005824 <HAL_RCC_OscConfig+0x674>)
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	2380      	movs	r3, #128	; 0x80
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	4013      	ands	r3, r2
 8005644:	d0f0      	beq.n	8005628 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689a      	ldr	r2, [r3, #8]
 800564a:	2380      	movs	r3, #128	; 0x80
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	429a      	cmp	r2, r3
 8005650:	d107      	bne.n	8005662 <HAL_RCC_OscConfig+0x4b2>
 8005652:	4b72      	ldr	r3, [pc, #456]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 8005654:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005656:	4b71      	ldr	r3, [pc, #452]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 8005658:	2180      	movs	r1, #128	; 0x80
 800565a:	0049      	lsls	r1, r1, #1
 800565c:	430a      	orrs	r2, r1
 800565e:	651a      	str	r2, [r3, #80]	; 0x50
 8005660:	e031      	b.n	80056c6 <HAL_RCC_OscConfig+0x516>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10c      	bne.n	8005684 <HAL_RCC_OscConfig+0x4d4>
 800566a:	4b6c      	ldr	r3, [pc, #432]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 800566c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800566e:	4b6b      	ldr	r3, [pc, #428]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 8005670:	496b      	ldr	r1, [pc, #428]	; (8005820 <HAL_RCC_OscConfig+0x670>)
 8005672:	400a      	ands	r2, r1
 8005674:	651a      	str	r2, [r3, #80]	; 0x50
 8005676:	4b69      	ldr	r3, [pc, #420]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 8005678:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800567a:	4b68      	ldr	r3, [pc, #416]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 800567c:	496a      	ldr	r1, [pc, #424]	; (8005828 <HAL_RCC_OscConfig+0x678>)
 800567e:	400a      	ands	r2, r1
 8005680:	651a      	str	r2, [r3, #80]	; 0x50
 8005682:	e020      	b.n	80056c6 <HAL_RCC_OscConfig+0x516>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	23a0      	movs	r3, #160	; 0xa0
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	429a      	cmp	r2, r3
 800568e:	d10e      	bne.n	80056ae <HAL_RCC_OscConfig+0x4fe>
 8005690:	4b62      	ldr	r3, [pc, #392]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 8005692:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005694:	4b61      	ldr	r3, [pc, #388]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 8005696:	2180      	movs	r1, #128	; 0x80
 8005698:	00c9      	lsls	r1, r1, #3
 800569a:	430a      	orrs	r2, r1
 800569c:	651a      	str	r2, [r3, #80]	; 0x50
 800569e:	4b5f      	ldr	r3, [pc, #380]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 80056a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056a2:	4b5e      	ldr	r3, [pc, #376]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 80056a4:	2180      	movs	r1, #128	; 0x80
 80056a6:	0049      	lsls	r1, r1, #1
 80056a8:	430a      	orrs	r2, r1
 80056aa:	651a      	str	r2, [r3, #80]	; 0x50
 80056ac:	e00b      	b.n	80056c6 <HAL_RCC_OscConfig+0x516>
 80056ae:	4b5b      	ldr	r3, [pc, #364]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 80056b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056b2:	4b5a      	ldr	r3, [pc, #360]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 80056b4:	495a      	ldr	r1, [pc, #360]	; (8005820 <HAL_RCC_OscConfig+0x670>)
 80056b6:	400a      	ands	r2, r1
 80056b8:	651a      	str	r2, [r3, #80]	; 0x50
 80056ba:	4b58      	ldr	r3, [pc, #352]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 80056bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056be:	4b57      	ldr	r3, [pc, #348]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 80056c0:	4959      	ldr	r1, [pc, #356]	; (8005828 <HAL_RCC_OscConfig+0x678>)
 80056c2:	400a      	ands	r2, r1
 80056c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d015      	beq.n	80056fa <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ce:	f7fe fbd7 	bl	8003e80 <HAL_GetTick>
 80056d2:	0003      	movs	r3, r0
 80056d4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056d6:	e009      	b.n	80056ec <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056d8:	f7fe fbd2 	bl	8003e80 <HAL_GetTick>
 80056dc:	0002      	movs	r2, r0
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	4a52      	ldr	r2, [pc, #328]	; (800582c <HAL_RCC_OscConfig+0x67c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e11a      	b.n	8005922 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056ec:	4b4b      	ldr	r3, [pc, #300]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 80056ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056f0:	2380      	movs	r3, #128	; 0x80
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4013      	ands	r3, r2
 80056f6:	d0ef      	beq.n	80056d8 <HAL_RCC_OscConfig+0x528>
 80056f8:	e014      	b.n	8005724 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056fa:	f7fe fbc1 	bl	8003e80 <HAL_GetTick>
 80056fe:	0003      	movs	r3, r0
 8005700:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005702:	e009      	b.n	8005718 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005704:	f7fe fbbc 	bl	8003e80 <HAL_GetTick>
 8005708:	0002      	movs	r2, r0
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	4a47      	ldr	r2, [pc, #284]	; (800582c <HAL_RCC_OscConfig+0x67c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e104      	b.n	8005922 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005718:	4b40      	ldr	r3, [pc, #256]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 800571a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800571c:	2380      	movs	r3, #128	; 0x80
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4013      	ands	r3, r2
 8005722:	d1ef      	bne.n	8005704 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005724:	2327      	movs	r3, #39	; 0x27
 8005726:	18fb      	adds	r3, r7, r3
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d105      	bne.n	800573a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800572e:	4b3b      	ldr	r3, [pc, #236]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 8005730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005732:	4b3a      	ldr	r3, [pc, #232]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 8005734:	493e      	ldr	r1, [pc, #248]	; (8005830 <HAL_RCC_OscConfig+0x680>)
 8005736:	400a      	ands	r2, r1
 8005738:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2220      	movs	r2, #32
 8005740:	4013      	ands	r3, r2
 8005742:	d049      	beq.n	80057d8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d026      	beq.n	800579a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800574c:	4b33      	ldr	r3, [pc, #204]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	4b32      	ldr	r3, [pc, #200]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 8005752:	2101      	movs	r1, #1
 8005754:	430a      	orrs	r2, r1
 8005756:	609a      	str	r2, [r3, #8]
 8005758:	4b30      	ldr	r3, [pc, #192]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 800575a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800575c:	4b2f      	ldr	r3, [pc, #188]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 800575e:	2101      	movs	r1, #1
 8005760:	430a      	orrs	r2, r1
 8005762:	635a      	str	r2, [r3, #52]	; 0x34
 8005764:	4b33      	ldr	r3, [pc, #204]	; (8005834 <HAL_RCC_OscConfig+0x684>)
 8005766:	6a1a      	ldr	r2, [r3, #32]
 8005768:	4b32      	ldr	r3, [pc, #200]	; (8005834 <HAL_RCC_OscConfig+0x684>)
 800576a:	2180      	movs	r1, #128	; 0x80
 800576c:	0189      	lsls	r1, r1, #6
 800576e:	430a      	orrs	r2, r1
 8005770:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005772:	f7fe fb85 	bl	8003e80 <HAL_GetTick>
 8005776:	0003      	movs	r3, r0
 8005778:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800577c:	f7fe fb80 	bl	8003e80 <HAL_GetTick>
 8005780:	0002      	movs	r2, r0
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e0c9      	b.n	8005922 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800578e:	4b23      	ldr	r3, [pc, #140]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	2202      	movs	r2, #2
 8005794:	4013      	ands	r3, r2
 8005796:	d0f1      	beq.n	800577c <HAL_RCC_OscConfig+0x5cc>
 8005798:	e01e      	b.n	80057d8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800579a:	4b20      	ldr	r3, [pc, #128]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	4b1f      	ldr	r3, [pc, #124]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 80057a0:	2101      	movs	r1, #1
 80057a2:	438a      	bics	r2, r1
 80057a4:	609a      	str	r2, [r3, #8]
 80057a6:	4b23      	ldr	r3, [pc, #140]	; (8005834 <HAL_RCC_OscConfig+0x684>)
 80057a8:	6a1a      	ldr	r2, [r3, #32]
 80057aa:	4b22      	ldr	r3, [pc, #136]	; (8005834 <HAL_RCC_OscConfig+0x684>)
 80057ac:	4922      	ldr	r1, [pc, #136]	; (8005838 <HAL_RCC_OscConfig+0x688>)
 80057ae:	400a      	ands	r2, r1
 80057b0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b2:	f7fe fb65 	bl	8003e80 <HAL_GetTick>
 80057b6:	0003      	movs	r3, r0
 80057b8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057bc:	f7fe fb60 	bl	8003e80 <HAL_GetTick>
 80057c0:	0002      	movs	r2, r0
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e0a9      	b.n	8005922 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057ce:	4b13      	ldr	r3, [pc, #76]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	2202      	movs	r2, #2
 80057d4:	4013      	ands	r3, r2
 80057d6:	d1f1      	bne.n	80057bc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d100      	bne.n	80057e2 <HAL_RCC_OscConfig+0x632>
 80057e0:	e09e      	b.n	8005920 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	2b0c      	cmp	r3, #12
 80057e6:	d100      	bne.n	80057ea <HAL_RCC_OscConfig+0x63a>
 80057e8:	e077      	b.n	80058da <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d158      	bne.n	80058a4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057f2:	4b0a      	ldr	r3, [pc, #40]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	4b09      	ldr	r3, [pc, #36]	; (800581c <HAL_RCC_OscConfig+0x66c>)
 80057f8:	4910      	ldr	r1, [pc, #64]	; (800583c <HAL_RCC_OscConfig+0x68c>)
 80057fa:	400a      	ands	r2, r1
 80057fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fe:	f7fe fb3f 	bl	8003e80 <HAL_GetTick>
 8005802:	0003      	movs	r3, r0
 8005804:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005806:	e01b      	b.n	8005840 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005808:	f7fe fb3a 	bl	8003e80 <HAL_GetTick>
 800580c:	0002      	movs	r2, r0
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d914      	bls.n	8005840 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e083      	b.n	8005922 <HAL_RCC_OscConfig+0x772>
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	40021000 	.word	0x40021000
 8005820:	fffffeff 	.word	0xfffffeff
 8005824:	40007000 	.word	0x40007000
 8005828:	fffffbff 	.word	0xfffffbff
 800582c:	00001388 	.word	0x00001388
 8005830:	efffffff 	.word	0xefffffff
 8005834:	40010000 	.word	0x40010000
 8005838:	ffffdfff 	.word	0xffffdfff
 800583c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005840:	4b3a      	ldr	r3, [pc, #232]	; (800592c <HAL_RCC_OscConfig+0x77c>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	2380      	movs	r3, #128	; 0x80
 8005846:	049b      	lsls	r3, r3, #18
 8005848:	4013      	ands	r3, r2
 800584a:	d1dd      	bne.n	8005808 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800584c:	4b37      	ldr	r3, [pc, #220]	; (800592c <HAL_RCC_OscConfig+0x77c>)
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	4a37      	ldr	r2, [pc, #220]	; (8005930 <HAL_RCC_OscConfig+0x780>)
 8005852:	4013      	ands	r3, r2
 8005854:	0019      	movs	r1, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005864:	431a      	orrs	r2, r3
 8005866:	4b31      	ldr	r3, [pc, #196]	; (800592c <HAL_RCC_OscConfig+0x77c>)
 8005868:	430a      	orrs	r2, r1
 800586a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800586c:	4b2f      	ldr	r3, [pc, #188]	; (800592c <HAL_RCC_OscConfig+0x77c>)
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	4b2e      	ldr	r3, [pc, #184]	; (800592c <HAL_RCC_OscConfig+0x77c>)
 8005872:	2180      	movs	r1, #128	; 0x80
 8005874:	0449      	lsls	r1, r1, #17
 8005876:	430a      	orrs	r2, r1
 8005878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800587a:	f7fe fb01 	bl	8003e80 <HAL_GetTick>
 800587e:	0003      	movs	r3, r0
 8005880:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005884:	f7fe fafc 	bl	8003e80 <HAL_GetTick>
 8005888:	0002      	movs	r2, r0
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b02      	cmp	r3, #2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e045      	b.n	8005922 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005896:	4b25      	ldr	r3, [pc, #148]	; (800592c <HAL_RCC_OscConfig+0x77c>)
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	2380      	movs	r3, #128	; 0x80
 800589c:	049b      	lsls	r3, r3, #18
 800589e:	4013      	ands	r3, r2
 80058a0:	d0f0      	beq.n	8005884 <HAL_RCC_OscConfig+0x6d4>
 80058a2:	e03d      	b.n	8005920 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058a4:	4b21      	ldr	r3, [pc, #132]	; (800592c <HAL_RCC_OscConfig+0x77c>)
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	4b20      	ldr	r3, [pc, #128]	; (800592c <HAL_RCC_OscConfig+0x77c>)
 80058aa:	4922      	ldr	r1, [pc, #136]	; (8005934 <HAL_RCC_OscConfig+0x784>)
 80058ac:	400a      	ands	r2, r1
 80058ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b0:	f7fe fae6 	bl	8003e80 <HAL_GetTick>
 80058b4:	0003      	movs	r3, r0
 80058b6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80058b8:	e008      	b.n	80058cc <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058ba:	f7fe fae1 	bl	8003e80 <HAL_GetTick>
 80058be:	0002      	movs	r2, r0
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e02a      	b.n	8005922 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80058cc:	4b17      	ldr	r3, [pc, #92]	; (800592c <HAL_RCC_OscConfig+0x77c>)
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	2380      	movs	r3, #128	; 0x80
 80058d2:	049b      	lsls	r3, r3, #18
 80058d4:	4013      	ands	r3, r2
 80058d6:	d1f0      	bne.n	80058ba <HAL_RCC_OscConfig+0x70a>
 80058d8:	e022      	b.n	8005920 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d101      	bne.n	80058e6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e01d      	b.n	8005922 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80058e6:	4b11      	ldr	r3, [pc, #68]	; (800592c <HAL_RCC_OscConfig+0x77c>)
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ec:	69fa      	ldr	r2, [r7, #28]
 80058ee:	2380      	movs	r3, #128	; 0x80
 80058f0:	025b      	lsls	r3, r3, #9
 80058f2:	401a      	ands	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d10f      	bne.n	800591c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	23f0      	movs	r3, #240	; 0xf0
 8005900:	039b      	lsls	r3, r3, #14
 8005902:	401a      	ands	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005908:	429a      	cmp	r2, r3
 800590a:	d107      	bne.n	800591c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800590c:	69fa      	ldr	r2, [r7, #28]
 800590e:	23c0      	movs	r3, #192	; 0xc0
 8005910:	041b      	lsls	r3, r3, #16
 8005912:	401a      	ands	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005918:	429a      	cmp	r2, r3
 800591a:	d001      	beq.n	8005920 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e000      	b.n	8005922 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	0018      	movs	r0, r3
 8005924:	46bd      	mov	sp, r7
 8005926:	b00a      	add	sp, #40	; 0x28
 8005928:	bdb0      	pop	{r4, r5, r7, pc}
 800592a:	46c0      	nop			; (mov r8, r8)
 800592c:	40021000 	.word	0x40021000
 8005930:	ff02ffff 	.word	0xff02ffff
 8005934:	feffffff 	.word	0xfeffffff

08005938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005938:	b5b0      	push	{r4, r5, r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e128      	b.n	8005b9e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800594c:	4b96      	ldr	r3, [pc, #600]	; (8005ba8 <HAL_RCC_ClockConfig+0x270>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2201      	movs	r2, #1
 8005952:	4013      	ands	r3, r2
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	429a      	cmp	r2, r3
 8005958:	d91e      	bls.n	8005998 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800595a:	4b93      	ldr	r3, [pc, #588]	; (8005ba8 <HAL_RCC_ClockConfig+0x270>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2201      	movs	r2, #1
 8005960:	4393      	bics	r3, r2
 8005962:	0019      	movs	r1, r3
 8005964:	4b90      	ldr	r3, [pc, #576]	; (8005ba8 <HAL_RCC_ClockConfig+0x270>)
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800596c:	f7fe fa88 	bl	8003e80 <HAL_GetTick>
 8005970:	0003      	movs	r3, r0
 8005972:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005974:	e009      	b.n	800598a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005976:	f7fe fa83 	bl	8003e80 <HAL_GetTick>
 800597a:	0002      	movs	r2, r0
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	4a8a      	ldr	r2, [pc, #552]	; (8005bac <HAL_RCC_ClockConfig+0x274>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d901      	bls.n	800598a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e109      	b.n	8005b9e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800598a:	4b87      	ldr	r3, [pc, #540]	; (8005ba8 <HAL_RCC_ClockConfig+0x270>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2201      	movs	r2, #1
 8005990:	4013      	ands	r3, r2
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	429a      	cmp	r2, r3
 8005996:	d1ee      	bne.n	8005976 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2202      	movs	r2, #2
 800599e:	4013      	ands	r3, r2
 80059a0:	d009      	beq.n	80059b6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059a2:	4b83      	ldr	r3, [pc, #524]	; (8005bb0 <HAL_RCC_ClockConfig+0x278>)
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	22f0      	movs	r2, #240	; 0xf0
 80059a8:	4393      	bics	r3, r2
 80059aa:	0019      	movs	r1, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	4b7f      	ldr	r3, [pc, #508]	; (8005bb0 <HAL_RCC_ClockConfig+0x278>)
 80059b2:	430a      	orrs	r2, r1
 80059b4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2201      	movs	r2, #1
 80059bc:	4013      	ands	r3, r2
 80059be:	d100      	bne.n	80059c2 <HAL_RCC_ClockConfig+0x8a>
 80059c0:	e089      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d107      	bne.n	80059da <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059ca:	4b79      	ldr	r3, [pc, #484]	; (8005bb0 <HAL_RCC_ClockConfig+0x278>)
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	2380      	movs	r3, #128	; 0x80
 80059d0:	029b      	lsls	r3, r3, #10
 80059d2:	4013      	ands	r3, r2
 80059d4:	d120      	bne.n	8005a18 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e0e1      	b.n	8005b9e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d107      	bne.n	80059f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059e2:	4b73      	ldr	r3, [pc, #460]	; (8005bb0 <HAL_RCC_ClockConfig+0x278>)
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	2380      	movs	r3, #128	; 0x80
 80059e8:	049b      	lsls	r3, r3, #18
 80059ea:	4013      	ands	r3, r2
 80059ec:	d114      	bne.n	8005a18 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e0d5      	b.n	8005b9e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d106      	bne.n	8005a08 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059fa:	4b6d      	ldr	r3, [pc, #436]	; (8005bb0 <HAL_RCC_ClockConfig+0x278>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2204      	movs	r2, #4
 8005a00:	4013      	ands	r3, r2
 8005a02:	d109      	bne.n	8005a18 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e0ca      	b.n	8005b9e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005a08:	4b69      	ldr	r3, [pc, #420]	; (8005bb0 <HAL_RCC_ClockConfig+0x278>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	2380      	movs	r3, #128	; 0x80
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4013      	ands	r3, r2
 8005a12:	d101      	bne.n	8005a18 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e0c2      	b.n	8005b9e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a18:	4b65      	ldr	r3, [pc, #404]	; (8005bb0 <HAL_RCC_ClockConfig+0x278>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	4393      	bics	r3, r2
 8005a20:	0019      	movs	r1, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	4b62      	ldr	r3, [pc, #392]	; (8005bb0 <HAL_RCC_ClockConfig+0x278>)
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a2c:	f7fe fa28 	bl	8003e80 <HAL_GetTick>
 8005a30:	0003      	movs	r3, r0
 8005a32:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d111      	bne.n	8005a60 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a3c:	e009      	b.n	8005a52 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a3e:	f7fe fa1f 	bl	8003e80 <HAL_GetTick>
 8005a42:	0002      	movs	r2, r0
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	4a58      	ldr	r2, [pc, #352]	; (8005bac <HAL_RCC_ClockConfig+0x274>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e0a5      	b.n	8005b9e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a52:	4b57      	ldr	r3, [pc, #348]	; (8005bb0 <HAL_RCC_ClockConfig+0x278>)
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	220c      	movs	r2, #12
 8005a58:	4013      	ands	r3, r2
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d1ef      	bne.n	8005a3e <HAL_RCC_ClockConfig+0x106>
 8005a5e:	e03a      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	2b03      	cmp	r3, #3
 8005a66:	d111      	bne.n	8005a8c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a68:	e009      	b.n	8005a7e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a6a:	f7fe fa09 	bl	8003e80 <HAL_GetTick>
 8005a6e:	0002      	movs	r2, r0
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	4a4d      	ldr	r2, [pc, #308]	; (8005bac <HAL_RCC_ClockConfig+0x274>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e08f      	b.n	8005b9e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a7e:	4b4c      	ldr	r3, [pc, #304]	; (8005bb0 <HAL_RCC_ClockConfig+0x278>)
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	220c      	movs	r2, #12
 8005a84:	4013      	ands	r3, r2
 8005a86:	2b0c      	cmp	r3, #12
 8005a88:	d1ef      	bne.n	8005a6a <HAL_RCC_ClockConfig+0x132>
 8005a8a:	e024      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d11b      	bne.n	8005acc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a94:	e009      	b.n	8005aaa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a96:	f7fe f9f3 	bl	8003e80 <HAL_GetTick>
 8005a9a:	0002      	movs	r2, r0
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	4a42      	ldr	r2, [pc, #264]	; (8005bac <HAL_RCC_ClockConfig+0x274>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d901      	bls.n	8005aaa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e079      	b.n	8005b9e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005aaa:	4b41      	ldr	r3, [pc, #260]	; (8005bb0 <HAL_RCC_ClockConfig+0x278>)
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	220c      	movs	r2, #12
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d1ef      	bne.n	8005a96 <HAL_RCC_ClockConfig+0x15e>
 8005ab6:	e00e      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab8:	f7fe f9e2 	bl	8003e80 <HAL_GetTick>
 8005abc:	0002      	movs	r2, r0
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	4a3a      	ldr	r2, [pc, #232]	; (8005bac <HAL_RCC_ClockConfig+0x274>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d901      	bls.n	8005acc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e068      	b.n	8005b9e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005acc:	4b38      	ldr	r3, [pc, #224]	; (8005bb0 <HAL_RCC_ClockConfig+0x278>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	220c      	movs	r2, #12
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	d1f0      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ad6:	4b34      	ldr	r3, [pc, #208]	; (8005ba8 <HAL_RCC_ClockConfig+0x270>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2201      	movs	r2, #1
 8005adc:	4013      	ands	r3, r2
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d21e      	bcs.n	8005b22 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ae4:	4b30      	ldr	r3, [pc, #192]	; (8005ba8 <HAL_RCC_ClockConfig+0x270>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	4393      	bics	r3, r2
 8005aec:	0019      	movs	r1, r3
 8005aee:	4b2e      	ldr	r3, [pc, #184]	; (8005ba8 <HAL_RCC_ClockConfig+0x270>)
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005af6:	f7fe f9c3 	bl	8003e80 <HAL_GetTick>
 8005afa:	0003      	movs	r3, r0
 8005afc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005afe:	e009      	b.n	8005b14 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b00:	f7fe f9be 	bl	8003e80 <HAL_GetTick>
 8005b04:	0002      	movs	r2, r0
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	4a28      	ldr	r2, [pc, #160]	; (8005bac <HAL_RCC_ClockConfig+0x274>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e044      	b.n	8005b9e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b14:	4b24      	ldr	r3, [pc, #144]	; (8005ba8 <HAL_RCC_ClockConfig+0x270>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d1ee      	bne.n	8005b00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2204      	movs	r2, #4
 8005b28:	4013      	ands	r3, r2
 8005b2a:	d009      	beq.n	8005b40 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b2c:	4b20      	ldr	r3, [pc, #128]	; (8005bb0 <HAL_RCC_ClockConfig+0x278>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	4a20      	ldr	r2, [pc, #128]	; (8005bb4 <HAL_RCC_ClockConfig+0x27c>)
 8005b32:	4013      	ands	r3, r2
 8005b34:	0019      	movs	r1, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	4b1d      	ldr	r3, [pc, #116]	; (8005bb0 <HAL_RCC_ClockConfig+0x278>)
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2208      	movs	r2, #8
 8005b46:	4013      	ands	r3, r2
 8005b48:	d00a      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b4a:	4b19      	ldr	r3, [pc, #100]	; (8005bb0 <HAL_RCC_ClockConfig+0x278>)
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	4a1a      	ldr	r2, [pc, #104]	; (8005bb8 <HAL_RCC_ClockConfig+0x280>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	0019      	movs	r1, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	00da      	lsls	r2, r3, #3
 8005b5a:	4b15      	ldr	r3, [pc, #84]	; (8005bb0 <HAL_RCC_ClockConfig+0x278>)
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b60:	f000 f832 	bl	8005bc8 <HAL_RCC_GetSysClockFreq>
 8005b64:	0001      	movs	r1, r0
 8005b66:	4b12      	ldr	r3, [pc, #72]	; (8005bb0 <HAL_RCC_ClockConfig+0x278>)
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	091b      	lsrs	r3, r3, #4
 8005b6c:	220f      	movs	r2, #15
 8005b6e:	4013      	ands	r3, r2
 8005b70:	4a12      	ldr	r2, [pc, #72]	; (8005bbc <HAL_RCC_ClockConfig+0x284>)
 8005b72:	5cd3      	ldrb	r3, [r2, r3]
 8005b74:	000a      	movs	r2, r1
 8005b76:	40da      	lsrs	r2, r3
 8005b78:	4b11      	ldr	r3, [pc, #68]	; (8005bc0 <HAL_RCC_ClockConfig+0x288>)
 8005b7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b7c:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <HAL_RCC_ClockConfig+0x28c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	250b      	movs	r5, #11
 8005b82:	197c      	adds	r4, r7, r5
 8005b84:	0018      	movs	r0, r3
 8005b86:	f7fe f935 	bl	8003df4 <HAL_InitTick>
 8005b8a:	0003      	movs	r3, r0
 8005b8c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005b8e:	197b      	adds	r3, r7, r5
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005b96:	197b      	adds	r3, r7, r5
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	e000      	b.n	8005b9e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	b004      	add	sp, #16
 8005ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	40022000 	.word	0x40022000
 8005bac:	00001388 	.word	0x00001388
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	fffff8ff 	.word	0xfffff8ff
 8005bb8:	ffffc7ff 	.word	0xffffc7ff
 8005bbc:	08009d7c 	.word	0x08009d7c
 8005bc0:	20000030 	.word	0x20000030
 8005bc4:	2000003c 	.word	0x2000003c

08005bc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bc8:	b5b0      	push	{r4, r5, r7, lr}
 8005bca:	b08e      	sub	sp, #56	; 0x38
 8005bcc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005bce:	4b4c      	ldr	r3, [pc, #304]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x138>)
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bd6:	230c      	movs	r3, #12
 8005bd8:	4013      	ands	r3, r2
 8005bda:	2b0c      	cmp	r3, #12
 8005bdc:	d014      	beq.n	8005c08 <HAL_RCC_GetSysClockFreq+0x40>
 8005bde:	d900      	bls.n	8005be2 <HAL_RCC_GetSysClockFreq+0x1a>
 8005be0:	e07b      	b.n	8005cda <HAL_RCC_GetSysClockFreq+0x112>
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d002      	beq.n	8005bec <HAL_RCC_GetSysClockFreq+0x24>
 8005be6:	2b08      	cmp	r3, #8
 8005be8:	d00b      	beq.n	8005c02 <HAL_RCC_GetSysClockFreq+0x3a>
 8005bea:	e076      	b.n	8005cda <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005bec:	4b44      	ldr	r3, [pc, #272]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x138>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2210      	movs	r2, #16
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	d002      	beq.n	8005bfc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005bf6:	4b43      	ldr	r3, [pc, #268]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005bf8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005bfa:	e07c      	b.n	8005cf6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005bfc:	4b42      	ldr	r3, [pc, #264]	; (8005d08 <HAL_RCC_GetSysClockFreq+0x140>)
 8005bfe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005c00:	e079      	b.n	8005cf6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c02:	4b42      	ldr	r3, [pc, #264]	; (8005d0c <HAL_RCC_GetSysClockFreq+0x144>)
 8005c04:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005c06:	e076      	b.n	8005cf6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0a:	0c9a      	lsrs	r2, r3, #18
 8005c0c:	230f      	movs	r3, #15
 8005c0e:	401a      	ands	r2, r3
 8005c10:	4b3f      	ldr	r3, [pc, #252]	; (8005d10 <HAL_RCC_GetSysClockFreq+0x148>)
 8005c12:	5c9b      	ldrb	r3, [r3, r2]
 8005c14:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c18:	0d9a      	lsrs	r2, r3, #22
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	3301      	adds	r3, #1
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c22:	4b37      	ldr	r3, [pc, #220]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c24:	68da      	ldr	r2, [r3, #12]
 8005c26:	2380      	movs	r3, #128	; 0x80
 8005c28:	025b      	lsls	r3, r3, #9
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	d01a      	beq.n	8005c64 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	61bb      	str	r3, [r7, #24]
 8005c32:	2300      	movs	r3, #0
 8005c34:	61fb      	str	r3, [r7, #28]
 8005c36:	4a35      	ldr	r2, [pc, #212]	; (8005d0c <HAL_RCC_GetSysClockFreq+0x144>)
 8005c38:	2300      	movs	r3, #0
 8005c3a:	69b8      	ldr	r0, [r7, #24]
 8005c3c:	69f9      	ldr	r1, [r7, #28]
 8005c3e:	f7fa fc53 	bl	80004e8 <__aeabi_lmul>
 8005c42:	0002      	movs	r2, r0
 8005c44:	000b      	movs	r3, r1
 8005c46:	0010      	movs	r0, r2
 8005c48:	0019      	movs	r1, r3
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	613b      	str	r3, [r7, #16]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f7fa fc27 	bl	80004a8 <__aeabi_uldivmod>
 8005c5a:	0002      	movs	r2, r0
 8005c5c:	000b      	movs	r3, r1
 8005c5e:	0013      	movs	r3, r2
 8005c60:	637b      	str	r3, [r7, #52]	; 0x34
 8005c62:	e037      	b.n	8005cd4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005c64:	4b26      	ldr	r3, [pc, #152]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2210      	movs	r2, #16
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	d01a      	beq.n	8005ca4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c70:	60bb      	str	r3, [r7, #8]
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	4a23      	ldr	r2, [pc, #140]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005c78:	2300      	movs	r3, #0
 8005c7a:	68b8      	ldr	r0, [r7, #8]
 8005c7c:	68f9      	ldr	r1, [r7, #12]
 8005c7e:	f7fa fc33 	bl	80004e8 <__aeabi_lmul>
 8005c82:	0002      	movs	r2, r0
 8005c84:	000b      	movs	r3, r1
 8005c86:	0010      	movs	r0, r2
 8005c88:	0019      	movs	r1, r3
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	603b      	str	r3, [r7, #0]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	607b      	str	r3, [r7, #4]
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f7fa fc07 	bl	80004a8 <__aeabi_uldivmod>
 8005c9a:	0002      	movs	r2, r0
 8005c9c:	000b      	movs	r3, r1
 8005c9e:	0013      	movs	r3, r2
 8005ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ca2:	e017      	b.n	8005cd4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	2300      	movs	r3, #0
 8005caa:	0019      	movs	r1, r3
 8005cac:	4a16      	ldr	r2, [pc, #88]	; (8005d08 <HAL_RCC_GetSysClockFreq+0x140>)
 8005cae:	2300      	movs	r3, #0
 8005cb0:	f7fa fc1a 	bl	80004e8 <__aeabi_lmul>
 8005cb4:	0002      	movs	r2, r0
 8005cb6:	000b      	movs	r3, r1
 8005cb8:	0010      	movs	r0, r2
 8005cba:	0019      	movs	r1, r3
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	001c      	movs	r4, r3
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	001d      	movs	r5, r3
 8005cc4:	0022      	movs	r2, r4
 8005cc6:	002b      	movs	r3, r5
 8005cc8:	f7fa fbee 	bl	80004a8 <__aeabi_uldivmod>
 8005ccc:	0002      	movs	r2, r0
 8005cce:	000b      	movs	r3, r1
 8005cd0:	0013      	movs	r3, r2
 8005cd2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005cd8:	e00d      	b.n	8005cf6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005cda:	4b09      	ldr	r3, [pc, #36]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x138>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	0b5b      	lsrs	r3, r3, #13
 8005ce0:	2207      	movs	r2, #7
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	2280      	movs	r2, #128	; 0x80
 8005cec:	0212      	lsls	r2, r2, #8
 8005cee:	409a      	lsls	r2, r3
 8005cf0:	0013      	movs	r3, r2
 8005cf2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005cf4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	b00e      	add	sp, #56	; 0x38
 8005cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8005d00:	40021000 	.word	0x40021000
 8005d04:	003d0900 	.word	0x003d0900
 8005d08:	00f42400 	.word	0x00f42400
 8005d0c:	007a1200 	.word	0x007a1200
 8005d10:	08009d8c 	.word	0x08009d8c

08005d14 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005d1c:	2017      	movs	r0, #23
 8005d1e:	183b      	adds	r3, r7, r0
 8005d20:	2200      	movs	r2, #0
 8005d22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	d100      	bne.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8005d2e:	e0c2      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d30:	4b90      	ldr	r3, [pc, #576]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d34:	2380      	movs	r3, #128	; 0x80
 8005d36:	055b      	lsls	r3, r3, #21
 8005d38:	4013      	ands	r3, r2
 8005d3a:	d109      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d3c:	4b8d      	ldr	r3, [pc, #564]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d40:	4b8c      	ldr	r3, [pc, #560]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d42:	2180      	movs	r1, #128	; 0x80
 8005d44:	0549      	lsls	r1, r1, #21
 8005d46:	430a      	orrs	r2, r1
 8005d48:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005d4a:	183b      	adds	r3, r7, r0
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d50:	4b89      	ldr	r3, [pc, #548]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	2380      	movs	r3, #128	; 0x80
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	4013      	ands	r3, r2
 8005d5a:	d11a      	bne.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d5c:	4b86      	ldr	r3, [pc, #536]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	4b85      	ldr	r3, [pc, #532]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005d62:	2180      	movs	r1, #128	; 0x80
 8005d64:	0049      	lsls	r1, r1, #1
 8005d66:	430a      	orrs	r2, r1
 8005d68:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d6a:	f7fe f889 	bl	8003e80 <HAL_GetTick>
 8005d6e:	0003      	movs	r3, r0
 8005d70:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d72:	e008      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d74:	f7fe f884 	bl	8003e80 <HAL_GetTick>
 8005d78:	0002      	movs	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b64      	cmp	r3, #100	; 0x64
 8005d80:	d901      	bls.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e0f2      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x258>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d86:	4b7c      	ldr	r3, [pc, #496]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	2380      	movs	r3, #128	; 0x80
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	4013      	ands	r3, r2
 8005d90:	d0f0      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005d92:	4b78      	ldr	r3, [pc, #480]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	23c0      	movs	r3, #192	; 0xc0
 8005d98:	039b      	lsls	r3, r3, #14
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	23c0      	movs	r3, #192	; 0xc0
 8005da4:	039b      	lsls	r3, r3, #14
 8005da6:	4013      	ands	r3, r2
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d013      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	23c0      	movs	r3, #192	; 0xc0
 8005db4:	029b      	lsls	r3, r3, #10
 8005db6:	401a      	ands	r2, r3
 8005db8:	23c0      	movs	r3, #192	; 0xc0
 8005dba:	029b      	lsls	r3, r3, #10
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d10a      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005dc0:	4b6c      	ldr	r3, [pc, #432]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	2380      	movs	r3, #128	; 0x80
 8005dc6:	029b      	lsls	r3, r3, #10
 8005dc8:	401a      	ands	r2, r3
 8005dca:	2380      	movs	r3, #128	; 0x80
 8005dcc:	029b      	lsls	r3, r3, #10
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d101      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e0ca      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x258>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005dd6:	4b67      	ldr	r3, [pc, #412]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005dda:	23c0      	movs	r3, #192	; 0xc0
 8005ddc:	029b      	lsls	r3, r3, #10
 8005dde:	4013      	ands	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d03b      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	23c0      	movs	r3, #192	; 0xc0
 8005dee:	029b      	lsls	r3, r3, #10
 8005df0:	4013      	ands	r3, r2
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d033      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	4013      	ands	r3, r2
 8005e00:	d02e      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005e02:	4b5c      	ldr	r3, [pc, #368]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e06:	4a5d      	ldr	r2, [pc, #372]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e0c:	4b59      	ldr	r3, [pc, #356]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e10:	4b58      	ldr	r3, [pc, #352]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e12:	2180      	movs	r1, #128	; 0x80
 8005e14:	0309      	lsls	r1, r1, #12
 8005e16:	430a      	orrs	r2, r1
 8005e18:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e1a:	4b56      	ldr	r3, [pc, #344]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e1e:	4b55      	ldr	r3, [pc, #340]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e20:	4957      	ldr	r1, [pc, #348]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e22:	400a      	ands	r2, r1
 8005e24:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005e26:	4b53      	ldr	r3, [pc, #332]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	2380      	movs	r3, #128	; 0x80
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	4013      	ands	r3, r2
 8005e34:	d014      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e36:	f7fe f823 	bl	8003e80 <HAL_GetTick>
 8005e3a:	0003      	movs	r3, r0
 8005e3c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e3e:	e009      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e40:	f7fe f81e 	bl	8003e80 <HAL_GetTick>
 8005e44:	0002      	movs	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	4a4e      	ldr	r2, [pc, #312]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e08b      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e54:	4b47      	ldr	r3, [pc, #284]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e58:	2380      	movs	r3, #128	; 0x80
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	d0ef      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	23c0      	movs	r3, #192	; 0xc0
 8005e66:	029b      	lsls	r3, r3, #10
 8005e68:	401a      	ands	r2, r3
 8005e6a:	23c0      	movs	r3, #192	; 0xc0
 8005e6c:	029b      	lsls	r3, r3, #10
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d10c      	bne.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8005e72:	4b40      	ldr	r3, [pc, #256]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a44      	ldr	r2, [pc, #272]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8005e78:	4013      	ands	r3, r2
 8005e7a:	0019      	movs	r1, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	23c0      	movs	r3, #192	; 0xc0
 8005e82:	039b      	lsls	r3, r3, #14
 8005e84:	401a      	ands	r2, r3
 8005e86:	4b3b      	ldr	r3, [pc, #236]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	4b39      	ldr	r3, [pc, #228]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e8e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	23c0      	movs	r3, #192	; 0xc0
 8005e96:	029b      	lsls	r3, r3, #10
 8005e98:	401a      	ands	r2, r3
 8005e9a:	4b36      	ldr	r3, [pc, #216]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005ea0:	2317      	movs	r3, #23
 8005ea2:	18fb      	adds	r3, r7, r3
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d105      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eaa:	4b32      	ldr	r3, [pc, #200]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eae:	4b31      	ldr	r3, [pc, #196]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eb0:	4936      	ldr	r1, [pc, #216]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005eb2:	400a      	ands	r2, r1
 8005eb4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	d009      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ec0:	4b2c      	ldr	r3, [pc, #176]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec4:	2203      	movs	r2, #3
 8005ec6:	4393      	bics	r3, r2
 8005ec8:	0019      	movs	r1, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	4b29      	ldr	r3, [pc, #164]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	4013      	ands	r3, r2
 8005edc:	d009      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ede:	4b25      	ldr	r3, [pc, #148]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ee2:	220c      	movs	r2, #12
 8005ee4:	4393      	bics	r3, r2
 8005ee6:	0019      	movs	r1, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	4b21      	ldr	r3, [pc, #132]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2204      	movs	r2, #4
 8005ef8:	4013      	ands	r3, r2
 8005efa:	d009      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005efc:	4b1d      	ldr	r3, [pc, #116]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f00:	4a23      	ldr	r2, [pc, #140]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005f02:	4013      	ands	r3, r2
 8005f04:	0019      	movs	r1, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691a      	ldr	r2, [r3, #16]
 8005f0a:	4b1a      	ldr	r3, [pc, #104]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2208      	movs	r2, #8
 8005f16:	4013      	ands	r3, r2
 8005f18:	d009      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f1a:	4b16      	ldr	r3, [pc, #88]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f1e:	4a1d      	ldr	r2, [pc, #116]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	0019      	movs	r1, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	695a      	ldr	r2, [r3, #20]
 8005f28:	4b12      	ldr	r3, [pc, #72]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2240      	movs	r2, #64	; 0x40
 8005f34:	4013      	ands	r3, r2
 8005f36:	d009      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f38:	4b0e      	ldr	r3, [pc, #56]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f3c:	4a16      	ldr	r2, [pc, #88]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005f3e:	4013      	ands	r3, r2
 8005f40:	0019      	movs	r1, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	69da      	ldr	r2, [r3, #28]
 8005f46:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2280      	movs	r2, #128	; 0x80
 8005f52:	4013      	ands	r3, r2
 8005f54:	d009      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005f56:	4b07      	ldr	r3, [pc, #28]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f5a:	4a10      	ldr	r2, [pc, #64]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	0019      	movs	r1, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	699a      	ldr	r2, [r3, #24]
 8005f64:	4b03      	ldr	r3, [pc, #12]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f66:	430a      	orrs	r2, r1
 8005f68:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	b006      	add	sp, #24
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	40021000 	.word	0x40021000
 8005f78:	40007000 	.word	0x40007000
 8005f7c:	fffcffff 	.word	0xfffcffff
 8005f80:	fff7ffff 	.word	0xfff7ffff
 8005f84:	00001388 	.word	0x00001388
 8005f88:	ffcfffff 	.word	0xffcfffff
 8005f8c:	efffffff 	.word	0xefffffff
 8005f90:	fffff3ff 	.word	0xfffff3ff
 8005f94:	ffffcfff 	.word	0xffffcfff
 8005f98:	fbffffff 	.word	0xfbffffff
 8005f9c:	fff3ffff 	.word	0xfff3ffff

08005fa0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e08e      	b.n	80060d0 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2221      	movs	r2, #33	; 0x21
 8005fb6:	5c9b      	ldrb	r3, [r3, r2]
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d107      	bne.n	8005fce <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f7fd fcbd 	bl	8003948 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2221      	movs	r2, #33	; 0x21
 8005fd2:	2102      	movs	r1, #2
 8005fd4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	22ca      	movs	r2, #202	; 0xca
 8005fdc:	625a      	str	r2, [r3, #36]	; 0x24
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2253      	movs	r2, #83	; 0x53
 8005fe4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	0018      	movs	r0, r3
 8005fea:	f000 f89e 	bl	800612a <RTC_EnterInitMode>
 8005fee:	1e03      	subs	r3, r0, #0
 8005ff0:	d009      	beq.n	8006006 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	22ff      	movs	r2, #255	; 0xff
 8005ff8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2221      	movs	r2, #33	; 0x21
 8005ffe:	2104      	movs	r1, #4
 8006000:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e064      	b.n	80060d0 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4931      	ldr	r1, [pc, #196]	; (80060d8 <HAL_RTC_Init+0x138>)
 8006012:	400a      	ands	r2, r1
 8006014:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6899      	ldr	r1, [r3, #8]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	431a      	orrs	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	68d2      	ldr	r2, [r2, #12]
 800603c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6919      	ldr	r1, [r3, #16]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	041a      	lsls	r2, r3, #16
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68da      	ldr	r2, [r3, #12]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2180      	movs	r1, #128	; 0x80
 800605e:	438a      	bics	r2, r1
 8006060:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2103      	movs	r1, #3
 800606e:	438a      	bics	r2, r1
 8006070:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	69da      	ldr	r2, [r3, #28]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	431a      	orrs	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2220      	movs	r2, #32
 8006092:	4013      	ands	r3, r2
 8006094:	d113      	bne.n	80060be <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	0018      	movs	r0, r3
 800609a:	f000 f81f 	bl	80060dc <HAL_RTC_WaitForSynchro>
 800609e:	1e03      	subs	r3, r0, #0
 80060a0:	d00d      	beq.n	80060be <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	22ff      	movs	r2, #255	; 0xff
 80060a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2221      	movs	r2, #33	; 0x21
 80060ae:	2104      	movs	r1, #4
 80060b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	2100      	movs	r1, #0
 80060b8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e008      	b.n	80060d0 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	22ff      	movs	r2, #255	; 0xff
 80060c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2221      	movs	r2, #33	; 0x21
 80060ca:	2101      	movs	r1, #1
 80060cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80060ce:	2300      	movs	r3, #0
  }
}
 80060d0:	0018      	movs	r0, r3
 80060d2:	46bd      	mov	sp, r7
 80060d4:	b002      	add	sp, #8
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	ff8fffbf 	.word	0xff8fffbf

080060dc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	21a0      	movs	r1, #160	; 0xa0
 80060f0:	438a      	bics	r2, r1
 80060f2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80060f4:	f7fd fec4 	bl	8003e80 <HAL_GetTick>
 80060f8:	0003      	movs	r3, r0
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060fc:	e00a      	b.n	8006114 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060fe:	f7fd febf 	bl	8003e80 <HAL_GetTick>
 8006102:	0002      	movs	r2, r0
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	1ad2      	subs	r2, r2, r3
 8006108:	23fa      	movs	r3, #250	; 0xfa
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	429a      	cmp	r2, r3
 800610e:	d901      	bls.n	8006114 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e006      	b.n	8006122 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	2220      	movs	r2, #32
 800611c:	4013      	ands	r3, r2
 800611e:	d0ee      	beq.n	80060fe <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	0018      	movs	r0, r3
 8006124:	46bd      	mov	sp, r7
 8006126:	b004      	add	sp, #16
 8006128:	bd80      	pop	{r7, pc}

0800612a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b084      	sub	sp, #16
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	2240      	movs	r2, #64	; 0x40
 800613a:	4013      	ands	r3, r2
 800613c:	d11a      	bne.n	8006174 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2201      	movs	r2, #1
 8006144:	4252      	negs	r2, r2
 8006146:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006148:	f7fd fe9a 	bl	8003e80 <HAL_GetTick>
 800614c:	0003      	movs	r3, r0
 800614e:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006150:	e00a      	b.n	8006168 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006152:	f7fd fe95 	bl	8003e80 <HAL_GetTick>
 8006156:	0002      	movs	r2, r0
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	1ad2      	subs	r2, r2, r3
 800615c:	23fa      	movs	r3, #250	; 0xfa
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	429a      	cmp	r2, r3
 8006162:	d901      	bls.n	8006168 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e006      	b.n	8006176 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	2240      	movs	r2, #64	; 0x40
 8006170:	4013      	ands	r3, r2
 8006172:	d0ee      	beq.n	8006152 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	0018      	movs	r0, r3
 8006178:	46bd      	mov	sp, r7
 800617a:	b004      	add	sp, #16
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e083      	b.n	800629a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	2b00      	cmp	r3, #0
 8006198:	d109      	bne.n	80061ae <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	2382      	movs	r3, #130	; 0x82
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d009      	beq.n	80061ba <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	61da      	str	r2, [r3, #28]
 80061ac:	e005      	b.n	80061ba <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2251      	movs	r2, #81	; 0x51
 80061c4:	5c9b      	ldrb	r3, [r3, r2]
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d107      	bne.n	80061dc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2250      	movs	r2, #80	; 0x50
 80061d0:	2100      	movs	r1, #0
 80061d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	0018      	movs	r0, r3
 80061d8:	f7fd fbce 	bl	8003978 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2251      	movs	r2, #81	; 0x51
 80061e0:	2102      	movs	r1, #2
 80061e2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2140      	movs	r1, #64	; 0x40
 80061f0:	438a      	bics	r2, r1
 80061f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	2382      	movs	r3, #130	; 0x82
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	401a      	ands	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6899      	ldr	r1, [r3, #8]
 8006202:	2384      	movs	r3, #132	; 0x84
 8006204:	021b      	lsls	r3, r3, #8
 8006206:	400b      	ands	r3, r1
 8006208:	431a      	orrs	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68d9      	ldr	r1, [r3, #12]
 800620e:	2380      	movs	r3, #128	; 0x80
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	400b      	ands	r3, r1
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	2102      	movs	r1, #2
 800621c:	400b      	ands	r3, r1
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	2101      	movs	r1, #1
 8006226:	400b      	ands	r3, r1
 8006228:	431a      	orrs	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6999      	ldr	r1, [r3, #24]
 800622e:	2380      	movs	r3, #128	; 0x80
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	400b      	ands	r3, r1
 8006234:	431a      	orrs	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	2138      	movs	r1, #56	; 0x38
 800623c:	400b      	ands	r3, r1
 800623e:	431a      	orrs	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	2180      	movs	r1, #128	; 0x80
 8006246:	400b      	ands	r3, r1
 8006248:	431a      	orrs	r2, r3
 800624a:	0011      	movs	r1, r2
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006250:	2380      	movs	r3, #128	; 0x80
 8006252:	019b      	lsls	r3, r3, #6
 8006254:	401a      	ands	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	0c1b      	lsrs	r3, r3, #16
 8006264:	2204      	movs	r2, #4
 8006266:	4013      	ands	r3, r2
 8006268:	0019      	movs	r1, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	2210      	movs	r2, #16
 8006270:	401a      	ands	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69da      	ldr	r2, [r3, #28]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4907      	ldr	r1, [pc, #28]	; (80062a4 <HAL_SPI_Init+0x124>)
 8006286:	400a      	ands	r2, r1
 8006288:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2251      	movs	r2, #81	; 0x51
 8006294:	2101      	movs	r1, #1
 8006296:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	0018      	movs	r0, r3
 800629c:	46bd      	mov	sp, r7
 800629e:	b002      	add	sp, #8
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	fffff7ff 	.word	0xfffff7ff

080062a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b088      	sub	sp, #32
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	603b      	str	r3, [r7, #0]
 80062b4:	1dbb      	adds	r3, r7, #6
 80062b6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062b8:	231f      	movs	r3, #31
 80062ba:	18fb      	adds	r3, r7, r3
 80062bc:	2200      	movs	r2, #0
 80062be:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2250      	movs	r2, #80	; 0x50
 80062c4:	5c9b      	ldrb	r3, [r3, r2]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d101      	bne.n	80062ce <HAL_SPI_Transmit+0x26>
 80062ca:	2302      	movs	r3, #2
 80062cc:	e13e      	b.n	800654c <HAL_SPI_Transmit+0x2a4>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2250      	movs	r2, #80	; 0x50
 80062d2:	2101      	movs	r1, #1
 80062d4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062d6:	f7fd fdd3 	bl	8003e80 <HAL_GetTick>
 80062da:	0003      	movs	r3, r0
 80062dc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80062de:	2316      	movs	r3, #22
 80062e0:	18fb      	adds	r3, r7, r3
 80062e2:	1dba      	adds	r2, r7, #6
 80062e4:	8812      	ldrh	r2, [r2, #0]
 80062e6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2251      	movs	r2, #81	; 0x51
 80062ec:	5c9b      	ldrb	r3, [r3, r2]
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d004      	beq.n	80062fe <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80062f4:	231f      	movs	r3, #31
 80062f6:	18fb      	adds	r3, r7, r3
 80062f8:	2202      	movs	r2, #2
 80062fa:	701a      	strb	r2, [r3, #0]
    goto error;
 80062fc:	e11b      	b.n	8006536 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <HAL_SPI_Transmit+0x64>
 8006304:	1dbb      	adds	r3, r7, #6
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d104      	bne.n	8006316 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800630c:	231f      	movs	r3, #31
 800630e:	18fb      	adds	r3, r7, r3
 8006310:	2201      	movs	r2, #1
 8006312:	701a      	strb	r2, [r3, #0]
    goto error;
 8006314:	e10f      	b.n	8006536 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2251      	movs	r2, #81	; 0x51
 800631a:	2103      	movs	r1, #3
 800631c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	1dba      	adds	r2, r7, #6
 800632e:	8812      	ldrh	r2, [r2, #0]
 8006330:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	1dba      	adds	r2, r7, #6
 8006336:	8812      	ldrh	r2, [r2, #0]
 8006338:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	2380      	movs	r3, #128	; 0x80
 800635e:	021b      	lsls	r3, r3, #8
 8006360:	429a      	cmp	r2, r3
 8006362:	d110      	bne.n	8006386 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2140      	movs	r1, #64	; 0x40
 8006370:	438a      	bics	r2, r1
 8006372:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2180      	movs	r1, #128	; 0x80
 8006380:	01c9      	lsls	r1, r1, #7
 8006382:	430a      	orrs	r2, r1
 8006384:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2240      	movs	r2, #64	; 0x40
 800638e:	4013      	ands	r3, r2
 8006390:	2b40      	cmp	r3, #64	; 0x40
 8006392:	d007      	beq.n	80063a4 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2140      	movs	r1, #64	; 0x40
 80063a0:	430a      	orrs	r2, r1
 80063a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	68da      	ldr	r2, [r3, #12]
 80063a8:	2380      	movs	r3, #128	; 0x80
 80063aa:	011b      	lsls	r3, r3, #4
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d14e      	bne.n	800644e <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d004      	beq.n	80063c2 <HAL_SPI_Transmit+0x11a>
 80063b8:	2316      	movs	r3, #22
 80063ba:	18fb      	adds	r3, r7, r3
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d13f      	bne.n	8006442 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c6:	881a      	ldrh	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d2:	1c9a      	adds	r2, r3, #2
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063dc:	b29b      	uxth	r3, r3
 80063de:	3b01      	subs	r3, #1
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80063e6:	e02c      	b.n	8006442 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	2202      	movs	r2, #2
 80063f0:	4013      	ands	r3, r2
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d112      	bne.n	800641c <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	881a      	ldrh	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006406:	1c9a      	adds	r2, r3, #2
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006410:	b29b      	uxth	r3, r3
 8006412:	3b01      	subs	r3, #1
 8006414:	b29a      	uxth	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	86da      	strh	r2, [r3, #54]	; 0x36
 800641a:	e012      	b.n	8006442 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800641c:	f7fd fd30 	bl	8003e80 <HAL_GetTick>
 8006420:	0002      	movs	r2, r0
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	429a      	cmp	r2, r3
 800642a:	d802      	bhi.n	8006432 <HAL_SPI_Transmit+0x18a>
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	3301      	adds	r3, #1
 8006430:	d102      	bne.n	8006438 <HAL_SPI_Transmit+0x190>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d104      	bne.n	8006442 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8006438:	231f      	movs	r3, #31
 800643a:	18fb      	adds	r3, r7, r3
 800643c:	2203      	movs	r2, #3
 800643e:	701a      	strb	r2, [r3, #0]
          goto error;
 8006440:	e079      	b.n	8006536 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006446:	b29b      	uxth	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1cd      	bne.n	80063e8 <HAL_SPI_Transmit+0x140>
 800644c:	e04f      	b.n	80064ee <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d004      	beq.n	8006460 <HAL_SPI_Transmit+0x1b8>
 8006456:	2316      	movs	r3, #22
 8006458:	18fb      	adds	r3, r7, r3
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d141      	bne.n	80064e4 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	330c      	adds	r3, #12
 800646a:	7812      	ldrb	r2, [r2, #0]
 800646c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800647c:	b29b      	uxth	r3, r3
 800647e:	3b01      	subs	r3, #1
 8006480:	b29a      	uxth	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006486:	e02d      	b.n	80064e4 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	2202      	movs	r2, #2
 8006490:	4013      	ands	r3, r2
 8006492:	2b02      	cmp	r3, #2
 8006494:	d113      	bne.n	80064be <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	330c      	adds	r3, #12
 80064a0:	7812      	ldrb	r2, [r2, #0]
 80064a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	3b01      	subs	r3, #1
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80064bc:	e012      	b.n	80064e4 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064be:	f7fd fcdf 	bl	8003e80 <HAL_GetTick>
 80064c2:	0002      	movs	r2, r0
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d802      	bhi.n	80064d4 <HAL_SPI_Transmit+0x22c>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	3301      	adds	r3, #1
 80064d2:	d102      	bne.n	80064da <HAL_SPI_Transmit+0x232>
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d104      	bne.n	80064e4 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 80064da:	231f      	movs	r3, #31
 80064dc:	18fb      	adds	r3, r7, r3
 80064de:	2203      	movs	r2, #3
 80064e0:	701a      	strb	r2, [r3, #0]
          goto error;
 80064e2:	e028      	b.n	8006536 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1cc      	bne.n	8006488 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	0018      	movs	r0, r3
 80064f6:	f000 fc07 	bl	8006d08 <SPI_EndRxTxTransaction>
 80064fa:	1e03      	subs	r3, r0, #0
 80064fc:	d002      	beq.n	8006504 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2220      	movs	r2, #32
 8006502:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10a      	bne.n	8006522 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800650c:	2300      	movs	r3, #0
 800650e:	613b      	str	r3, [r7, #16]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	613b      	str	r3, [r7, #16]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	613b      	str	r3, [r7, #16]
 8006520:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006526:	2b00      	cmp	r3, #0
 8006528:	d004      	beq.n	8006534 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 800652a:	231f      	movs	r3, #31
 800652c:	18fb      	adds	r3, r7, r3
 800652e:	2201      	movs	r2, #1
 8006530:	701a      	strb	r2, [r3, #0]
 8006532:	e000      	b.n	8006536 <HAL_SPI_Transmit+0x28e>
  }

error:
 8006534:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2251      	movs	r2, #81	; 0x51
 800653a:	2101      	movs	r1, #1
 800653c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2250      	movs	r2, #80	; 0x50
 8006542:	2100      	movs	r1, #0
 8006544:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006546:	231f      	movs	r3, #31
 8006548:	18fb      	adds	r3, r7, r3
 800654a:	781b      	ldrb	r3, [r3, #0]
}
 800654c:	0018      	movs	r0, r3
 800654e:	46bd      	mov	sp, r7
 8006550:	b008      	add	sp, #32
 8006552:	bd80      	pop	{r7, pc}

08006554 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006554:	b590      	push	{r4, r7, lr}
 8006556:	b089      	sub	sp, #36	; 0x24
 8006558:	af02      	add	r7, sp, #8
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	603b      	str	r3, [r7, #0]
 8006560:	1dbb      	adds	r3, r7, #6
 8006562:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006564:	2317      	movs	r3, #23
 8006566:	18fb      	adds	r3, r7, r3
 8006568:	2200      	movs	r2, #0
 800656a:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	2382      	movs	r3, #130	; 0x82
 8006572:	005b      	lsls	r3, r3, #1
 8006574:	429a      	cmp	r2, r3
 8006576:	d113      	bne.n	80065a0 <HAL_SPI_Receive+0x4c>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10f      	bne.n	80065a0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2251      	movs	r2, #81	; 0x51
 8006584:	2104      	movs	r1, #4
 8006586:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006588:	1dbb      	adds	r3, r7, #6
 800658a:	881c      	ldrh	r4, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	0023      	movs	r3, r4
 8006598:	f000 f902 	bl	80067a0 <HAL_SPI_TransmitReceive>
 800659c:	0003      	movs	r3, r0
 800659e:	e0f9      	b.n	8006794 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2250      	movs	r2, #80	; 0x50
 80065a4:	5c9b      	ldrb	r3, [r3, r2]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d101      	bne.n	80065ae <HAL_SPI_Receive+0x5a>
 80065aa:	2302      	movs	r3, #2
 80065ac:	e0f2      	b.n	8006794 <HAL_SPI_Receive+0x240>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2250      	movs	r2, #80	; 0x50
 80065b2:	2101      	movs	r1, #1
 80065b4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065b6:	f7fd fc63 	bl	8003e80 <HAL_GetTick>
 80065ba:	0003      	movs	r3, r0
 80065bc:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2251      	movs	r2, #81	; 0x51
 80065c2:	5c9b      	ldrb	r3, [r3, r2]
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d004      	beq.n	80065d4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80065ca:	2317      	movs	r3, #23
 80065cc:	18fb      	adds	r3, r7, r3
 80065ce:	2202      	movs	r2, #2
 80065d0:	701a      	strb	r2, [r3, #0]
    goto error;
 80065d2:	e0d4      	b.n	800677e <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <HAL_SPI_Receive+0x8e>
 80065da:	1dbb      	adds	r3, r7, #6
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d104      	bne.n	80065ec <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80065e2:	2317      	movs	r3, #23
 80065e4:	18fb      	adds	r3, r7, r3
 80065e6:	2201      	movs	r2, #1
 80065e8:	701a      	strb	r2, [r3, #0]
    goto error;
 80065ea:	e0c8      	b.n	800677e <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2251      	movs	r2, #81	; 0x51
 80065f0:	2104      	movs	r1, #4
 80065f2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	1dba      	adds	r2, r7, #6
 8006604:	8812      	ldrh	r2, [r2, #0]
 8006606:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	1dba      	adds	r2, r7, #6
 800660c:	8812      	ldrh	r2, [r2, #0]
 800660e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	689a      	ldr	r2, [r3, #8]
 8006632:	2380      	movs	r3, #128	; 0x80
 8006634:	021b      	lsls	r3, r3, #8
 8006636:	429a      	cmp	r2, r3
 8006638:	d10f      	bne.n	800665a <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2140      	movs	r1, #64	; 0x40
 8006646:	438a      	bics	r2, r1
 8006648:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4951      	ldr	r1, [pc, #324]	; (800679c <HAL_SPI_Receive+0x248>)
 8006656:	400a      	ands	r2, r1
 8006658:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2240      	movs	r2, #64	; 0x40
 8006662:	4013      	ands	r3, r2
 8006664:	2b40      	cmp	r3, #64	; 0x40
 8006666:	d007      	beq.n	8006678 <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2140      	movs	r1, #64	; 0x40
 8006674:	430a      	orrs	r2, r1
 8006676:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d164      	bne.n	800674a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006680:	e02f      	b.n	80066e2 <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	2201      	movs	r2, #1
 800668a:	4013      	ands	r3, r2
 800668c:	2b01      	cmp	r3, #1
 800668e:	d115      	bne.n	80066bc <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	330c      	adds	r3, #12
 8006696:	001a      	movs	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669c:	7812      	ldrb	r2, [r2, #0]
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a6:	1c5a      	adds	r2, r3, #1
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	3b01      	subs	r3, #1
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066ba:	e012      	b.n	80066e2 <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066bc:	f7fd fbe0 	bl	8003e80 <HAL_GetTick>
 80066c0:	0002      	movs	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d802      	bhi.n	80066d2 <HAL_SPI_Receive+0x17e>
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	3301      	adds	r3, #1
 80066d0:	d102      	bne.n	80066d8 <HAL_SPI_Receive+0x184>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d104      	bne.n	80066e2 <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 80066d8:	2317      	movs	r3, #23
 80066da:	18fb      	adds	r3, r7, r3
 80066dc:	2203      	movs	r2, #3
 80066de:	701a      	strb	r2, [r3, #0]
          goto error;
 80066e0:	e04d      	b.n	800677e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1ca      	bne.n	8006682 <HAL_SPI_Receive+0x12e>
 80066ec:	e032      	b.n	8006754 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	2201      	movs	r2, #1
 80066f6:	4013      	ands	r3, r2
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d113      	bne.n	8006724 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	b292      	uxth	r2, r2
 8006708:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	1c9a      	adds	r2, r3, #2
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006718:	b29b      	uxth	r3, r3
 800671a:	3b01      	subs	r3, #1
 800671c:	b29a      	uxth	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006722:	e012      	b.n	800674a <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006724:	f7fd fbac 	bl	8003e80 <HAL_GetTick>
 8006728:	0002      	movs	r2, r0
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	429a      	cmp	r2, r3
 8006732:	d802      	bhi.n	800673a <HAL_SPI_Receive+0x1e6>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	3301      	adds	r3, #1
 8006738:	d102      	bne.n	8006740 <HAL_SPI_Receive+0x1ec>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d104      	bne.n	800674a <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 8006740:	2317      	movs	r3, #23
 8006742:	18fb      	adds	r3, r7, r3
 8006744:	2203      	movs	r2, #3
 8006746:	701a      	strb	r2, [r3, #0]
          goto error;
 8006748:	e019      	b.n	800677e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800674e:	b29b      	uxth	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1cc      	bne.n	80066ee <HAL_SPI_Receive+0x19a>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	6839      	ldr	r1, [r7, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	0018      	movs	r0, r3
 800675c:	f000 fa6a 	bl	8006c34 <SPI_EndRxTransaction>
 8006760:	1e03      	subs	r3, r0, #0
 8006762:	d002      	beq.n	800676a <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2220      	movs	r2, #32
 8006768:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676e:	2b00      	cmp	r3, #0
 8006770:	d004      	beq.n	800677c <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 8006772:	2317      	movs	r3, #23
 8006774:	18fb      	adds	r3, r7, r3
 8006776:	2201      	movs	r2, #1
 8006778:	701a      	strb	r2, [r3, #0]
 800677a:	e000      	b.n	800677e <HAL_SPI_Receive+0x22a>
  }

error :
 800677c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2251      	movs	r2, #81	; 0x51
 8006782:	2101      	movs	r1, #1
 8006784:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2250      	movs	r2, #80	; 0x50
 800678a:	2100      	movs	r1, #0
 800678c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800678e:	2317      	movs	r3, #23
 8006790:	18fb      	adds	r3, r7, r3
 8006792:	781b      	ldrb	r3, [r3, #0]
}
 8006794:	0018      	movs	r0, r3
 8006796:	46bd      	mov	sp, r7
 8006798:	b007      	add	sp, #28
 800679a:	bd90      	pop	{r4, r7, pc}
 800679c:	ffffbfff 	.word	0xffffbfff

080067a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08c      	sub	sp, #48	; 0x30
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	001a      	movs	r2, r3
 80067ae:	1cbb      	adds	r3, r7, #2
 80067b0:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80067b2:	2301      	movs	r3, #1
 80067b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80067b6:	232b      	movs	r3, #43	; 0x2b
 80067b8:	18fb      	adds	r3, r7, r3
 80067ba:	2200      	movs	r2, #0
 80067bc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2250      	movs	r2, #80	; 0x50
 80067c2:	5c9b      	ldrb	r3, [r3, r2]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d101      	bne.n	80067cc <HAL_SPI_TransmitReceive+0x2c>
 80067c8:	2302      	movs	r3, #2
 80067ca:	e1a0      	b.n	8006b0e <HAL_SPI_TransmitReceive+0x36e>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2250      	movs	r2, #80	; 0x50
 80067d0:	2101      	movs	r1, #1
 80067d2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067d4:	f7fd fb54 	bl	8003e80 <HAL_GetTick>
 80067d8:	0003      	movs	r3, r0
 80067da:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067dc:	2023      	movs	r0, #35	; 0x23
 80067de:	183b      	adds	r3, r7, r0
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	2151      	movs	r1, #81	; 0x51
 80067e4:	5c52      	ldrb	r2, [r2, r1]
 80067e6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80067ee:	231a      	movs	r3, #26
 80067f0:	18fb      	adds	r3, r7, r3
 80067f2:	1cba      	adds	r2, r7, #2
 80067f4:	8812      	ldrh	r2, [r2, #0]
 80067f6:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067f8:	183b      	adds	r3, r7, r0
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d011      	beq.n	8006824 <HAL_SPI_TransmitReceive+0x84>
 8006800:	69fa      	ldr	r2, [r7, #28]
 8006802:	2382      	movs	r3, #130	; 0x82
 8006804:	005b      	lsls	r3, r3, #1
 8006806:	429a      	cmp	r2, r3
 8006808:	d107      	bne.n	800681a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d103      	bne.n	800681a <HAL_SPI_TransmitReceive+0x7a>
 8006812:	183b      	adds	r3, r7, r0
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	2b04      	cmp	r3, #4
 8006818:	d004      	beq.n	8006824 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800681a:	232b      	movs	r3, #43	; 0x2b
 800681c:	18fb      	adds	r3, r7, r3
 800681e:	2202      	movs	r2, #2
 8006820:	701a      	strb	r2, [r3, #0]
    goto error;
 8006822:	e169      	b.n	8006af8 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d006      	beq.n	8006838 <HAL_SPI_TransmitReceive+0x98>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d003      	beq.n	8006838 <HAL_SPI_TransmitReceive+0x98>
 8006830:	1cbb      	adds	r3, r7, #2
 8006832:	881b      	ldrh	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d104      	bne.n	8006842 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006838:	232b      	movs	r3, #43	; 0x2b
 800683a:	18fb      	adds	r3, r7, r3
 800683c:	2201      	movs	r2, #1
 800683e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006840:	e15a      	b.n	8006af8 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2251      	movs	r2, #81	; 0x51
 8006846:	5c9b      	ldrb	r3, [r3, r2]
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b04      	cmp	r3, #4
 800684c:	d003      	beq.n	8006856 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2251      	movs	r2, #81	; 0x51
 8006852:	2105      	movs	r1, #5
 8006854:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	1cba      	adds	r2, r7, #2
 8006866:	8812      	ldrh	r2, [r2, #0]
 8006868:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	1cba      	adds	r2, r7, #2
 800686e:	8812      	ldrh	r2, [r2, #0]
 8006870:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	1cba      	adds	r2, r7, #2
 800687c:	8812      	ldrh	r2, [r2, #0]
 800687e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	1cba      	adds	r2, r7, #2
 8006884:	8812      	ldrh	r2, [r2, #0]
 8006886:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2240      	movs	r2, #64	; 0x40
 800689c:	4013      	ands	r3, r2
 800689e:	2b40      	cmp	r3, #64	; 0x40
 80068a0:	d007      	beq.n	80068b2 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2140      	movs	r1, #64	; 0x40
 80068ae:	430a      	orrs	r2, r1
 80068b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	2380      	movs	r3, #128	; 0x80
 80068b8:	011b      	lsls	r3, r3, #4
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d000      	beq.n	80068c0 <HAL_SPI_TransmitReceive+0x120>
 80068be:	e07a      	b.n	80069b6 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d004      	beq.n	80068d2 <HAL_SPI_TransmitReceive+0x132>
 80068c8:	231a      	movs	r3, #26
 80068ca:	18fb      	adds	r3, r7, r3
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d166      	bne.n	80069a0 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d6:	881a      	ldrh	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e2:	1c9a      	adds	r2, r3, #2
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	3b01      	subs	r3, #1
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068f6:	e053      	b.n	80069a0 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	2202      	movs	r2, #2
 8006900:	4013      	ands	r3, r2
 8006902:	2b02      	cmp	r3, #2
 8006904:	d11b      	bne.n	800693e <HAL_SPI_TransmitReceive+0x19e>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800690a:	b29b      	uxth	r3, r3
 800690c:	2b00      	cmp	r3, #0
 800690e:	d016      	beq.n	800693e <HAL_SPI_TransmitReceive+0x19e>
 8006910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006912:	2b01      	cmp	r3, #1
 8006914:	d113      	bne.n	800693e <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691a:	881a      	ldrh	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006926:	1c9a      	adds	r2, r3, #2
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006930:	b29b      	uxth	r3, r3
 8006932:	3b01      	subs	r3, #1
 8006934:	b29a      	uxth	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800693a:	2300      	movs	r3, #0
 800693c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	2201      	movs	r2, #1
 8006946:	4013      	ands	r3, r2
 8006948:	2b01      	cmp	r3, #1
 800694a:	d119      	bne.n	8006980 <HAL_SPI_TransmitReceive+0x1e0>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006950:	b29b      	uxth	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d014      	beq.n	8006980 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006960:	b292      	uxth	r2, r2
 8006962:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006968:	1c9a      	adds	r2, r3, #2
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006972:	b29b      	uxth	r3, r3
 8006974:	3b01      	subs	r3, #1
 8006976:	b29a      	uxth	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800697c:	2301      	movs	r3, #1
 800697e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006980:	f7fd fa7e 	bl	8003e80 <HAL_GetTick>
 8006984:	0002      	movs	r2, r0
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800698c:	429a      	cmp	r2, r3
 800698e:	d807      	bhi.n	80069a0 <HAL_SPI_TransmitReceive+0x200>
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	3301      	adds	r3, #1
 8006994:	d004      	beq.n	80069a0 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8006996:	232b      	movs	r3, #43	; 0x2b
 8006998:	18fb      	adds	r3, r7, r3
 800699a:	2203      	movs	r2, #3
 800699c:	701a      	strb	r2, [r3, #0]
        goto error;
 800699e:	e0ab      	b.n	8006af8 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1a6      	bne.n	80068f8 <HAL_SPI_TransmitReceive+0x158>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1a1      	bne.n	80068f8 <HAL_SPI_TransmitReceive+0x158>
 80069b4:	e07f      	b.n	8006ab6 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d005      	beq.n	80069ca <HAL_SPI_TransmitReceive+0x22a>
 80069be:	231a      	movs	r3, #26
 80069c0:	18fb      	adds	r3, r7, r3
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d000      	beq.n	80069ca <HAL_SPI_TransmitReceive+0x22a>
 80069c8:	e06b      	b.n	8006aa2 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	330c      	adds	r3, #12
 80069d4:	7812      	ldrb	r2, [r2, #0]
 80069d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	3b01      	subs	r3, #1
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069f0:	e057      	b.n	8006aa2 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	2202      	movs	r2, #2
 80069fa:	4013      	ands	r3, r2
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d11c      	bne.n	8006a3a <HAL_SPI_TransmitReceive+0x29a>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d017      	beq.n	8006a3a <HAL_SPI_TransmitReceive+0x29a>
 8006a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d114      	bne.n	8006a3a <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	330c      	adds	r3, #12
 8006a1a:	7812      	ldrb	r2, [r2, #0]
 8006a1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a36:	2300      	movs	r3, #0
 8006a38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	2201      	movs	r2, #1
 8006a42:	4013      	ands	r3, r2
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d119      	bne.n	8006a7c <HAL_SPI_TransmitReceive+0x2dc>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d014      	beq.n	8006a7c <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68da      	ldr	r2, [r3, #12]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5c:	b2d2      	uxtb	r2, r2
 8006a5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006a7c:	f7fd fa00 	bl	8003e80 <HAL_GetTick>
 8006a80:	0002      	movs	r2, r0
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d802      	bhi.n	8006a92 <HAL_SPI_TransmitReceive+0x2f2>
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8e:	3301      	adds	r3, #1
 8006a90:	d102      	bne.n	8006a98 <HAL_SPI_TransmitReceive+0x2f8>
 8006a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d104      	bne.n	8006aa2 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8006a98:	232b      	movs	r3, #43	; 0x2b
 8006a9a:	18fb      	adds	r3, r7, r3
 8006a9c:	2203      	movs	r2, #3
 8006a9e:	701a      	strb	r2, [r3, #0]
        goto error;
 8006aa0:	e02a      	b.n	8006af8 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1a2      	bne.n	80069f2 <HAL_SPI_TransmitReceive+0x252>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d19d      	bne.n	80069f2 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	0018      	movs	r0, r3
 8006abe:	f000 f923 	bl	8006d08 <SPI_EndRxTxTransaction>
 8006ac2:	1e03      	subs	r3, r0, #0
 8006ac4:	d007      	beq.n	8006ad6 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8006ac6:	232b      	movs	r3, #43	; 0x2b
 8006ac8:	18fb      	adds	r3, r7, r3
 8006aca:	2201      	movs	r2, #1
 8006acc:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006ad4:	e010      	b.n	8006af8 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10b      	bne.n	8006af6 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ade:	2300      	movs	r3, #0
 8006ae0:	617b      	str	r3, [r7, #20]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	617b      	str	r3, [r7, #20]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	617b      	str	r3, [r7, #20]
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	e000      	b.n	8006af8 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8006af6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2251      	movs	r2, #81	; 0x51
 8006afc:	2101      	movs	r1, #1
 8006afe:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2250      	movs	r2, #80	; 0x50
 8006b04:	2100      	movs	r1, #0
 8006b06:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006b08:	232b      	movs	r3, #43	; 0x2b
 8006b0a:	18fb      	adds	r3, r7, r3
 8006b0c:	781b      	ldrb	r3, [r3, #0]
}
 8006b0e:	0018      	movs	r0, r3
 8006b10:	46bd      	mov	sp, r7
 8006b12:	b00c      	add	sp, #48	; 0x30
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b088      	sub	sp, #32
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	603b      	str	r3, [r7, #0]
 8006b24:	1dfb      	adds	r3, r7, #7
 8006b26:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b28:	f7fd f9aa 	bl	8003e80 <HAL_GetTick>
 8006b2c:	0002      	movs	r2, r0
 8006b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b30:	1a9b      	subs	r3, r3, r2
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	18d3      	adds	r3, r2, r3
 8006b36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b38:	f7fd f9a2 	bl	8003e80 <HAL_GetTick>
 8006b3c:	0003      	movs	r3, r0
 8006b3e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b40:	4b3a      	ldr	r3, [pc, #232]	; (8006c2c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	015b      	lsls	r3, r3, #5
 8006b46:	0d1b      	lsrs	r3, r3, #20
 8006b48:	69fa      	ldr	r2, [r7, #28]
 8006b4a:	4353      	muls	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b4e:	e058      	b.n	8006c02 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	3301      	adds	r3, #1
 8006b54:	d055      	beq.n	8006c02 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b56:	f7fd f993 	bl	8003e80 <HAL_GetTick>
 8006b5a:	0002      	movs	r2, r0
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	69fa      	ldr	r2, [r7, #28]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d902      	bls.n	8006b6c <SPI_WaitFlagStateUntilTimeout+0x54>
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d142      	bne.n	8006bf2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	21e0      	movs	r1, #224	; 0xe0
 8006b78:	438a      	bics	r2, r1
 8006b7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	2382      	movs	r3, #130	; 0x82
 8006b82:	005b      	lsls	r3, r3, #1
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d113      	bne.n	8006bb0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	2380      	movs	r3, #128	; 0x80
 8006b8e:	021b      	lsls	r3, r3, #8
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d005      	beq.n	8006ba0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	2380      	movs	r3, #128	; 0x80
 8006b9a:	00db      	lsls	r3, r3, #3
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d107      	bne.n	8006bb0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2140      	movs	r1, #64	; 0x40
 8006bac:	438a      	bics	r2, r1
 8006bae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bb4:	2380      	movs	r3, #128	; 0x80
 8006bb6:	019b      	lsls	r3, r3, #6
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d110      	bne.n	8006bde <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	491a      	ldr	r1, [pc, #104]	; (8006c30 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006bc8:	400a      	ands	r2, r1
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2180      	movs	r1, #128	; 0x80
 8006bd8:	0189      	lsls	r1, r1, #6
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2251      	movs	r2, #81	; 0x51
 8006be2:	2101      	movs	r1, #1
 8006be4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2250      	movs	r2, #80	; 0x50
 8006bea:	2100      	movs	r1, #0
 8006bec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e017      	b.n	8006c22 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	425a      	negs	r2, r3
 8006c12:	4153      	adcs	r3, r2
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	001a      	movs	r2, r3
 8006c18:	1dfb      	adds	r3, r7, #7
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d197      	bne.n	8006b50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	0018      	movs	r0, r3
 8006c24:	46bd      	mov	sp, r7
 8006c26:	b008      	add	sp, #32
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	46c0      	nop			; (mov r8, r8)
 8006c2c:	20000030 	.word	0x20000030
 8006c30:	ffffdfff 	.word	0xffffdfff

08006c34 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af02      	add	r7, sp, #8
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	2382      	movs	r3, #130	; 0x82
 8006c46:	005b      	lsls	r3, r3, #1
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d113      	bne.n	8006c74 <SPI_EndRxTransaction+0x40>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	689a      	ldr	r2, [r3, #8]
 8006c50:	2380      	movs	r3, #128	; 0x80
 8006c52:	021b      	lsls	r3, r3, #8
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d005      	beq.n	8006c64 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	2380      	movs	r3, #128	; 0x80
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d107      	bne.n	8006c74 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2140      	movs	r1, #64	; 0x40
 8006c70:	438a      	bics	r2, r1
 8006c72:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	2382      	movs	r3, #130	; 0x82
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d12b      	bne.n	8006cd8 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	2380      	movs	r3, #128	; 0x80
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d012      	beq.n	8006cb2 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	0013      	movs	r3, r2
 8006c96:	2200      	movs	r2, #0
 8006c98:	2180      	movs	r1, #128	; 0x80
 8006c9a:	f7ff ff3d 	bl	8006b18 <SPI_WaitFlagStateUntilTimeout>
 8006c9e:	1e03      	subs	r3, r0, #0
 8006ca0:	d02d      	beq.n	8006cfe <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e026      	b.n	8006d00 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	0013      	movs	r3, r2
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	f7ff ff2a 	bl	8006b18 <SPI_WaitFlagStateUntilTimeout>
 8006cc4:	1e03      	subs	r3, r0, #0
 8006cc6:	d01a      	beq.n	8006cfe <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ccc:	2220      	movs	r2, #32
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e013      	b.n	8006d00 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	0013      	movs	r3, r2
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	f7ff ff17 	bl	8006b18 <SPI_WaitFlagStateUntilTimeout>
 8006cea:	1e03      	subs	r3, r0, #0
 8006cec:	d007      	beq.n	8006cfe <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e000      	b.n	8006d00 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	0018      	movs	r0, r3
 8006d02:	46bd      	mov	sp, r7
 8006d04:	b004      	add	sp, #16
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af02      	add	r7, sp, #8
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d14:	4b1d      	ldr	r3, [pc, #116]	; (8006d8c <SPI_EndRxTxTransaction+0x84>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	491d      	ldr	r1, [pc, #116]	; (8006d90 <SPI_EndRxTxTransaction+0x88>)
 8006d1a:	0018      	movs	r0, r3
 8006d1c:	f7f9 fa10 	bl	8000140 <__udivsi3>
 8006d20:	0003      	movs	r3, r0
 8006d22:	001a      	movs	r2, r3
 8006d24:	0013      	movs	r3, r2
 8006d26:	015b      	lsls	r3, r3, #5
 8006d28:	1a9b      	subs	r3, r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	189b      	adds	r3, r3, r2
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	2382      	movs	r3, #130	; 0x82
 8006d38:	005b      	lsls	r3, r3, #1
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d112      	bne.n	8006d64 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	0013      	movs	r3, r2
 8006d48:	2200      	movs	r2, #0
 8006d4a:	2180      	movs	r1, #128	; 0x80
 8006d4c:	f7ff fee4 	bl	8006b18 <SPI_WaitFlagStateUntilTimeout>
 8006d50:	1e03      	subs	r3, r0, #0
 8006d52:	d016      	beq.n	8006d82 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d58:	2220      	movs	r2, #32
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e00f      	b.n	8006d84 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00a      	beq.n	8006d80 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	2280      	movs	r2, #128	; 0x80
 8006d78:	4013      	ands	r3, r2
 8006d7a:	2b80      	cmp	r3, #128	; 0x80
 8006d7c:	d0f2      	beq.n	8006d64 <SPI_EndRxTxTransaction+0x5c>
 8006d7e:	e000      	b.n	8006d82 <SPI_EndRxTxTransaction+0x7a>
        break;
 8006d80:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	0018      	movs	r0, r3
 8006d86:	46bd      	mov	sp, r7
 8006d88:	b006      	add	sp, #24
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	20000030 	.word	0x20000030
 8006d90:	016e3600 	.word	0x016e3600

08006d94 <__errno>:
 8006d94:	4b01      	ldr	r3, [pc, #4]	; (8006d9c <__errno+0x8>)
 8006d96:	6818      	ldr	r0, [r3, #0]
 8006d98:	4770      	bx	lr
 8006d9a:	46c0      	nop			; (mov r8, r8)
 8006d9c:	20000044 	.word	0x20000044

08006da0 <__libc_init_array>:
 8006da0:	b570      	push	{r4, r5, r6, lr}
 8006da2:	2600      	movs	r6, #0
 8006da4:	4d0c      	ldr	r5, [pc, #48]	; (8006dd8 <__libc_init_array+0x38>)
 8006da6:	4c0d      	ldr	r4, [pc, #52]	; (8006ddc <__libc_init_array+0x3c>)
 8006da8:	1b64      	subs	r4, r4, r5
 8006daa:	10a4      	asrs	r4, r4, #2
 8006dac:	42a6      	cmp	r6, r4
 8006dae:	d109      	bne.n	8006dc4 <__libc_init_array+0x24>
 8006db0:	2600      	movs	r6, #0
 8006db2:	f002 ff6f 	bl	8009c94 <_init>
 8006db6:	4d0a      	ldr	r5, [pc, #40]	; (8006de0 <__libc_init_array+0x40>)
 8006db8:	4c0a      	ldr	r4, [pc, #40]	; (8006de4 <__libc_init_array+0x44>)
 8006dba:	1b64      	subs	r4, r4, r5
 8006dbc:	10a4      	asrs	r4, r4, #2
 8006dbe:	42a6      	cmp	r6, r4
 8006dc0:	d105      	bne.n	8006dce <__libc_init_array+0x2e>
 8006dc2:	bd70      	pop	{r4, r5, r6, pc}
 8006dc4:	00b3      	lsls	r3, r6, #2
 8006dc6:	58eb      	ldr	r3, [r5, r3]
 8006dc8:	4798      	blx	r3
 8006dca:	3601      	adds	r6, #1
 8006dcc:	e7ee      	b.n	8006dac <__libc_init_array+0xc>
 8006dce:	00b3      	lsls	r3, r6, #2
 8006dd0:	58eb      	ldr	r3, [r5, r3]
 8006dd2:	4798      	blx	r3
 8006dd4:	3601      	adds	r6, #1
 8006dd6:	e7f2      	b.n	8006dbe <__libc_init_array+0x1e>
 8006dd8:	0800a184 	.word	0x0800a184
 8006ddc:	0800a184 	.word	0x0800a184
 8006de0:	0800a184 	.word	0x0800a184
 8006de4:	0800a188 	.word	0x0800a188

08006de8 <memcpy>:
 8006de8:	2300      	movs	r3, #0
 8006dea:	b510      	push	{r4, lr}
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d100      	bne.n	8006df2 <memcpy+0xa>
 8006df0:	bd10      	pop	{r4, pc}
 8006df2:	5ccc      	ldrb	r4, [r1, r3]
 8006df4:	54c4      	strb	r4, [r0, r3]
 8006df6:	3301      	adds	r3, #1
 8006df8:	e7f8      	b.n	8006dec <memcpy+0x4>

08006dfa <memset>:
 8006dfa:	0003      	movs	r3, r0
 8006dfc:	1882      	adds	r2, r0, r2
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d100      	bne.n	8006e04 <memset+0xa>
 8006e02:	4770      	bx	lr
 8006e04:	7019      	strb	r1, [r3, #0]
 8006e06:	3301      	adds	r3, #1
 8006e08:	e7f9      	b.n	8006dfe <memset+0x4>

08006e0a <__cvt>:
 8006e0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e0c:	001e      	movs	r6, r3
 8006e0e:	2300      	movs	r3, #0
 8006e10:	0014      	movs	r4, r2
 8006e12:	b08b      	sub	sp, #44	; 0x2c
 8006e14:	429e      	cmp	r6, r3
 8006e16:	da04      	bge.n	8006e22 <__cvt+0x18>
 8006e18:	2180      	movs	r1, #128	; 0x80
 8006e1a:	0609      	lsls	r1, r1, #24
 8006e1c:	1873      	adds	r3, r6, r1
 8006e1e:	001e      	movs	r6, r3
 8006e20:	232d      	movs	r3, #45	; 0x2d
 8006e22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e24:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006e26:	7013      	strb	r3, [r2, #0]
 8006e28:	2320      	movs	r3, #32
 8006e2a:	2203      	movs	r2, #3
 8006e2c:	439f      	bics	r7, r3
 8006e2e:	2f46      	cmp	r7, #70	; 0x46
 8006e30:	d007      	beq.n	8006e42 <__cvt+0x38>
 8006e32:	003b      	movs	r3, r7
 8006e34:	3b45      	subs	r3, #69	; 0x45
 8006e36:	4259      	negs	r1, r3
 8006e38:	414b      	adcs	r3, r1
 8006e3a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006e3c:	3a01      	subs	r2, #1
 8006e3e:	18cb      	adds	r3, r1, r3
 8006e40:	9310      	str	r3, [sp, #64]	; 0x40
 8006e42:	ab09      	add	r3, sp, #36	; 0x24
 8006e44:	9304      	str	r3, [sp, #16]
 8006e46:	ab08      	add	r3, sp, #32
 8006e48:	9303      	str	r3, [sp, #12]
 8006e4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e4c:	9200      	str	r2, [sp, #0]
 8006e4e:	9302      	str	r3, [sp, #8]
 8006e50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e52:	0022      	movs	r2, r4
 8006e54:	9301      	str	r3, [sp, #4]
 8006e56:	0033      	movs	r3, r6
 8006e58:	f000 fcfe 	bl	8007858 <_dtoa_r>
 8006e5c:	0005      	movs	r5, r0
 8006e5e:	2f47      	cmp	r7, #71	; 0x47
 8006e60:	d102      	bne.n	8006e68 <__cvt+0x5e>
 8006e62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e64:	07db      	lsls	r3, r3, #31
 8006e66:	d528      	bpl.n	8006eba <__cvt+0xb0>
 8006e68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e6a:	18eb      	adds	r3, r5, r3
 8006e6c:	9307      	str	r3, [sp, #28]
 8006e6e:	2f46      	cmp	r7, #70	; 0x46
 8006e70:	d114      	bne.n	8006e9c <__cvt+0x92>
 8006e72:	782b      	ldrb	r3, [r5, #0]
 8006e74:	2b30      	cmp	r3, #48	; 0x30
 8006e76:	d10c      	bne.n	8006e92 <__cvt+0x88>
 8006e78:	2200      	movs	r2, #0
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	0020      	movs	r0, r4
 8006e7e:	0031      	movs	r1, r6
 8006e80:	f7f9 fae4 	bl	800044c <__aeabi_dcmpeq>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d104      	bne.n	8006e92 <__cvt+0x88>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e8c:	1a9b      	subs	r3, r3, r2
 8006e8e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e94:	9a07      	ldr	r2, [sp, #28]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	18d3      	adds	r3, r2, r3
 8006e9a:	9307      	str	r3, [sp, #28]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	0020      	movs	r0, r4
 8006ea2:	0031      	movs	r1, r6
 8006ea4:	f7f9 fad2 	bl	800044c <__aeabi_dcmpeq>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d001      	beq.n	8006eb0 <__cvt+0xa6>
 8006eac:	9b07      	ldr	r3, [sp, #28]
 8006eae:	9309      	str	r3, [sp, #36]	; 0x24
 8006eb0:	2230      	movs	r2, #48	; 0x30
 8006eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb4:	9907      	ldr	r1, [sp, #28]
 8006eb6:	428b      	cmp	r3, r1
 8006eb8:	d306      	bcc.n	8006ec8 <__cvt+0xbe>
 8006eba:	0028      	movs	r0, r5
 8006ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ebe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006ec0:	1b5b      	subs	r3, r3, r5
 8006ec2:	6013      	str	r3, [r2, #0]
 8006ec4:	b00b      	add	sp, #44	; 0x2c
 8006ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ec8:	1c59      	adds	r1, r3, #1
 8006eca:	9109      	str	r1, [sp, #36]	; 0x24
 8006ecc:	701a      	strb	r2, [r3, #0]
 8006ece:	e7f0      	b.n	8006eb2 <__cvt+0xa8>

08006ed0 <__exponent>:
 8006ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ed2:	1c83      	adds	r3, r0, #2
 8006ed4:	b087      	sub	sp, #28
 8006ed6:	9303      	str	r3, [sp, #12]
 8006ed8:	0005      	movs	r5, r0
 8006eda:	000c      	movs	r4, r1
 8006edc:	232b      	movs	r3, #43	; 0x2b
 8006ede:	7002      	strb	r2, [r0, #0]
 8006ee0:	2900      	cmp	r1, #0
 8006ee2:	da01      	bge.n	8006ee8 <__exponent+0x18>
 8006ee4:	424c      	negs	r4, r1
 8006ee6:	3302      	adds	r3, #2
 8006ee8:	706b      	strb	r3, [r5, #1]
 8006eea:	2c09      	cmp	r4, #9
 8006eec:	dd31      	ble.n	8006f52 <__exponent+0x82>
 8006eee:	270a      	movs	r7, #10
 8006ef0:	ab04      	add	r3, sp, #16
 8006ef2:	1dde      	adds	r6, r3, #7
 8006ef4:	0020      	movs	r0, r4
 8006ef6:	0039      	movs	r1, r7
 8006ef8:	9601      	str	r6, [sp, #4]
 8006efa:	f7f9 fa91 	bl	8000420 <__aeabi_idivmod>
 8006efe:	3e01      	subs	r6, #1
 8006f00:	3130      	adds	r1, #48	; 0x30
 8006f02:	0020      	movs	r0, r4
 8006f04:	7031      	strb	r1, [r6, #0]
 8006f06:	0039      	movs	r1, r7
 8006f08:	9402      	str	r4, [sp, #8]
 8006f0a:	f7f9 f9a3 	bl	8000254 <__divsi3>
 8006f0e:	9b02      	ldr	r3, [sp, #8]
 8006f10:	0004      	movs	r4, r0
 8006f12:	2b63      	cmp	r3, #99	; 0x63
 8006f14:	dcee      	bgt.n	8006ef4 <__exponent+0x24>
 8006f16:	9b01      	ldr	r3, [sp, #4]
 8006f18:	3430      	adds	r4, #48	; 0x30
 8006f1a:	1e9a      	subs	r2, r3, #2
 8006f1c:	0013      	movs	r3, r2
 8006f1e:	9903      	ldr	r1, [sp, #12]
 8006f20:	7014      	strb	r4, [r2, #0]
 8006f22:	a804      	add	r0, sp, #16
 8006f24:	3007      	adds	r0, #7
 8006f26:	4298      	cmp	r0, r3
 8006f28:	d80e      	bhi.n	8006f48 <__exponent+0x78>
 8006f2a:	ab04      	add	r3, sp, #16
 8006f2c:	3307      	adds	r3, #7
 8006f2e:	2000      	movs	r0, #0
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d804      	bhi.n	8006f3e <__exponent+0x6e>
 8006f34:	ab04      	add	r3, sp, #16
 8006f36:	3009      	adds	r0, #9
 8006f38:	18c0      	adds	r0, r0, r3
 8006f3a:	9b01      	ldr	r3, [sp, #4]
 8006f3c:	1ac0      	subs	r0, r0, r3
 8006f3e:	9b03      	ldr	r3, [sp, #12]
 8006f40:	1818      	adds	r0, r3, r0
 8006f42:	1b40      	subs	r0, r0, r5
 8006f44:	b007      	add	sp, #28
 8006f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f48:	7818      	ldrb	r0, [r3, #0]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	7008      	strb	r0, [r1, #0]
 8006f4e:	3101      	adds	r1, #1
 8006f50:	e7e7      	b.n	8006f22 <__exponent+0x52>
 8006f52:	2330      	movs	r3, #48	; 0x30
 8006f54:	18e4      	adds	r4, r4, r3
 8006f56:	70ab      	strb	r3, [r5, #2]
 8006f58:	1d28      	adds	r0, r5, #4
 8006f5a:	70ec      	strb	r4, [r5, #3]
 8006f5c:	e7f1      	b.n	8006f42 <__exponent+0x72>
	...

08006f60 <_printf_float>:
 8006f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f62:	b095      	sub	sp, #84	; 0x54
 8006f64:	000c      	movs	r4, r1
 8006f66:	9208      	str	r2, [sp, #32]
 8006f68:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f6c:	0007      	movs	r7, r0
 8006f6e:	f001 fa91 	bl	8008494 <_localeconv_r>
 8006f72:	6803      	ldr	r3, [r0, #0]
 8006f74:	0018      	movs	r0, r3
 8006f76:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f78:	f7f9 f8c6 	bl	8000108 <strlen>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	9312      	str	r3, [sp, #72]	; 0x48
 8006f80:	7e23      	ldrb	r3, [r4, #24]
 8006f82:	2207      	movs	r2, #7
 8006f84:	001e      	movs	r6, r3
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	900d      	str	r0, [sp, #52]	; 0x34
 8006f8a:	930c      	str	r3, [sp, #48]	; 0x30
 8006f8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f8e:	682b      	ldr	r3, [r5, #0]
 8006f90:	05c9      	lsls	r1, r1, #23
 8006f92:	d547      	bpl.n	8007024 <_printf_float+0xc4>
 8006f94:	189b      	adds	r3, r3, r2
 8006f96:	4393      	bics	r3, r2
 8006f98:	001a      	movs	r2, r3
 8006f9a:	3208      	adds	r2, #8
 8006f9c:	602a      	str	r2, [r5, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	64a2      	str	r2, [r4, #72]	; 0x48
 8006fa4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006faa:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006fac:	930a      	str	r3, [sp, #40]	; 0x28
 8006fae:	006b      	lsls	r3, r5, #1
 8006fb0:	085b      	lsrs	r3, r3, #1
 8006fb2:	930e      	str	r3, [sp, #56]	; 0x38
 8006fb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006fb6:	4ba8      	ldr	r3, [pc, #672]	; (8007258 <_printf_float+0x2f8>)
 8006fb8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006fba:	4252      	negs	r2, r2
 8006fbc:	f7fb f8f6 	bl	80021ac <__aeabi_dcmpun>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d131      	bne.n	8007028 <_printf_float+0xc8>
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	4ba4      	ldr	r3, [pc, #656]	; (8007258 <_printf_float+0x2f8>)
 8006fc8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006fca:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006fcc:	4252      	negs	r2, r2
 8006fce:	f7f9 fa4d 	bl	800046c <__aeabi_dcmple>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d128      	bne.n	8007028 <_printf_float+0xc8>
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2300      	movs	r3, #0
 8006fda:	0029      	movs	r1, r5
 8006fdc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006fde:	f7f9 fa3b 	bl	8000458 <__aeabi_dcmplt>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d003      	beq.n	8006fee <_printf_float+0x8e>
 8006fe6:	0023      	movs	r3, r4
 8006fe8:	222d      	movs	r2, #45	; 0x2d
 8006fea:	3343      	adds	r3, #67	; 0x43
 8006fec:	701a      	strb	r2, [r3, #0]
 8006fee:	4d9b      	ldr	r5, [pc, #620]	; (800725c <_printf_float+0x2fc>)
 8006ff0:	2e47      	cmp	r6, #71	; 0x47
 8006ff2:	d900      	bls.n	8006ff6 <_printf_float+0x96>
 8006ff4:	4d9a      	ldr	r5, [pc, #616]	; (8007260 <_printf_float+0x300>)
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ffa:	6123      	str	r3, [r4, #16]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	439a      	bics	r2, r3
 8007000:	2300      	movs	r3, #0
 8007002:	6022      	str	r2, [r4, #0]
 8007004:	930a      	str	r3, [sp, #40]	; 0x28
 8007006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007008:	0021      	movs	r1, r4
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	0038      	movs	r0, r7
 800700e:	9b08      	ldr	r3, [sp, #32]
 8007010:	aa13      	add	r2, sp, #76	; 0x4c
 8007012:	f000 f9f3 	bl	80073fc <_printf_common>
 8007016:	1c43      	adds	r3, r0, #1
 8007018:	d000      	beq.n	800701c <_printf_float+0xbc>
 800701a:	e09e      	b.n	800715a <_printf_float+0x1fa>
 800701c:	2001      	movs	r0, #1
 800701e:	4240      	negs	r0, r0
 8007020:	b015      	add	sp, #84	; 0x54
 8007022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007024:	3307      	adds	r3, #7
 8007026:	e7b6      	b.n	8006f96 <_printf_float+0x36>
 8007028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800702a:	002b      	movs	r3, r5
 800702c:	0010      	movs	r0, r2
 800702e:	0029      	movs	r1, r5
 8007030:	f7fb f8bc 	bl	80021ac <__aeabi_dcmpun>
 8007034:	2800      	cmp	r0, #0
 8007036:	d00a      	beq.n	800704e <_printf_float+0xee>
 8007038:	2d00      	cmp	r5, #0
 800703a:	da03      	bge.n	8007044 <_printf_float+0xe4>
 800703c:	0023      	movs	r3, r4
 800703e:	222d      	movs	r2, #45	; 0x2d
 8007040:	3343      	adds	r3, #67	; 0x43
 8007042:	701a      	strb	r2, [r3, #0]
 8007044:	4d87      	ldr	r5, [pc, #540]	; (8007264 <_printf_float+0x304>)
 8007046:	2e47      	cmp	r6, #71	; 0x47
 8007048:	d9d5      	bls.n	8006ff6 <_printf_float+0x96>
 800704a:	4d87      	ldr	r5, [pc, #540]	; (8007268 <_printf_float+0x308>)
 800704c:	e7d3      	b.n	8006ff6 <_printf_float+0x96>
 800704e:	2220      	movs	r2, #32
 8007050:	0031      	movs	r1, r6
 8007052:	6863      	ldr	r3, [r4, #4]
 8007054:	4391      	bics	r1, r2
 8007056:	910e      	str	r1, [sp, #56]	; 0x38
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	d147      	bne.n	80070ec <_printf_float+0x18c>
 800705c:	3307      	adds	r3, #7
 800705e:	6063      	str	r3, [r4, #4]
 8007060:	2380      	movs	r3, #128	; 0x80
 8007062:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007064:	00db      	lsls	r3, r3, #3
 8007066:	4313      	orrs	r3, r2
 8007068:	2200      	movs	r2, #0
 800706a:	9206      	str	r2, [sp, #24]
 800706c:	aa12      	add	r2, sp, #72	; 0x48
 800706e:	9205      	str	r2, [sp, #20]
 8007070:	aa11      	add	r2, sp, #68	; 0x44
 8007072:	9203      	str	r2, [sp, #12]
 8007074:	2223      	movs	r2, #35	; 0x23
 8007076:	a908      	add	r1, sp, #32
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	9301      	str	r3, [sp, #4]
 800707c:	6863      	ldr	r3, [r4, #4]
 800707e:	1852      	adds	r2, r2, r1
 8007080:	9202      	str	r2, [sp, #8]
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	0038      	movs	r0, r7
 8007086:	002b      	movs	r3, r5
 8007088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800708a:	9604      	str	r6, [sp, #16]
 800708c:	f7ff febd 	bl	8006e0a <__cvt>
 8007090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007092:	0005      	movs	r5, r0
 8007094:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007096:	2b47      	cmp	r3, #71	; 0x47
 8007098:	d108      	bne.n	80070ac <_printf_float+0x14c>
 800709a:	1ccb      	adds	r3, r1, #3
 800709c:	db02      	blt.n	80070a4 <_printf_float+0x144>
 800709e:	6863      	ldr	r3, [r4, #4]
 80070a0:	4299      	cmp	r1, r3
 80070a2:	dd46      	ble.n	8007132 <_printf_float+0x1d2>
 80070a4:	0033      	movs	r3, r6
 80070a6:	3b02      	subs	r3, #2
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	001e      	movs	r6, r3
 80070ac:	2e65      	cmp	r6, #101	; 0x65
 80070ae:	d824      	bhi.n	80070fa <_printf_float+0x19a>
 80070b0:	0020      	movs	r0, r4
 80070b2:	0032      	movs	r2, r6
 80070b4:	3901      	subs	r1, #1
 80070b6:	3050      	adds	r0, #80	; 0x50
 80070b8:	9111      	str	r1, [sp, #68]	; 0x44
 80070ba:	f7ff ff09 	bl	8006ed0 <__exponent>
 80070be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070c0:	900a      	str	r0, [sp, #40]	; 0x28
 80070c2:	1813      	adds	r3, r2, r0
 80070c4:	6123      	str	r3, [r4, #16]
 80070c6:	2a01      	cmp	r2, #1
 80070c8:	dc02      	bgt.n	80070d0 <_printf_float+0x170>
 80070ca:	6822      	ldr	r2, [r4, #0]
 80070cc:	07d2      	lsls	r2, r2, #31
 80070ce:	d501      	bpl.n	80070d4 <_printf_float+0x174>
 80070d0:	3301      	adds	r3, #1
 80070d2:	6123      	str	r3, [r4, #16]
 80070d4:	2323      	movs	r3, #35	; 0x23
 80070d6:	aa08      	add	r2, sp, #32
 80070d8:	189b      	adds	r3, r3, r2
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d100      	bne.n	80070e2 <_printf_float+0x182>
 80070e0:	e791      	b.n	8007006 <_printf_float+0xa6>
 80070e2:	0023      	movs	r3, r4
 80070e4:	222d      	movs	r2, #45	; 0x2d
 80070e6:	3343      	adds	r3, #67	; 0x43
 80070e8:	701a      	strb	r2, [r3, #0]
 80070ea:	e78c      	b.n	8007006 <_printf_float+0xa6>
 80070ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070ee:	2a47      	cmp	r2, #71	; 0x47
 80070f0:	d1b6      	bne.n	8007060 <_printf_float+0x100>
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1b4      	bne.n	8007060 <_printf_float+0x100>
 80070f6:	3301      	adds	r3, #1
 80070f8:	e7b1      	b.n	800705e <_printf_float+0xfe>
 80070fa:	2e66      	cmp	r6, #102	; 0x66
 80070fc:	d11b      	bne.n	8007136 <_printf_float+0x1d6>
 80070fe:	6863      	ldr	r3, [r4, #4]
 8007100:	2900      	cmp	r1, #0
 8007102:	dd0d      	ble.n	8007120 <_printf_float+0x1c0>
 8007104:	6121      	str	r1, [r4, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d102      	bne.n	8007110 <_printf_float+0x1b0>
 800710a:	6822      	ldr	r2, [r4, #0]
 800710c:	07d2      	lsls	r2, r2, #31
 800710e:	d502      	bpl.n	8007116 <_printf_float+0x1b6>
 8007110:	3301      	adds	r3, #1
 8007112:	1859      	adds	r1, r3, r1
 8007114:	6121      	str	r1, [r4, #16]
 8007116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007118:	65a3      	str	r3, [r4, #88]	; 0x58
 800711a:	2300      	movs	r3, #0
 800711c:	930a      	str	r3, [sp, #40]	; 0x28
 800711e:	e7d9      	b.n	80070d4 <_printf_float+0x174>
 8007120:	2b00      	cmp	r3, #0
 8007122:	d103      	bne.n	800712c <_printf_float+0x1cc>
 8007124:	2201      	movs	r2, #1
 8007126:	6821      	ldr	r1, [r4, #0]
 8007128:	4211      	tst	r1, r2
 800712a:	d000      	beq.n	800712e <_printf_float+0x1ce>
 800712c:	1c9a      	adds	r2, r3, #2
 800712e:	6122      	str	r2, [r4, #16]
 8007130:	e7f1      	b.n	8007116 <_printf_float+0x1b6>
 8007132:	2367      	movs	r3, #103	; 0x67
 8007134:	001e      	movs	r6, r3
 8007136:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007138:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800713a:	4293      	cmp	r3, r2
 800713c:	db06      	blt.n	800714c <_printf_float+0x1ec>
 800713e:	6822      	ldr	r2, [r4, #0]
 8007140:	6123      	str	r3, [r4, #16]
 8007142:	07d2      	lsls	r2, r2, #31
 8007144:	d5e7      	bpl.n	8007116 <_printf_float+0x1b6>
 8007146:	3301      	adds	r3, #1
 8007148:	6123      	str	r3, [r4, #16]
 800714a:	e7e4      	b.n	8007116 <_printf_float+0x1b6>
 800714c:	2101      	movs	r1, #1
 800714e:	2b00      	cmp	r3, #0
 8007150:	dc01      	bgt.n	8007156 <_printf_float+0x1f6>
 8007152:	1849      	adds	r1, r1, r1
 8007154:	1ac9      	subs	r1, r1, r3
 8007156:	1852      	adds	r2, r2, r1
 8007158:	e7e9      	b.n	800712e <_printf_float+0x1ce>
 800715a:	6822      	ldr	r2, [r4, #0]
 800715c:	0553      	lsls	r3, r2, #21
 800715e:	d408      	bmi.n	8007172 <_printf_float+0x212>
 8007160:	6923      	ldr	r3, [r4, #16]
 8007162:	002a      	movs	r2, r5
 8007164:	0038      	movs	r0, r7
 8007166:	9908      	ldr	r1, [sp, #32]
 8007168:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800716a:	47a8      	blx	r5
 800716c:	1c43      	adds	r3, r0, #1
 800716e:	d129      	bne.n	80071c4 <_printf_float+0x264>
 8007170:	e754      	b.n	800701c <_printf_float+0xbc>
 8007172:	2e65      	cmp	r6, #101	; 0x65
 8007174:	d800      	bhi.n	8007178 <_printf_float+0x218>
 8007176:	e0ec      	b.n	8007352 <_printf_float+0x3f2>
 8007178:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800717a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800717c:	2200      	movs	r2, #0
 800717e:	2300      	movs	r3, #0
 8007180:	f7f9 f964 	bl	800044c <__aeabi_dcmpeq>
 8007184:	2800      	cmp	r0, #0
 8007186:	d034      	beq.n	80071f2 <_printf_float+0x292>
 8007188:	2301      	movs	r3, #1
 800718a:	0038      	movs	r0, r7
 800718c:	4a37      	ldr	r2, [pc, #220]	; (800726c <_printf_float+0x30c>)
 800718e:	9908      	ldr	r1, [sp, #32]
 8007190:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007192:	47a8      	blx	r5
 8007194:	1c43      	adds	r3, r0, #1
 8007196:	d100      	bne.n	800719a <_printf_float+0x23a>
 8007198:	e740      	b.n	800701c <_printf_float+0xbc>
 800719a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800719c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800719e:	4293      	cmp	r3, r2
 80071a0:	db02      	blt.n	80071a8 <_printf_float+0x248>
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	07db      	lsls	r3, r3, #31
 80071a6:	d50d      	bpl.n	80071c4 <_printf_float+0x264>
 80071a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80071aa:	0038      	movs	r0, r7
 80071ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80071b0:	9908      	ldr	r1, [sp, #32]
 80071b2:	47a8      	blx	r5
 80071b4:	2500      	movs	r5, #0
 80071b6:	1c43      	adds	r3, r0, #1
 80071b8:	d100      	bne.n	80071bc <_printf_float+0x25c>
 80071ba:	e72f      	b.n	800701c <_printf_float+0xbc>
 80071bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071be:	3b01      	subs	r3, #1
 80071c0:	42ab      	cmp	r3, r5
 80071c2:	dc0a      	bgt.n	80071da <_printf_float+0x27a>
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	079b      	lsls	r3, r3, #30
 80071c8:	d500      	bpl.n	80071cc <_printf_float+0x26c>
 80071ca:	e114      	b.n	80073f6 <_printf_float+0x496>
 80071cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071ce:	68e0      	ldr	r0, [r4, #12]
 80071d0:	4298      	cmp	r0, r3
 80071d2:	db00      	blt.n	80071d6 <_printf_float+0x276>
 80071d4:	e724      	b.n	8007020 <_printf_float+0xc0>
 80071d6:	0018      	movs	r0, r3
 80071d8:	e722      	b.n	8007020 <_printf_float+0xc0>
 80071da:	0022      	movs	r2, r4
 80071dc:	2301      	movs	r3, #1
 80071de:	0038      	movs	r0, r7
 80071e0:	9908      	ldr	r1, [sp, #32]
 80071e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80071e4:	321a      	adds	r2, #26
 80071e6:	47b0      	blx	r6
 80071e8:	1c43      	adds	r3, r0, #1
 80071ea:	d100      	bne.n	80071ee <_printf_float+0x28e>
 80071ec:	e716      	b.n	800701c <_printf_float+0xbc>
 80071ee:	3501      	adds	r5, #1
 80071f0:	e7e4      	b.n	80071bc <_printf_float+0x25c>
 80071f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	dc3b      	bgt.n	8007270 <_printf_float+0x310>
 80071f8:	2301      	movs	r3, #1
 80071fa:	0038      	movs	r0, r7
 80071fc:	4a1b      	ldr	r2, [pc, #108]	; (800726c <_printf_float+0x30c>)
 80071fe:	9908      	ldr	r1, [sp, #32]
 8007200:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007202:	47b0      	blx	r6
 8007204:	1c43      	adds	r3, r0, #1
 8007206:	d100      	bne.n	800720a <_printf_float+0x2aa>
 8007208:	e708      	b.n	800701c <_printf_float+0xbc>
 800720a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800720c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800720e:	4313      	orrs	r3, r2
 8007210:	d102      	bne.n	8007218 <_printf_float+0x2b8>
 8007212:	6823      	ldr	r3, [r4, #0]
 8007214:	07db      	lsls	r3, r3, #31
 8007216:	d5d5      	bpl.n	80071c4 <_printf_float+0x264>
 8007218:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800721a:	0038      	movs	r0, r7
 800721c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800721e:	9908      	ldr	r1, [sp, #32]
 8007220:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007222:	47b0      	blx	r6
 8007224:	1c43      	adds	r3, r0, #1
 8007226:	d100      	bne.n	800722a <_printf_float+0x2ca>
 8007228:	e6f8      	b.n	800701c <_printf_float+0xbc>
 800722a:	2300      	movs	r3, #0
 800722c:	930a      	str	r3, [sp, #40]	; 0x28
 800722e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007232:	425b      	negs	r3, r3
 8007234:	4293      	cmp	r3, r2
 8007236:	dc01      	bgt.n	800723c <_printf_float+0x2dc>
 8007238:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800723a:	e792      	b.n	8007162 <_printf_float+0x202>
 800723c:	0022      	movs	r2, r4
 800723e:	2301      	movs	r3, #1
 8007240:	0038      	movs	r0, r7
 8007242:	9908      	ldr	r1, [sp, #32]
 8007244:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007246:	321a      	adds	r2, #26
 8007248:	47b0      	blx	r6
 800724a:	1c43      	adds	r3, r0, #1
 800724c:	d100      	bne.n	8007250 <_printf_float+0x2f0>
 800724e:	e6e5      	b.n	800701c <_printf_float+0xbc>
 8007250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007252:	3301      	adds	r3, #1
 8007254:	e7ea      	b.n	800722c <_printf_float+0x2cc>
 8007256:	46c0      	nop			; (mov r8, r8)
 8007258:	7fefffff 	.word	0x7fefffff
 800725c:	08009d9c 	.word	0x08009d9c
 8007260:	08009da0 	.word	0x08009da0
 8007264:	08009da4 	.word	0x08009da4
 8007268:	08009da8 	.word	0x08009da8
 800726c:	08009dac 	.word	0x08009dac
 8007270:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007272:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007274:	920a      	str	r2, [sp, #40]	; 0x28
 8007276:	429a      	cmp	r2, r3
 8007278:	dd00      	ble.n	800727c <_printf_float+0x31c>
 800727a:	930a      	str	r3, [sp, #40]	; 0x28
 800727c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800727e:	2b00      	cmp	r3, #0
 8007280:	dc3d      	bgt.n	80072fe <_printf_float+0x39e>
 8007282:	2300      	movs	r3, #0
 8007284:	930e      	str	r3, [sp, #56]	; 0x38
 8007286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007288:	43db      	mvns	r3, r3
 800728a:	17db      	asrs	r3, r3, #31
 800728c:	930f      	str	r3, [sp, #60]	; 0x3c
 800728e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007290:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007292:	930c      	str	r3, [sp, #48]	; 0x30
 8007294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007296:	4013      	ands	r3, r2
 8007298:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800729e:	4293      	cmp	r3, r2
 80072a0:	dc36      	bgt.n	8007310 <_printf_float+0x3b0>
 80072a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072a6:	4293      	cmp	r3, r2
 80072a8:	db40      	blt.n	800732c <_printf_float+0x3cc>
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	07db      	lsls	r3, r3, #31
 80072ae:	d43d      	bmi.n	800732c <_printf_float+0x3cc>
 80072b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072b4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	1a52      	subs	r2, r2, r1
 80072ba:	920a      	str	r2, [sp, #40]	; 0x28
 80072bc:	429a      	cmp	r2, r3
 80072be:	dd00      	ble.n	80072c2 <_printf_float+0x362>
 80072c0:	930a      	str	r3, [sp, #40]	; 0x28
 80072c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	dc3a      	bgt.n	800733e <_printf_float+0x3de>
 80072c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ca:	2500      	movs	r5, #0
 80072cc:	43db      	mvns	r3, r3
 80072ce:	17db      	asrs	r3, r3, #31
 80072d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80072d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80072d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072d8:	1a9b      	subs	r3, r3, r2
 80072da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072dc:	400a      	ands	r2, r1
 80072de:	1a9b      	subs	r3, r3, r2
 80072e0:	42ab      	cmp	r3, r5
 80072e2:	dc00      	bgt.n	80072e6 <_printf_float+0x386>
 80072e4:	e76e      	b.n	80071c4 <_printf_float+0x264>
 80072e6:	0022      	movs	r2, r4
 80072e8:	2301      	movs	r3, #1
 80072ea:	0038      	movs	r0, r7
 80072ec:	9908      	ldr	r1, [sp, #32]
 80072ee:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80072f0:	321a      	adds	r2, #26
 80072f2:	47b0      	blx	r6
 80072f4:	1c43      	adds	r3, r0, #1
 80072f6:	d100      	bne.n	80072fa <_printf_float+0x39a>
 80072f8:	e690      	b.n	800701c <_printf_float+0xbc>
 80072fa:	3501      	adds	r5, #1
 80072fc:	e7e9      	b.n	80072d2 <_printf_float+0x372>
 80072fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007300:	002a      	movs	r2, r5
 8007302:	0038      	movs	r0, r7
 8007304:	9908      	ldr	r1, [sp, #32]
 8007306:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007308:	47b0      	blx	r6
 800730a:	1c43      	adds	r3, r0, #1
 800730c:	d1b9      	bne.n	8007282 <_printf_float+0x322>
 800730e:	e685      	b.n	800701c <_printf_float+0xbc>
 8007310:	0022      	movs	r2, r4
 8007312:	2301      	movs	r3, #1
 8007314:	0038      	movs	r0, r7
 8007316:	9908      	ldr	r1, [sp, #32]
 8007318:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800731a:	321a      	adds	r2, #26
 800731c:	47b0      	blx	r6
 800731e:	1c43      	adds	r3, r0, #1
 8007320:	d100      	bne.n	8007324 <_printf_float+0x3c4>
 8007322:	e67b      	b.n	800701c <_printf_float+0xbc>
 8007324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007326:	3301      	adds	r3, #1
 8007328:	930e      	str	r3, [sp, #56]	; 0x38
 800732a:	e7b0      	b.n	800728e <_printf_float+0x32e>
 800732c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800732e:	0038      	movs	r0, r7
 8007330:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007332:	9908      	ldr	r1, [sp, #32]
 8007334:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007336:	47b0      	blx	r6
 8007338:	1c43      	adds	r3, r0, #1
 800733a:	d1b9      	bne.n	80072b0 <_printf_float+0x350>
 800733c:	e66e      	b.n	800701c <_printf_float+0xbc>
 800733e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007340:	0038      	movs	r0, r7
 8007342:	18ea      	adds	r2, r5, r3
 8007344:	9908      	ldr	r1, [sp, #32]
 8007346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007348:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800734a:	47a8      	blx	r5
 800734c:	1c43      	adds	r3, r0, #1
 800734e:	d1bb      	bne.n	80072c8 <_printf_float+0x368>
 8007350:	e664      	b.n	800701c <_printf_float+0xbc>
 8007352:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007354:	2b01      	cmp	r3, #1
 8007356:	dc02      	bgt.n	800735e <_printf_float+0x3fe>
 8007358:	2301      	movs	r3, #1
 800735a:	421a      	tst	r2, r3
 800735c:	d038      	beq.n	80073d0 <_printf_float+0x470>
 800735e:	2301      	movs	r3, #1
 8007360:	002a      	movs	r2, r5
 8007362:	0038      	movs	r0, r7
 8007364:	9908      	ldr	r1, [sp, #32]
 8007366:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007368:	47b0      	blx	r6
 800736a:	1c43      	adds	r3, r0, #1
 800736c:	d100      	bne.n	8007370 <_printf_float+0x410>
 800736e:	e655      	b.n	800701c <_printf_float+0xbc>
 8007370:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007372:	0038      	movs	r0, r7
 8007374:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007376:	9908      	ldr	r1, [sp, #32]
 8007378:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800737a:	47b0      	blx	r6
 800737c:	1c43      	adds	r3, r0, #1
 800737e:	d100      	bne.n	8007382 <_printf_float+0x422>
 8007380:	e64c      	b.n	800701c <_printf_float+0xbc>
 8007382:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007384:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007386:	2200      	movs	r2, #0
 8007388:	2300      	movs	r3, #0
 800738a:	f7f9 f85f 	bl	800044c <__aeabi_dcmpeq>
 800738e:	2800      	cmp	r0, #0
 8007390:	d11c      	bne.n	80073cc <_printf_float+0x46c>
 8007392:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007394:	1c6a      	adds	r2, r5, #1
 8007396:	3b01      	subs	r3, #1
 8007398:	0038      	movs	r0, r7
 800739a:	9908      	ldr	r1, [sp, #32]
 800739c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800739e:	47a8      	blx	r5
 80073a0:	1c43      	adds	r3, r0, #1
 80073a2:	d10f      	bne.n	80073c4 <_printf_float+0x464>
 80073a4:	e63a      	b.n	800701c <_printf_float+0xbc>
 80073a6:	0022      	movs	r2, r4
 80073a8:	2301      	movs	r3, #1
 80073aa:	0038      	movs	r0, r7
 80073ac:	9908      	ldr	r1, [sp, #32]
 80073ae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80073b0:	321a      	adds	r2, #26
 80073b2:	47b0      	blx	r6
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	d100      	bne.n	80073ba <_printf_float+0x45a>
 80073b8:	e630      	b.n	800701c <_printf_float+0xbc>
 80073ba:	3501      	adds	r5, #1
 80073bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073be:	3b01      	subs	r3, #1
 80073c0:	42ab      	cmp	r3, r5
 80073c2:	dcf0      	bgt.n	80073a6 <_printf_float+0x446>
 80073c4:	0022      	movs	r2, r4
 80073c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073c8:	3250      	adds	r2, #80	; 0x50
 80073ca:	e6cb      	b.n	8007164 <_printf_float+0x204>
 80073cc:	2500      	movs	r5, #0
 80073ce:	e7f5      	b.n	80073bc <_printf_float+0x45c>
 80073d0:	002a      	movs	r2, r5
 80073d2:	e7e1      	b.n	8007398 <_printf_float+0x438>
 80073d4:	0022      	movs	r2, r4
 80073d6:	2301      	movs	r3, #1
 80073d8:	0038      	movs	r0, r7
 80073da:	9908      	ldr	r1, [sp, #32]
 80073dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80073de:	3219      	adds	r2, #25
 80073e0:	47b0      	blx	r6
 80073e2:	1c43      	adds	r3, r0, #1
 80073e4:	d100      	bne.n	80073e8 <_printf_float+0x488>
 80073e6:	e619      	b.n	800701c <_printf_float+0xbc>
 80073e8:	3501      	adds	r5, #1
 80073ea:	68e3      	ldr	r3, [r4, #12]
 80073ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80073ee:	1a9b      	subs	r3, r3, r2
 80073f0:	42ab      	cmp	r3, r5
 80073f2:	dcef      	bgt.n	80073d4 <_printf_float+0x474>
 80073f4:	e6ea      	b.n	80071cc <_printf_float+0x26c>
 80073f6:	2500      	movs	r5, #0
 80073f8:	e7f7      	b.n	80073ea <_printf_float+0x48a>
 80073fa:	46c0      	nop			; (mov r8, r8)

080073fc <_printf_common>:
 80073fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073fe:	0015      	movs	r5, r2
 8007400:	9301      	str	r3, [sp, #4]
 8007402:	688a      	ldr	r2, [r1, #8]
 8007404:	690b      	ldr	r3, [r1, #16]
 8007406:	000c      	movs	r4, r1
 8007408:	9000      	str	r0, [sp, #0]
 800740a:	4293      	cmp	r3, r2
 800740c:	da00      	bge.n	8007410 <_printf_common+0x14>
 800740e:	0013      	movs	r3, r2
 8007410:	0022      	movs	r2, r4
 8007412:	602b      	str	r3, [r5, #0]
 8007414:	3243      	adds	r2, #67	; 0x43
 8007416:	7812      	ldrb	r2, [r2, #0]
 8007418:	2a00      	cmp	r2, #0
 800741a:	d001      	beq.n	8007420 <_printf_common+0x24>
 800741c:	3301      	adds	r3, #1
 800741e:	602b      	str	r3, [r5, #0]
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	069b      	lsls	r3, r3, #26
 8007424:	d502      	bpl.n	800742c <_printf_common+0x30>
 8007426:	682b      	ldr	r3, [r5, #0]
 8007428:	3302      	adds	r3, #2
 800742a:	602b      	str	r3, [r5, #0]
 800742c:	6822      	ldr	r2, [r4, #0]
 800742e:	2306      	movs	r3, #6
 8007430:	0017      	movs	r7, r2
 8007432:	401f      	ands	r7, r3
 8007434:	421a      	tst	r2, r3
 8007436:	d027      	beq.n	8007488 <_printf_common+0x8c>
 8007438:	0023      	movs	r3, r4
 800743a:	3343      	adds	r3, #67	; 0x43
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	1e5a      	subs	r2, r3, #1
 8007440:	4193      	sbcs	r3, r2
 8007442:	6822      	ldr	r2, [r4, #0]
 8007444:	0692      	lsls	r2, r2, #26
 8007446:	d430      	bmi.n	80074aa <_printf_common+0xae>
 8007448:	0022      	movs	r2, r4
 800744a:	9901      	ldr	r1, [sp, #4]
 800744c:	9800      	ldr	r0, [sp, #0]
 800744e:	9e08      	ldr	r6, [sp, #32]
 8007450:	3243      	adds	r2, #67	; 0x43
 8007452:	47b0      	blx	r6
 8007454:	1c43      	adds	r3, r0, #1
 8007456:	d025      	beq.n	80074a4 <_printf_common+0xa8>
 8007458:	2306      	movs	r3, #6
 800745a:	6820      	ldr	r0, [r4, #0]
 800745c:	682a      	ldr	r2, [r5, #0]
 800745e:	68e1      	ldr	r1, [r4, #12]
 8007460:	2500      	movs	r5, #0
 8007462:	4003      	ands	r3, r0
 8007464:	2b04      	cmp	r3, #4
 8007466:	d103      	bne.n	8007470 <_printf_common+0x74>
 8007468:	1a8d      	subs	r5, r1, r2
 800746a:	43eb      	mvns	r3, r5
 800746c:	17db      	asrs	r3, r3, #31
 800746e:	401d      	ands	r5, r3
 8007470:	68a3      	ldr	r3, [r4, #8]
 8007472:	6922      	ldr	r2, [r4, #16]
 8007474:	4293      	cmp	r3, r2
 8007476:	dd01      	ble.n	800747c <_printf_common+0x80>
 8007478:	1a9b      	subs	r3, r3, r2
 800747a:	18ed      	adds	r5, r5, r3
 800747c:	2700      	movs	r7, #0
 800747e:	42bd      	cmp	r5, r7
 8007480:	d120      	bne.n	80074c4 <_printf_common+0xc8>
 8007482:	2000      	movs	r0, #0
 8007484:	e010      	b.n	80074a8 <_printf_common+0xac>
 8007486:	3701      	adds	r7, #1
 8007488:	68e3      	ldr	r3, [r4, #12]
 800748a:	682a      	ldr	r2, [r5, #0]
 800748c:	1a9b      	subs	r3, r3, r2
 800748e:	42bb      	cmp	r3, r7
 8007490:	ddd2      	ble.n	8007438 <_printf_common+0x3c>
 8007492:	0022      	movs	r2, r4
 8007494:	2301      	movs	r3, #1
 8007496:	9901      	ldr	r1, [sp, #4]
 8007498:	9800      	ldr	r0, [sp, #0]
 800749a:	9e08      	ldr	r6, [sp, #32]
 800749c:	3219      	adds	r2, #25
 800749e:	47b0      	blx	r6
 80074a0:	1c43      	adds	r3, r0, #1
 80074a2:	d1f0      	bne.n	8007486 <_printf_common+0x8a>
 80074a4:	2001      	movs	r0, #1
 80074a6:	4240      	negs	r0, r0
 80074a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80074aa:	2030      	movs	r0, #48	; 0x30
 80074ac:	18e1      	adds	r1, r4, r3
 80074ae:	3143      	adds	r1, #67	; 0x43
 80074b0:	7008      	strb	r0, [r1, #0]
 80074b2:	0021      	movs	r1, r4
 80074b4:	1c5a      	adds	r2, r3, #1
 80074b6:	3145      	adds	r1, #69	; 0x45
 80074b8:	7809      	ldrb	r1, [r1, #0]
 80074ba:	18a2      	adds	r2, r4, r2
 80074bc:	3243      	adds	r2, #67	; 0x43
 80074be:	3302      	adds	r3, #2
 80074c0:	7011      	strb	r1, [r2, #0]
 80074c2:	e7c1      	b.n	8007448 <_printf_common+0x4c>
 80074c4:	0022      	movs	r2, r4
 80074c6:	2301      	movs	r3, #1
 80074c8:	9901      	ldr	r1, [sp, #4]
 80074ca:	9800      	ldr	r0, [sp, #0]
 80074cc:	9e08      	ldr	r6, [sp, #32]
 80074ce:	321a      	adds	r2, #26
 80074d0:	47b0      	blx	r6
 80074d2:	1c43      	adds	r3, r0, #1
 80074d4:	d0e6      	beq.n	80074a4 <_printf_common+0xa8>
 80074d6:	3701      	adds	r7, #1
 80074d8:	e7d1      	b.n	800747e <_printf_common+0x82>
	...

080074dc <_printf_i>:
 80074dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074de:	b08b      	sub	sp, #44	; 0x2c
 80074e0:	9206      	str	r2, [sp, #24]
 80074e2:	000a      	movs	r2, r1
 80074e4:	3243      	adds	r2, #67	; 0x43
 80074e6:	9307      	str	r3, [sp, #28]
 80074e8:	9005      	str	r0, [sp, #20]
 80074ea:	9204      	str	r2, [sp, #16]
 80074ec:	7e0a      	ldrb	r2, [r1, #24]
 80074ee:	000c      	movs	r4, r1
 80074f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074f2:	2a78      	cmp	r2, #120	; 0x78
 80074f4:	d806      	bhi.n	8007504 <_printf_i+0x28>
 80074f6:	2a62      	cmp	r2, #98	; 0x62
 80074f8:	d808      	bhi.n	800750c <_printf_i+0x30>
 80074fa:	2a00      	cmp	r2, #0
 80074fc:	d100      	bne.n	8007500 <_printf_i+0x24>
 80074fe:	e0c0      	b.n	8007682 <_printf_i+0x1a6>
 8007500:	2a58      	cmp	r2, #88	; 0x58
 8007502:	d052      	beq.n	80075aa <_printf_i+0xce>
 8007504:	0026      	movs	r6, r4
 8007506:	3642      	adds	r6, #66	; 0x42
 8007508:	7032      	strb	r2, [r6, #0]
 800750a:	e022      	b.n	8007552 <_printf_i+0x76>
 800750c:	0010      	movs	r0, r2
 800750e:	3863      	subs	r0, #99	; 0x63
 8007510:	2815      	cmp	r0, #21
 8007512:	d8f7      	bhi.n	8007504 <_printf_i+0x28>
 8007514:	f7f8 fe0a 	bl	800012c <__gnu_thumb1_case_shi>
 8007518:	001f0016 	.word	0x001f0016
 800751c:	fff6fff6 	.word	0xfff6fff6
 8007520:	fff6fff6 	.word	0xfff6fff6
 8007524:	fff6001f 	.word	0xfff6001f
 8007528:	fff6fff6 	.word	0xfff6fff6
 800752c:	00a8fff6 	.word	0x00a8fff6
 8007530:	009a0036 	.word	0x009a0036
 8007534:	fff6fff6 	.word	0xfff6fff6
 8007538:	fff600b9 	.word	0xfff600b9
 800753c:	fff60036 	.word	0xfff60036
 8007540:	009efff6 	.word	0x009efff6
 8007544:	0026      	movs	r6, r4
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	3642      	adds	r6, #66	; 0x42
 800754a:	1d11      	adds	r1, r2, #4
 800754c:	6019      	str	r1, [r3, #0]
 800754e:	6813      	ldr	r3, [r2, #0]
 8007550:	7033      	strb	r3, [r6, #0]
 8007552:	2301      	movs	r3, #1
 8007554:	e0a7      	b.n	80076a6 <_printf_i+0x1ca>
 8007556:	6808      	ldr	r0, [r1, #0]
 8007558:	6819      	ldr	r1, [r3, #0]
 800755a:	1d0a      	adds	r2, r1, #4
 800755c:	0605      	lsls	r5, r0, #24
 800755e:	d50b      	bpl.n	8007578 <_printf_i+0x9c>
 8007560:	680d      	ldr	r5, [r1, #0]
 8007562:	601a      	str	r2, [r3, #0]
 8007564:	2d00      	cmp	r5, #0
 8007566:	da03      	bge.n	8007570 <_printf_i+0x94>
 8007568:	232d      	movs	r3, #45	; 0x2d
 800756a:	9a04      	ldr	r2, [sp, #16]
 800756c:	426d      	negs	r5, r5
 800756e:	7013      	strb	r3, [r2, #0]
 8007570:	4b61      	ldr	r3, [pc, #388]	; (80076f8 <_printf_i+0x21c>)
 8007572:	270a      	movs	r7, #10
 8007574:	9303      	str	r3, [sp, #12]
 8007576:	e032      	b.n	80075de <_printf_i+0x102>
 8007578:	680d      	ldr	r5, [r1, #0]
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	0641      	lsls	r1, r0, #25
 800757e:	d5f1      	bpl.n	8007564 <_printf_i+0x88>
 8007580:	b22d      	sxth	r5, r5
 8007582:	e7ef      	b.n	8007564 <_printf_i+0x88>
 8007584:	680d      	ldr	r5, [r1, #0]
 8007586:	6819      	ldr	r1, [r3, #0]
 8007588:	1d08      	adds	r0, r1, #4
 800758a:	6018      	str	r0, [r3, #0]
 800758c:	062e      	lsls	r6, r5, #24
 800758e:	d501      	bpl.n	8007594 <_printf_i+0xb8>
 8007590:	680d      	ldr	r5, [r1, #0]
 8007592:	e003      	b.n	800759c <_printf_i+0xc0>
 8007594:	066d      	lsls	r5, r5, #25
 8007596:	d5fb      	bpl.n	8007590 <_printf_i+0xb4>
 8007598:	680d      	ldr	r5, [r1, #0]
 800759a:	b2ad      	uxth	r5, r5
 800759c:	4b56      	ldr	r3, [pc, #344]	; (80076f8 <_printf_i+0x21c>)
 800759e:	270a      	movs	r7, #10
 80075a0:	9303      	str	r3, [sp, #12]
 80075a2:	2a6f      	cmp	r2, #111	; 0x6f
 80075a4:	d117      	bne.n	80075d6 <_printf_i+0xfa>
 80075a6:	2708      	movs	r7, #8
 80075a8:	e015      	b.n	80075d6 <_printf_i+0xfa>
 80075aa:	3145      	adds	r1, #69	; 0x45
 80075ac:	700a      	strb	r2, [r1, #0]
 80075ae:	4a52      	ldr	r2, [pc, #328]	; (80076f8 <_printf_i+0x21c>)
 80075b0:	9203      	str	r2, [sp, #12]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	6821      	ldr	r1, [r4, #0]
 80075b6:	ca20      	ldmia	r2!, {r5}
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	0608      	lsls	r0, r1, #24
 80075bc:	d550      	bpl.n	8007660 <_printf_i+0x184>
 80075be:	07cb      	lsls	r3, r1, #31
 80075c0:	d502      	bpl.n	80075c8 <_printf_i+0xec>
 80075c2:	2320      	movs	r3, #32
 80075c4:	4319      	orrs	r1, r3
 80075c6:	6021      	str	r1, [r4, #0]
 80075c8:	2710      	movs	r7, #16
 80075ca:	2d00      	cmp	r5, #0
 80075cc:	d103      	bne.n	80075d6 <_printf_i+0xfa>
 80075ce:	2320      	movs	r3, #32
 80075d0:	6822      	ldr	r2, [r4, #0]
 80075d2:	439a      	bics	r2, r3
 80075d4:	6022      	str	r2, [r4, #0]
 80075d6:	0023      	movs	r3, r4
 80075d8:	2200      	movs	r2, #0
 80075da:	3343      	adds	r3, #67	; 0x43
 80075dc:	701a      	strb	r2, [r3, #0]
 80075de:	6863      	ldr	r3, [r4, #4]
 80075e0:	60a3      	str	r3, [r4, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	db03      	blt.n	80075ee <_printf_i+0x112>
 80075e6:	2204      	movs	r2, #4
 80075e8:	6821      	ldr	r1, [r4, #0]
 80075ea:	4391      	bics	r1, r2
 80075ec:	6021      	str	r1, [r4, #0]
 80075ee:	2d00      	cmp	r5, #0
 80075f0:	d102      	bne.n	80075f8 <_printf_i+0x11c>
 80075f2:	9e04      	ldr	r6, [sp, #16]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00c      	beq.n	8007612 <_printf_i+0x136>
 80075f8:	9e04      	ldr	r6, [sp, #16]
 80075fa:	0028      	movs	r0, r5
 80075fc:	0039      	movs	r1, r7
 80075fe:	f7f8 fe25 	bl	800024c <__aeabi_uidivmod>
 8007602:	9b03      	ldr	r3, [sp, #12]
 8007604:	3e01      	subs	r6, #1
 8007606:	5c5b      	ldrb	r3, [r3, r1]
 8007608:	7033      	strb	r3, [r6, #0]
 800760a:	002b      	movs	r3, r5
 800760c:	0005      	movs	r5, r0
 800760e:	429f      	cmp	r7, r3
 8007610:	d9f3      	bls.n	80075fa <_printf_i+0x11e>
 8007612:	2f08      	cmp	r7, #8
 8007614:	d109      	bne.n	800762a <_printf_i+0x14e>
 8007616:	6823      	ldr	r3, [r4, #0]
 8007618:	07db      	lsls	r3, r3, #31
 800761a:	d506      	bpl.n	800762a <_printf_i+0x14e>
 800761c:	6863      	ldr	r3, [r4, #4]
 800761e:	6922      	ldr	r2, [r4, #16]
 8007620:	4293      	cmp	r3, r2
 8007622:	dc02      	bgt.n	800762a <_printf_i+0x14e>
 8007624:	2330      	movs	r3, #48	; 0x30
 8007626:	3e01      	subs	r6, #1
 8007628:	7033      	strb	r3, [r6, #0]
 800762a:	9b04      	ldr	r3, [sp, #16]
 800762c:	1b9b      	subs	r3, r3, r6
 800762e:	6123      	str	r3, [r4, #16]
 8007630:	9b07      	ldr	r3, [sp, #28]
 8007632:	0021      	movs	r1, r4
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	9805      	ldr	r0, [sp, #20]
 8007638:	9b06      	ldr	r3, [sp, #24]
 800763a:	aa09      	add	r2, sp, #36	; 0x24
 800763c:	f7ff fede 	bl	80073fc <_printf_common>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	d135      	bne.n	80076b0 <_printf_i+0x1d4>
 8007644:	2001      	movs	r0, #1
 8007646:	4240      	negs	r0, r0
 8007648:	b00b      	add	sp, #44	; 0x2c
 800764a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800764c:	2220      	movs	r2, #32
 800764e:	6809      	ldr	r1, [r1, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	6022      	str	r2, [r4, #0]
 8007654:	0022      	movs	r2, r4
 8007656:	2178      	movs	r1, #120	; 0x78
 8007658:	3245      	adds	r2, #69	; 0x45
 800765a:	7011      	strb	r1, [r2, #0]
 800765c:	4a27      	ldr	r2, [pc, #156]	; (80076fc <_printf_i+0x220>)
 800765e:	e7a7      	b.n	80075b0 <_printf_i+0xd4>
 8007660:	0648      	lsls	r0, r1, #25
 8007662:	d5ac      	bpl.n	80075be <_printf_i+0xe2>
 8007664:	b2ad      	uxth	r5, r5
 8007666:	e7aa      	b.n	80075be <_printf_i+0xe2>
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	680d      	ldr	r5, [r1, #0]
 800766c:	1d10      	adds	r0, r2, #4
 800766e:	6949      	ldr	r1, [r1, #20]
 8007670:	6018      	str	r0, [r3, #0]
 8007672:	6813      	ldr	r3, [r2, #0]
 8007674:	062e      	lsls	r6, r5, #24
 8007676:	d501      	bpl.n	800767c <_printf_i+0x1a0>
 8007678:	6019      	str	r1, [r3, #0]
 800767a:	e002      	b.n	8007682 <_printf_i+0x1a6>
 800767c:	066d      	lsls	r5, r5, #25
 800767e:	d5fb      	bpl.n	8007678 <_printf_i+0x19c>
 8007680:	8019      	strh	r1, [r3, #0]
 8007682:	2300      	movs	r3, #0
 8007684:	9e04      	ldr	r6, [sp, #16]
 8007686:	6123      	str	r3, [r4, #16]
 8007688:	e7d2      	b.n	8007630 <_printf_i+0x154>
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	1d11      	adds	r1, r2, #4
 800768e:	6019      	str	r1, [r3, #0]
 8007690:	6816      	ldr	r6, [r2, #0]
 8007692:	2100      	movs	r1, #0
 8007694:	0030      	movs	r0, r6
 8007696:	6862      	ldr	r2, [r4, #4]
 8007698:	f000 ff0a 	bl	80084b0 <memchr>
 800769c:	2800      	cmp	r0, #0
 800769e:	d001      	beq.n	80076a4 <_printf_i+0x1c8>
 80076a0:	1b80      	subs	r0, r0, r6
 80076a2:	6060      	str	r0, [r4, #4]
 80076a4:	6863      	ldr	r3, [r4, #4]
 80076a6:	6123      	str	r3, [r4, #16]
 80076a8:	2300      	movs	r3, #0
 80076aa:	9a04      	ldr	r2, [sp, #16]
 80076ac:	7013      	strb	r3, [r2, #0]
 80076ae:	e7bf      	b.n	8007630 <_printf_i+0x154>
 80076b0:	6923      	ldr	r3, [r4, #16]
 80076b2:	0032      	movs	r2, r6
 80076b4:	9906      	ldr	r1, [sp, #24]
 80076b6:	9805      	ldr	r0, [sp, #20]
 80076b8:	9d07      	ldr	r5, [sp, #28]
 80076ba:	47a8      	blx	r5
 80076bc:	1c43      	adds	r3, r0, #1
 80076be:	d0c1      	beq.n	8007644 <_printf_i+0x168>
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	079b      	lsls	r3, r3, #30
 80076c4:	d415      	bmi.n	80076f2 <_printf_i+0x216>
 80076c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076c8:	68e0      	ldr	r0, [r4, #12]
 80076ca:	4298      	cmp	r0, r3
 80076cc:	dabc      	bge.n	8007648 <_printf_i+0x16c>
 80076ce:	0018      	movs	r0, r3
 80076d0:	e7ba      	b.n	8007648 <_printf_i+0x16c>
 80076d2:	0022      	movs	r2, r4
 80076d4:	2301      	movs	r3, #1
 80076d6:	9906      	ldr	r1, [sp, #24]
 80076d8:	9805      	ldr	r0, [sp, #20]
 80076da:	9e07      	ldr	r6, [sp, #28]
 80076dc:	3219      	adds	r2, #25
 80076de:	47b0      	blx	r6
 80076e0:	1c43      	adds	r3, r0, #1
 80076e2:	d0af      	beq.n	8007644 <_printf_i+0x168>
 80076e4:	3501      	adds	r5, #1
 80076e6:	68e3      	ldr	r3, [r4, #12]
 80076e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076ea:	1a9b      	subs	r3, r3, r2
 80076ec:	42ab      	cmp	r3, r5
 80076ee:	dcf0      	bgt.n	80076d2 <_printf_i+0x1f6>
 80076f0:	e7e9      	b.n	80076c6 <_printf_i+0x1ea>
 80076f2:	2500      	movs	r5, #0
 80076f4:	e7f7      	b.n	80076e6 <_printf_i+0x20a>
 80076f6:	46c0      	nop			; (mov r8, r8)
 80076f8:	08009dae 	.word	0x08009dae
 80076fc:	08009dbf 	.word	0x08009dbf

08007700 <siprintf>:
 8007700:	b40e      	push	{r1, r2, r3}
 8007702:	b500      	push	{lr}
 8007704:	490b      	ldr	r1, [pc, #44]	; (8007734 <siprintf+0x34>)
 8007706:	b09c      	sub	sp, #112	; 0x70
 8007708:	ab1d      	add	r3, sp, #116	; 0x74
 800770a:	9002      	str	r0, [sp, #8]
 800770c:	9006      	str	r0, [sp, #24]
 800770e:	9107      	str	r1, [sp, #28]
 8007710:	9104      	str	r1, [sp, #16]
 8007712:	4809      	ldr	r0, [pc, #36]	; (8007738 <siprintf+0x38>)
 8007714:	4909      	ldr	r1, [pc, #36]	; (800773c <siprintf+0x3c>)
 8007716:	cb04      	ldmia	r3!, {r2}
 8007718:	9105      	str	r1, [sp, #20]
 800771a:	6800      	ldr	r0, [r0, #0]
 800771c:	a902      	add	r1, sp, #8
 800771e:	9301      	str	r3, [sp, #4]
 8007720:	f001 fb88 	bl	8008e34 <_svfiprintf_r>
 8007724:	2300      	movs	r3, #0
 8007726:	9a02      	ldr	r2, [sp, #8]
 8007728:	7013      	strb	r3, [r2, #0]
 800772a:	b01c      	add	sp, #112	; 0x70
 800772c:	bc08      	pop	{r3}
 800772e:	b003      	add	sp, #12
 8007730:	4718      	bx	r3
 8007732:	46c0      	nop			; (mov r8, r8)
 8007734:	7fffffff 	.word	0x7fffffff
 8007738:	20000044 	.word	0x20000044
 800773c:	ffff0208 	.word	0xffff0208

08007740 <quorem>:
 8007740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007742:	0006      	movs	r6, r0
 8007744:	690d      	ldr	r5, [r1, #16]
 8007746:	6933      	ldr	r3, [r6, #16]
 8007748:	b087      	sub	sp, #28
 800774a:	2000      	movs	r0, #0
 800774c:	9102      	str	r1, [sp, #8]
 800774e:	42ab      	cmp	r3, r5
 8007750:	db6b      	blt.n	800782a <quorem+0xea>
 8007752:	000b      	movs	r3, r1
 8007754:	3d01      	subs	r5, #1
 8007756:	00ac      	lsls	r4, r5, #2
 8007758:	3314      	adds	r3, #20
 800775a:	9305      	str	r3, [sp, #20]
 800775c:	191b      	adds	r3, r3, r4
 800775e:	9303      	str	r3, [sp, #12]
 8007760:	0033      	movs	r3, r6
 8007762:	3314      	adds	r3, #20
 8007764:	9301      	str	r3, [sp, #4]
 8007766:	191c      	adds	r4, r3, r4
 8007768:	9b03      	ldr	r3, [sp, #12]
 800776a:	6827      	ldr	r7, [r4, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	0038      	movs	r0, r7
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	3301      	adds	r3, #1
 8007774:	0019      	movs	r1, r3
 8007776:	9304      	str	r3, [sp, #16]
 8007778:	f7f8 fce2 	bl	8000140 <__udivsi3>
 800777c:	9b04      	ldr	r3, [sp, #16]
 800777e:	9000      	str	r0, [sp, #0]
 8007780:	429f      	cmp	r7, r3
 8007782:	d329      	bcc.n	80077d8 <quorem+0x98>
 8007784:	2300      	movs	r3, #0
 8007786:	469c      	mov	ip, r3
 8007788:	9801      	ldr	r0, [sp, #4]
 800778a:	9f05      	ldr	r7, [sp, #20]
 800778c:	9304      	str	r3, [sp, #16]
 800778e:	cf08      	ldmia	r7!, {r3}
 8007790:	9a00      	ldr	r2, [sp, #0]
 8007792:	b299      	uxth	r1, r3
 8007794:	4351      	muls	r1, r2
 8007796:	0c1b      	lsrs	r3, r3, #16
 8007798:	4353      	muls	r3, r2
 800779a:	4461      	add	r1, ip
 800779c:	0c0a      	lsrs	r2, r1, #16
 800779e:	189b      	adds	r3, r3, r2
 80077a0:	0c1a      	lsrs	r2, r3, #16
 80077a2:	9305      	str	r3, [sp, #20]
 80077a4:	6803      	ldr	r3, [r0, #0]
 80077a6:	4694      	mov	ip, r2
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	9b04      	ldr	r3, [sp, #16]
 80077ac:	b289      	uxth	r1, r1
 80077ae:	18d2      	adds	r2, r2, r3
 80077b0:	6803      	ldr	r3, [r0, #0]
 80077b2:	1a52      	subs	r2, r2, r1
 80077b4:	0c19      	lsrs	r1, r3, #16
 80077b6:	466b      	mov	r3, sp
 80077b8:	8a9b      	ldrh	r3, [r3, #20]
 80077ba:	1acb      	subs	r3, r1, r3
 80077bc:	1411      	asrs	r1, r2, #16
 80077be:	185b      	adds	r3, r3, r1
 80077c0:	1419      	asrs	r1, r3, #16
 80077c2:	b292      	uxth	r2, r2
 80077c4:	041b      	lsls	r3, r3, #16
 80077c6:	431a      	orrs	r2, r3
 80077c8:	9b03      	ldr	r3, [sp, #12]
 80077ca:	9104      	str	r1, [sp, #16]
 80077cc:	c004      	stmia	r0!, {r2}
 80077ce:	42bb      	cmp	r3, r7
 80077d0:	d2dd      	bcs.n	800778e <quorem+0x4e>
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d02e      	beq.n	8007836 <quorem+0xf6>
 80077d8:	0030      	movs	r0, r6
 80077da:	9902      	ldr	r1, [sp, #8]
 80077dc:	f001 f8fa 	bl	80089d4 <__mcmp>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	db21      	blt.n	8007828 <quorem+0xe8>
 80077e4:	0030      	movs	r0, r6
 80077e6:	2400      	movs	r4, #0
 80077e8:	9b00      	ldr	r3, [sp, #0]
 80077ea:	9902      	ldr	r1, [sp, #8]
 80077ec:	3301      	adds	r3, #1
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	3014      	adds	r0, #20
 80077f2:	3114      	adds	r1, #20
 80077f4:	6802      	ldr	r2, [r0, #0]
 80077f6:	c908      	ldmia	r1!, {r3}
 80077f8:	b292      	uxth	r2, r2
 80077fa:	1914      	adds	r4, r2, r4
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	1aa2      	subs	r2, r4, r2
 8007800:	6804      	ldr	r4, [r0, #0]
 8007802:	0c1b      	lsrs	r3, r3, #16
 8007804:	0c24      	lsrs	r4, r4, #16
 8007806:	1ae3      	subs	r3, r4, r3
 8007808:	1414      	asrs	r4, r2, #16
 800780a:	191b      	adds	r3, r3, r4
 800780c:	141c      	asrs	r4, r3, #16
 800780e:	b292      	uxth	r2, r2
 8007810:	041b      	lsls	r3, r3, #16
 8007812:	4313      	orrs	r3, r2
 8007814:	c008      	stmia	r0!, {r3}
 8007816:	9b03      	ldr	r3, [sp, #12]
 8007818:	428b      	cmp	r3, r1
 800781a:	d2eb      	bcs.n	80077f4 <quorem+0xb4>
 800781c:	9a01      	ldr	r2, [sp, #4]
 800781e:	00ab      	lsls	r3, r5, #2
 8007820:	18d3      	adds	r3, r2, r3
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	2a00      	cmp	r2, #0
 8007826:	d010      	beq.n	800784a <quorem+0x10a>
 8007828:	9800      	ldr	r0, [sp, #0]
 800782a:	b007      	add	sp, #28
 800782c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d104      	bne.n	800783e <quorem+0xfe>
 8007834:	3d01      	subs	r5, #1
 8007836:	9b01      	ldr	r3, [sp, #4]
 8007838:	3c04      	subs	r4, #4
 800783a:	42a3      	cmp	r3, r4
 800783c:	d3f7      	bcc.n	800782e <quorem+0xee>
 800783e:	6135      	str	r5, [r6, #16]
 8007840:	e7ca      	b.n	80077d8 <quorem+0x98>
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	2a00      	cmp	r2, #0
 8007846:	d104      	bne.n	8007852 <quorem+0x112>
 8007848:	3d01      	subs	r5, #1
 800784a:	9a01      	ldr	r2, [sp, #4]
 800784c:	3b04      	subs	r3, #4
 800784e:	429a      	cmp	r2, r3
 8007850:	d3f7      	bcc.n	8007842 <quorem+0x102>
 8007852:	6135      	str	r5, [r6, #16]
 8007854:	e7e8      	b.n	8007828 <quorem+0xe8>
	...

08007858 <_dtoa_r>:
 8007858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800785a:	b09d      	sub	sp, #116	; 0x74
 800785c:	9202      	str	r2, [sp, #8]
 800785e:	9303      	str	r3, [sp, #12]
 8007860:	9b02      	ldr	r3, [sp, #8]
 8007862:	9c03      	ldr	r4, [sp, #12]
 8007864:	930a      	str	r3, [sp, #40]	; 0x28
 8007866:	940b      	str	r4, [sp, #44]	; 0x2c
 8007868:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800786a:	0007      	movs	r7, r0
 800786c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800786e:	2c00      	cmp	r4, #0
 8007870:	d10e      	bne.n	8007890 <_dtoa_r+0x38>
 8007872:	2010      	movs	r0, #16
 8007874:	f000 fe12 	bl	800849c <malloc>
 8007878:	1e02      	subs	r2, r0, #0
 800787a:	6278      	str	r0, [r7, #36]	; 0x24
 800787c:	d104      	bne.n	8007888 <_dtoa_r+0x30>
 800787e:	21ea      	movs	r1, #234	; 0xea
 8007880:	4bc0      	ldr	r3, [pc, #768]	; (8007b84 <_dtoa_r+0x32c>)
 8007882:	48c1      	ldr	r0, [pc, #772]	; (8007b88 <_dtoa_r+0x330>)
 8007884:	f001 fbe8 	bl	8009058 <__assert_func>
 8007888:	6044      	str	r4, [r0, #4]
 800788a:	6084      	str	r4, [r0, #8]
 800788c:	6004      	str	r4, [r0, #0]
 800788e:	60c4      	str	r4, [r0, #12]
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	6819      	ldr	r1, [r3, #0]
 8007894:	2900      	cmp	r1, #0
 8007896:	d00a      	beq.n	80078ae <_dtoa_r+0x56>
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	2301      	movs	r3, #1
 800789c:	4093      	lsls	r3, r2
 800789e:	604a      	str	r2, [r1, #4]
 80078a0:	608b      	str	r3, [r1, #8]
 80078a2:	0038      	movs	r0, r7
 80078a4:	f000 fe54 	bl	8008550 <_Bfree>
 80078a8:	2200      	movs	r2, #0
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	9b03      	ldr	r3, [sp, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	da21      	bge.n	80078f8 <_dtoa_r+0xa0>
 80078b4:	2301      	movs	r3, #1
 80078b6:	602b      	str	r3, [r5, #0]
 80078b8:	9b03      	ldr	r3, [sp, #12]
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	085b      	lsrs	r3, r3, #1
 80078be:	930b      	str	r3, [sp, #44]	; 0x2c
 80078c0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80078c2:	4bb2      	ldr	r3, [pc, #712]	; (8007b8c <_dtoa_r+0x334>)
 80078c4:	002a      	movs	r2, r5
 80078c6:	9318      	str	r3, [sp, #96]	; 0x60
 80078c8:	401a      	ands	r2, r3
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d117      	bne.n	80078fe <_dtoa_r+0xa6>
 80078ce:	4bb0      	ldr	r3, [pc, #704]	; (8007b90 <_dtoa_r+0x338>)
 80078d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80078d2:	0328      	lsls	r0, r5, #12
 80078d4:	6013      	str	r3, [r2, #0]
 80078d6:	9b02      	ldr	r3, [sp, #8]
 80078d8:	0b00      	lsrs	r0, r0, #12
 80078da:	4318      	orrs	r0, r3
 80078dc:	d101      	bne.n	80078e2 <_dtoa_r+0x8a>
 80078de:	f000 fdc3 	bl	8008468 <_dtoa_r+0xc10>
 80078e2:	48ac      	ldr	r0, [pc, #688]	; (8007b94 <_dtoa_r+0x33c>)
 80078e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80078e6:	9005      	str	r0, [sp, #20]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d002      	beq.n	80078f2 <_dtoa_r+0x9a>
 80078ec:	4baa      	ldr	r3, [pc, #680]	; (8007b98 <_dtoa_r+0x340>)
 80078ee:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80078f0:	6013      	str	r3, [r2, #0]
 80078f2:	9805      	ldr	r0, [sp, #20]
 80078f4:	b01d      	add	sp, #116	; 0x74
 80078f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078f8:	2300      	movs	r3, #0
 80078fa:	602b      	str	r3, [r5, #0]
 80078fc:	e7e0      	b.n	80078c0 <_dtoa_r+0x68>
 80078fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007900:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007902:	9312      	str	r3, [sp, #72]	; 0x48
 8007904:	9413      	str	r4, [sp, #76]	; 0x4c
 8007906:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007908:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800790a:	2200      	movs	r2, #0
 800790c:	2300      	movs	r3, #0
 800790e:	f7f8 fd9d 	bl	800044c <__aeabi_dcmpeq>
 8007912:	1e04      	subs	r4, r0, #0
 8007914:	d00b      	beq.n	800792e <_dtoa_r+0xd6>
 8007916:	2301      	movs	r3, #1
 8007918:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800791a:	6013      	str	r3, [r2, #0]
 800791c:	4b9f      	ldr	r3, [pc, #636]	; (8007b9c <_dtoa_r+0x344>)
 800791e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007920:	9305      	str	r3, [sp, #20]
 8007922:	2a00      	cmp	r2, #0
 8007924:	d0e5      	beq.n	80078f2 <_dtoa_r+0x9a>
 8007926:	4a9e      	ldr	r2, [pc, #632]	; (8007ba0 <_dtoa_r+0x348>)
 8007928:	9926      	ldr	r1, [sp, #152]	; 0x98
 800792a:	600a      	str	r2, [r1, #0]
 800792c:	e7e1      	b.n	80078f2 <_dtoa_r+0x9a>
 800792e:	ab1a      	add	r3, sp, #104	; 0x68
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	ab1b      	add	r3, sp, #108	; 0x6c
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	0038      	movs	r0, r7
 8007938:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800793a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800793c:	f001 f8fe 	bl	8008b3c <__d2b>
 8007940:	006e      	lsls	r6, r5, #1
 8007942:	9004      	str	r0, [sp, #16]
 8007944:	0d76      	lsrs	r6, r6, #21
 8007946:	d100      	bne.n	800794a <_dtoa_r+0xf2>
 8007948:	e07c      	b.n	8007a44 <_dtoa_r+0x1ec>
 800794a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800794c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800794e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007950:	4a94      	ldr	r2, [pc, #592]	; (8007ba4 <_dtoa_r+0x34c>)
 8007952:	031b      	lsls	r3, r3, #12
 8007954:	0b1b      	lsrs	r3, r3, #12
 8007956:	431a      	orrs	r2, r3
 8007958:	0011      	movs	r1, r2
 800795a:	4b93      	ldr	r3, [pc, #588]	; (8007ba8 <_dtoa_r+0x350>)
 800795c:	9416      	str	r4, [sp, #88]	; 0x58
 800795e:	18f6      	adds	r6, r6, r3
 8007960:	2200      	movs	r2, #0
 8007962:	4b92      	ldr	r3, [pc, #584]	; (8007bac <_dtoa_r+0x354>)
 8007964:	f7fa f890 	bl	8001a88 <__aeabi_dsub>
 8007968:	4a91      	ldr	r2, [pc, #580]	; (8007bb0 <_dtoa_r+0x358>)
 800796a:	4b92      	ldr	r3, [pc, #584]	; (8007bb4 <_dtoa_r+0x35c>)
 800796c:	f7f9 fe20 	bl	80015b0 <__aeabi_dmul>
 8007970:	4a91      	ldr	r2, [pc, #580]	; (8007bb8 <_dtoa_r+0x360>)
 8007972:	4b92      	ldr	r3, [pc, #584]	; (8007bbc <_dtoa_r+0x364>)
 8007974:	f7f8 feac 	bl	80006d0 <__aeabi_dadd>
 8007978:	0004      	movs	r4, r0
 800797a:	0030      	movs	r0, r6
 800797c:	000d      	movs	r5, r1
 800797e:	f7fa fc69 	bl	8002254 <__aeabi_i2d>
 8007982:	4a8f      	ldr	r2, [pc, #572]	; (8007bc0 <_dtoa_r+0x368>)
 8007984:	4b8f      	ldr	r3, [pc, #572]	; (8007bc4 <_dtoa_r+0x36c>)
 8007986:	f7f9 fe13 	bl	80015b0 <__aeabi_dmul>
 800798a:	0002      	movs	r2, r0
 800798c:	000b      	movs	r3, r1
 800798e:	0020      	movs	r0, r4
 8007990:	0029      	movs	r1, r5
 8007992:	f7f8 fe9d 	bl	80006d0 <__aeabi_dadd>
 8007996:	0004      	movs	r4, r0
 8007998:	000d      	movs	r5, r1
 800799a:	f7fa fc25 	bl	80021e8 <__aeabi_d2iz>
 800799e:	2200      	movs	r2, #0
 80079a0:	9002      	str	r0, [sp, #8]
 80079a2:	2300      	movs	r3, #0
 80079a4:	0020      	movs	r0, r4
 80079a6:	0029      	movs	r1, r5
 80079a8:	f7f8 fd56 	bl	8000458 <__aeabi_dcmplt>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	d00b      	beq.n	80079c8 <_dtoa_r+0x170>
 80079b0:	9802      	ldr	r0, [sp, #8]
 80079b2:	f7fa fc4f 	bl	8002254 <__aeabi_i2d>
 80079b6:	002b      	movs	r3, r5
 80079b8:	0022      	movs	r2, r4
 80079ba:	f7f8 fd47 	bl	800044c <__aeabi_dcmpeq>
 80079be:	4243      	negs	r3, r0
 80079c0:	4158      	adcs	r0, r3
 80079c2:	9b02      	ldr	r3, [sp, #8]
 80079c4:	1a1b      	subs	r3, r3, r0
 80079c6:	9302      	str	r3, [sp, #8]
 80079c8:	2301      	movs	r3, #1
 80079ca:	9315      	str	r3, [sp, #84]	; 0x54
 80079cc:	9b02      	ldr	r3, [sp, #8]
 80079ce:	2b16      	cmp	r3, #22
 80079d0:	d80f      	bhi.n	80079f2 <_dtoa_r+0x19a>
 80079d2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80079d4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80079d6:	00da      	lsls	r2, r3, #3
 80079d8:	4b7b      	ldr	r3, [pc, #492]	; (8007bc8 <_dtoa_r+0x370>)
 80079da:	189b      	adds	r3, r3, r2
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f7f8 fd3a 	bl	8000458 <__aeabi_dcmplt>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d049      	beq.n	8007a7c <_dtoa_r+0x224>
 80079e8:	9b02      	ldr	r3, [sp, #8]
 80079ea:	3b01      	subs	r3, #1
 80079ec:	9302      	str	r3, [sp, #8]
 80079ee:	2300      	movs	r3, #0
 80079f0:	9315      	str	r3, [sp, #84]	; 0x54
 80079f2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80079f4:	1b9e      	subs	r6, r3, r6
 80079f6:	2300      	movs	r3, #0
 80079f8:	9308      	str	r3, [sp, #32]
 80079fa:	0033      	movs	r3, r6
 80079fc:	3b01      	subs	r3, #1
 80079fe:	930d      	str	r3, [sp, #52]	; 0x34
 8007a00:	d504      	bpl.n	8007a0c <_dtoa_r+0x1b4>
 8007a02:	2301      	movs	r3, #1
 8007a04:	1b9b      	subs	r3, r3, r6
 8007a06:	9308      	str	r3, [sp, #32]
 8007a08:	2300      	movs	r3, #0
 8007a0a:	930d      	str	r3, [sp, #52]	; 0x34
 8007a0c:	9b02      	ldr	r3, [sp, #8]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	db36      	blt.n	8007a80 <_dtoa_r+0x228>
 8007a12:	9a02      	ldr	r2, [sp, #8]
 8007a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a16:	4694      	mov	ip, r2
 8007a18:	4463      	add	r3, ip
 8007a1a:	930d      	str	r3, [sp, #52]	; 0x34
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	9214      	str	r2, [sp, #80]	; 0x50
 8007a20:	930e      	str	r3, [sp, #56]	; 0x38
 8007a22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a24:	2401      	movs	r4, #1
 8007a26:	2b09      	cmp	r3, #9
 8007a28:	d862      	bhi.n	8007af0 <_dtoa_r+0x298>
 8007a2a:	2b05      	cmp	r3, #5
 8007a2c:	dd02      	ble.n	8007a34 <_dtoa_r+0x1dc>
 8007a2e:	2400      	movs	r4, #0
 8007a30:	3b04      	subs	r3, #4
 8007a32:	9322      	str	r3, [sp, #136]	; 0x88
 8007a34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a36:	1e98      	subs	r0, r3, #2
 8007a38:	2803      	cmp	r0, #3
 8007a3a:	d862      	bhi.n	8007b02 <_dtoa_r+0x2aa>
 8007a3c:	f7f8 fb6c 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007a40:	56343629 	.word	0x56343629
 8007a44:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007a46:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007a48:	189e      	adds	r6, r3, r2
 8007a4a:	4b60      	ldr	r3, [pc, #384]	; (8007bcc <_dtoa_r+0x374>)
 8007a4c:	18f2      	adds	r2, r6, r3
 8007a4e:	2a20      	cmp	r2, #32
 8007a50:	dd0f      	ble.n	8007a72 <_dtoa_r+0x21a>
 8007a52:	2340      	movs	r3, #64	; 0x40
 8007a54:	1a9b      	subs	r3, r3, r2
 8007a56:	409d      	lsls	r5, r3
 8007a58:	4b5d      	ldr	r3, [pc, #372]	; (8007bd0 <_dtoa_r+0x378>)
 8007a5a:	9802      	ldr	r0, [sp, #8]
 8007a5c:	18f3      	adds	r3, r6, r3
 8007a5e:	40d8      	lsrs	r0, r3
 8007a60:	4328      	orrs	r0, r5
 8007a62:	f7fa fc27 	bl	80022b4 <__aeabi_ui2d>
 8007a66:	2301      	movs	r3, #1
 8007a68:	4c5a      	ldr	r4, [pc, #360]	; (8007bd4 <_dtoa_r+0x37c>)
 8007a6a:	3e01      	subs	r6, #1
 8007a6c:	1909      	adds	r1, r1, r4
 8007a6e:	9316      	str	r3, [sp, #88]	; 0x58
 8007a70:	e776      	b.n	8007960 <_dtoa_r+0x108>
 8007a72:	2320      	movs	r3, #32
 8007a74:	9802      	ldr	r0, [sp, #8]
 8007a76:	1a9b      	subs	r3, r3, r2
 8007a78:	4098      	lsls	r0, r3
 8007a7a:	e7f2      	b.n	8007a62 <_dtoa_r+0x20a>
 8007a7c:	9015      	str	r0, [sp, #84]	; 0x54
 8007a7e:	e7b8      	b.n	80079f2 <_dtoa_r+0x19a>
 8007a80:	9b08      	ldr	r3, [sp, #32]
 8007a82:	9a02      	ldr	r2, [sp, #8]
 8007a84:	1a9b      	subs	r3, r3, r2
 8007a86:	9308      	str	r3, [sp, #32]
 8007a88:	4253      	negs	r3, r2
 8007a8a:	930e      	str	r3, [sp, #56]	; 0x38
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	9314      	str	r3, [sp, #80]	; 0x50
 8007a90:	e7c7      	b.n	8007a22 <_dtoa_r+0x1ca>
 8007a92:	2300      	movs	r3, #0
 8007a94:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	dc36      	bgt.n	8007b0a <_dtoa_r+0x2b2>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	001a      	movs	r2, r3
 8007aa0:	930c      	str	r3, [sp, #48]	; 0x30
 8007aa2:	9306      	str	r3, [sp, #24]
 8007aa4:	9223      	str	r2, [sp, #140]	; 0x8c
 8007aa6:	e00d      	b.n	8007ac4 <_dtoa_r+0x26c>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e7f3      	b.n	8007a94 <_dtoa_r+0x23c>
 8007aac:	2300      	movs	r3, #0
 8007aae:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007ab0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ab2:	4694      	mov	ip, r2
 8007ab4:	9b02      	ldr	r3, [sp, #8]
 8007ab6:	4463      	add	r3, ip
 8007ab8:	930c      	str	r3, [sp, #48]	; 0x30
 8007aba:	3301      	adds	r3, #1
 8007abc:	9306      	str	r3, [sp, #24]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	dc00      	bgt.n	8007ac4 <_dtoa_r+0x26c>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ac8:	6042      	str	r2, [r0, #4]
 8007aca:	3204      	adds	r2, #4
 8007acc:	0015      	movs	r5, r2
 8007ace:	3514      	adds	r5, #20
 8007ad0:	6841      	ldr	r1, [r0, #4]
 8007ad2:	429d      	cmp	r5, r3
 8007ad4:	d91d      	bls.n	8007b12 <_dtoa_r+0x2ba>
 8007ad6:	0038      	movs	r0, r7
 8007ad8:	f000 fcf6 	bl	80084c8 <_Balloc>
 8007adc:	9005      	str	r0, [sp, #20]
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d11b      	bne.n	8007b1a <_dtoa_r+0x2c2>
 8007ae2:	21d5      	movs	r1, #213	; 0xd5
 8007ae4:	0002      	movs	r2, r0
 8007ae6:	4b3c      	ldr	r3, [pc, #240]	; (8007bd8 <_dtoa_r+0x380>)
 8007ae8:	0049      	lsls	r1, r1, #1
 8007aea:	e6ca      	b.n	8007882 <_dtoa_r+0x2a>
 8007aec:	2301      	movs	r3, #1
 8007aee:	e7de      	b.n	8007aae <_dtoa_r+0x256>
 8007af0:	2300      	movs	r3, #0
 8007af2:	940f      	str	r4, [sp, #60]	; 0x3c
 8007af4:	9322      	str	r3, [sp, #136]	; 0x88
 8007af6:	3b01      	subs	r3, #1
 8007af8:	930c      	str	r3, [sp, #48]	; 0x30
 8007afa:	9306      	str	r3, [sp, #24]
 8007afc:	2200      	movs	r2, #0
 8007afe:	3313      	adds	r3, #19
 8007b00:	e7d0      	b.n	8007aa4 <_dtoa_r+0x24c>
 8007b02:	2301      	movs	r3, #1
 8007b04:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b06:	3b02      	subs	r3, #2
 8007b08:	e7f6      	b.n	8007af8 <_dtoa_r+0x2a0>
 8007b0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b0c:	930c      	str	r3, [sp, #48]	; 0x30
 8007b0e:	9306      	str	r3, [sp, #24]
 8007b10:	e7d8      	b.n	8007ac4 <_dtoa_r+0x26c>
 8007b12:	3101      	adds	r1, #1
 8007b14:	6041      	str	r1, [r0, #4]
 8007b16:	0052      	lsls	r2, r2, #1
 8007b18:	e7d8      	b.n	8007acc <_dtoa_r+0x274>
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	9a05      	ldr	r2, [sp, #20]
 8007b1e:	601a      	str	r2, [r3, #0]
 8007b20:	9b06      	ldr	r3, [sp, #24]
 8007b22:	2b0e      	cmp	r3, #14
 8007b24:	d900      	bls.n	8007b28 <_dtoa_r+0x2d0>
 8007b26:	e0eb      	b.n	8007d00 <_dtoa_r+0x4a8>
 8007b28:	2c00      	cmp	r4, #0
 8007b2a:	d100      	bne.n	8007b2e <_dtoa_r+0x2d6>
 8007b2c:	e0e8      	b.n	8007d00 <_dtoa_r+0x4a8>
 8007b2e:	9b02      	ldr	r3, [sp, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	dd68      	ble.n	8007c06 <_dtoa_r+0x3ae>
 8007b34:	001a      	movs	r2, r3
 8007b36:	210f      	movs	r1, #15
 8007b38:	4b23      	ldr	r3, [pc, #140]	; (8007bc8 <_dtoa_r+0x370>)
 8007b3a:	400a      	ands	r2, r1
 8007b3c:	00d2      	lsls	r2, r2, #3
 8007b3e:	189b      	adds	r3, r3, r2
 8007b40:	681d      	ldr	r5, [r3, #0]
 8007b42:	685e      	ldr	r6, [r3, #4]
 8007b44:	9b02      	ldr	r3, [sp, #8]
 8007b46:	111c      	asrs	r4, r3, #4
 8007b48:	2302      	movs	r3, #2
 8007b4a:	9310      	str	r3, [sp, #64]	; 0x40
 8007b4c:	9b02      	ldr	r3, [sp, #8]
 8007b4e:	05db      	lsls	r3, r3, #23
 8007b50:	d50b      	bpl.n	8007b6a <_dtoa_r+0x312>
 8007b52:	4b22      	ldr	r3, [pc, #136]	; (8007bdc <_dtoa_r+0x384>)
 8007b54:	400c      	ands	r4, r1
 8007b56:	6a1a      	ldr	r2, [r3, #32]
 8007b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007b5c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007b5e:	f7f9 f921 	bl	8000da4 <__aeabi_ddiv>
 8007b62:	2303      	movs	r3, #3
 8007b64:	900a      	str	r0, [sp, #40]	; 0x28
 8007b66:	910b      	str	r1, [sp, #44]	; 0x2c
 8007b68:	9310      	str	r3, [sp, #64]	; 0x40
 8007b6a:	4b1c      	ldr	r3, [pc, #112]	; (8007bdc <_dtoa_r+0x384>)
 8007b6c:	9307      	str	r3, [sp, #28]
 8007b6e:	2c00      	cmp	r4, #0
 8007b70:	d136      	bne.n	8007be0 <_dtoa_r+0x388>
 8007b72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007b74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b76:	002a      	movs	r2, r5
 8007b78:	0033      	movs	r3, r6
 8007b7a:	f7f9 f913 	bl	8000da4 <__aeabi_ddiv>
 8007b7e:	900a      	str	r0, [sp, #40]	; 0x28
 8007b80:	910b      	str	r1, [sp, #44]	; 0x2c
 8007b82:	e05c      	b.n	8007c3e <_dtoa_r+0x3e6>
 8007b84:	08009ddd 	.word	0x08009ddd
 8007b88:	08009df4 	.word	0x08009df4
 8007b8c:	7ff00000 	.word	0x7ff00000
 8007b90:	0000270f 	.word	0x0000270f
 8007b94:	08009dd9 	.word	0x08009dd9
 8007b98:	08009ddc 	.word	0x08009ddc
 8007b9c:	08009dac 	.word	0x08009dac
 8007ba0:	08009dad 	.word	0x08009dad
 8007ba4:	3ff00000 	.word	0x3ff00000
 8007ba8:	fffffc01 	.word	0xfffffc01
 8007bac:	3ff80000 	.word	0x3ff80000
 8007bb0:	636f4361 	.word	0x636f4361
 8007bb4:	3fd287a7 	.word	0x3fd287a7
 8007bb8:	8b60c8b3 	.word	0x8b60c8b3
 8007bbc:	3fc68a28 	.word	0x3fc68a28
 8007bc0:	509f79fb 	.word	0x509f79fb
 8007bc4:	3fd34413 	.word	0x3fd34413
 8007bc8:	08009ef0 	.word	0x08009ef0
 8007bcc:	00000432 	.word	0x00000432
 8007bd0:	00000412 	.word	0x00000412
 8007bd4:	fe100000 	.word	0xfe100000
 8007bd8:	08009e53 	.word	0x08009e53
 8007bdc:	08009ec8 	.word	0x08009ec8
 8007be0:	2301      	movs	r3, #1
 8007be2:	421c      	tst	r4, r3
 8007be4:	d00b      	beq.n	8007bfe <_dtoa_r+0x3a6>
 8007be6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007be8:	0028      	movs	r0, r5
 8007bea:	3301      	adds	r3, #1
 8007bec:	9310      	str	r3, [sp, #64]	; 0x40
 8007bee:	9b07      	ldr	r3, [sp, #28]
 8007bf0:	0031      	movs	r1, r6
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f7f9 fcdb 	bl	80015b0 <__aeabi_dmul>
 8007bfa:	0005      	movs	r5, r0
 8007bfc:	000e      	movs	r6, r1
 8007bfe:	9b07      	ldr	r3, [sp, #28]
 8007c00:	1064      	asrs	r4, r4, #1
 8007c02:	3308      	adds	r3, #8
 8007c04:	e7b2      	b.n	8007b6c <_dtoa_r+0x314>
 8007c06:	2302      	movs	r3, #2
 8007c08:	9310      	str	r3, [sp, #64]	; 0x40
 8007c0a:	9b02      	ldr	r3, [sp, #8]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d016      	beq.n	8007c3e <_dtoa_r+0x3e6>
 8007c10:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007c12:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007c14:	425c      	negs	r4, r3
 8007c16:	230f      	movs	r3, #15
 8007c18:	4ab5      	ldr	r2, [pc, #724]	; (8007ef0 <_dtoa_r+0x698>)
 8007c1a:	4023      	ands	r3, r4
 8007c1c:	00db      	lsls	r3, r3, #3
 8007c1e:	18d3      	adds	r3, r2, r3
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f7f9 fcc4 	bl	80015b0 <__aeabi_dmul>
 8007c28:	2601      	movs	r6, #1
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	900a      	str	r0, [sp, #40]	; 0x28
 8007c2e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007c30:	4db0      	ldr	r5, [pc, #704]	; (8007ef4 <_dtoa_r+0x69c>)
 8007c32:	1124      	asrs	r4, r4, #4
 8007c34:	2c00      	cmp	r4, #0
 8007c36:	d000      	beq.n	8007c3a <_dtoa_r+0x3e2>
 8007c38:	e094      	b.n	8007d64 <_dtoa_r+0x50c>
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d19f      	bne.n	8007b7e <_dtoa_r+0x326>
 8007c3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d100      	bne.n	8007c46 <_dtoa_r+0x3ee>
 8007c44:	e09b      	b.n	8007d7e <_dtoa_r+0x526>
 8007c46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007c48:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	0020      	movs	r0, r4
 8007c4e:	0029      	movs	r1, r5
 8007c50:	4ba9      	ldr	r3, [pc, #676]	; (8007ef8 <_dtoa_r+0x6a0>)
 8007c52:	f7f8 fc01 	bl	8000458 <__aeabi_dcmplt>
 8007c56:	2800      	cmp	r0, #0
 8007c58:	d100      	bne.n	8007c5c <_dtoa_r+0x404>
 8007c5a:	e090      	b.n	8007d7e <_dtoa_r+0x526>
 8007c5c:	9b06      	ldr	r3, [sp, #24]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d100      	bne.n	8007c64 <_dtoa_r+0x40c>
 8007c62:	e08c      	b.n	8007d7e <_dtoa_r+0x526>
 8007c64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	dd46      	ble.n	8007cf8 <_dtoa_r+0x4a0>
 8007c6a:	9b02      	ldr	r3, [sp, #8]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	0020      	movs	r0, r4
 8007c70:	0029      	movs	r1, r5
 8007c72:	1e5e      	subs	r6, r3, #1
 8007c74:	4ba1      	ldr	r3, [pc, #644]	; (8007efc <_dtoa_r+0x6a4>)
 8007c76:	f7f9 fc9b 	bl	80015b0 <__aeabi_dmul>
 8007c7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c7c:	900a      	str	r0, [sp, #40]	; 0x28
 8007c7e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007c80:	3301      	adds	r3, #1
 8007c82:	9310      	str	r3, [sp, #64]	; 0x40
 8007c84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c86:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007c88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007c8a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007c8c:	9307      	str	r3, [sp, #28]
 8007c8e:	f7fa fae1 	bl	8002254 <__aeabi_i2d>
 8007c92:	0022      	movs	r2, r4
 8007c94:	002b      	movs	r3, r5
 8007c96:	f7f9 fc8b 	bl	80015b0 <__aeabi_dmul>
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	4b98      	ldr	r3, [pc, #608]	; (8007f00 <_dtoa_r+0x6a8>)
 8007c9e:	f7f8 fd17 	bl	80006d0 <__aeabi_dadd>
 8007ca2:	9010      	str	r0, [sp, #64]	; 0x40
 8007ca4:	9111      	str	r1, [sp, #68]	; 0x44
 8007ca6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007caa:	920a      	str	r2, [sp, #40]	; 0x28
 8007cac:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cae:	4a95      	ldr	r2, [pc, #596]	; (8007f04 <_dtoa_r+0x6ac>)
 8007cb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cb2:	4694      	mov	ip, r2
 8007cb4:	4463      	add	r3, ip
 8007cb6:	9317      	str	r3, [sp, #92]	; 0x5c
 8007cb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cba:	9b07      	ldr	r3, [sp, #28]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d161      	bne.n	8007d84 <_dtoa_r+0x52c>
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	0020      	movs	r0, r4
 8007cc4:	0029      	movs	r1, r5
 8007cc6:	4b90      	ldr	r3, [pc, #576]	; (8007f08 <_dtoa_r+0x6b0>)
 8007cc8:	f7f9 fede 	bl	8001a88 <__aeabi_dsub>
 8007ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cd0:	0004      	movs	r4, r0
 8007cd2:	000d      	movs	r5, r1
 8007cd4:	f7f8 fbd4 	bl	8000480 <__aeabi_dcmpgt>
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	d000      	beq.n	8007cde <_dtoa_r+0x486>
 8007cdc:	e2b5      	b.n	800824a <_dtoa_r+0x9f2>
 8007cde:	488b      	ldr	r0, [pc, #556]	; (8007f0c <_dtoa_r+0x6b4>)
 8007ce0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007ce2:	4684      	mov	ip, r0
 8007ce4:	4461      	add	r1, ip
 8007ce6:	000b      	movs	r3, r1
 8007ce8:	0020      	movs	r0, r4
 8007cea:	0029      	movs	r1, r5
 8007cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cee:	f7f8 fbb3 	bl	8000458 <__aeabi_dcmplt>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	d000      	beq.n	8007cf8 <_dtoa_r+0x4a0>
 8007cf6:	e2a5      	b.n	8008244 <_dtoa_r+0x9ec>
 8007cf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cfa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007cfc:	930a      	str	r3, [sp, #40]	; 0x28
 8007cfe:	940b      	str	r4, [sp, #44]	; 0x2c
 8007d00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	da00      	bge.n	8007d08 <_dtoa_r+0x4b0>
 8007d06:	e171      	b.n	8007fec <_dtoa_r+0x794>
 8007d08:	9a02      	ldr	r2, [sp, #8]
 8007d0a:	2a0e      	cmp	r2, #14
 8007d0c:	dd00      	ble.n	8007d10 <_dtoa_r+0x4b8>
 8007d0e:	e16d      	b.n	8007fec <_dtoa_r+0x794>
 8007d10:	4b77      	ldr	r3, [pc, #476]	; (8007ef0 <_dtoa_r+0x698>)
 8007d12:	00d2      	lsls	r2, r2, #3
 8007d14:	189b      	adds	r3, r3, r2
 8007d16:	685c      	ldr	r4, [r3, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	9308      	str	r3, [sp, #32]
 8007d1c:	9409      	str	r4, [sp, #36]	; 0x24
 8007d1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	db00      	blt.n	8007d26 <_dtoa_r+0x4ce>
 8007d24:	e0f6      	b.n	8007f14 <_dtoa_r+0x6bc>
 8007d26:	9b06      	ldr	r3, [sp, #24]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	dd00      	ble.n	8007d2e <_dtoa_r+0x4d6>
 8007d2c:	e0f2      	b.n	8007f14 <_dtoa_r+0x6bc>
 8007d2e:	d000      	beq.n	8007d32 <_dtoa_r+0x4da>
 8007d30:	e288      	b.n	8008244 <_dtoa_r+0x9ec>
 8007d32:	9808      	ldr	r0, [sp, #32]
 8007d34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d36:	2200      	movs	r2, #0
 8007d38:	4b73      	ldr	r3, [pc, #460]	; (8007f08 <_dtoa_r+0x6b0>)
 8007d3a:	f7f9 fc39 	bl	80015b0 <__aeabi_dmul>
 8007d3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d42:	f7f8 fba7 	bl	8000494 <__aeabi_dcmpge>
 8007d46:	9e06      	ldr	r6, [sp, #24]
 8007d48:	0035      	movs	r5, r6
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	d000      	beq.n	8007d50 <_dtoa_r+0x4f8>
 8007d4e:	e25f      	b.n	8008210 <_dtoa_r+0x9b8>
 8007d50:	9b05      	ldr	r3, [sp, #20]
 8007d52:	9a05      	ldr	r2, [sp, #20]
 8007d54:	3301      	adds	r3, #1
 8007d56:	9307      	str	r3, [sp, #28]
 8007d58:	2331      	movs	r3, #49	; 0x31
 8007d5a:	7013      	strb	r3, [r2, #0]
 8007d5c:	9b02      	ldr	r3, [sp, #8]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	9302      	str	r3, [sp, #8]
 8007d62:	e25a      	b.n	800821a <_dtoa_r+0x9c2>
 8007d64:	4234      	tst	r4, r6
 8007d66:	d007      	beq.n	8007d78 <_dtoa_r+0x520>
 8007d68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	9310      	str	r3, [sp, #64]	; 0x40
 8007d6e:	682a      	ldr	r2, [r5, #0]
 8007d70:	686b      	ldr	r3, [r5, #4]
 8007d72:	f7f9 fc1d 	bl	80015b0 <__aeabi_dmul>
 8007d76:	0033      	movs	r3, r6
 8007d78:	1064      	asrs	r4, r4, #1
 8007d7a:	3508      	adds	r5, #8
 8007d7c:	e75a      	b.n	8007c34 <_dtoa_r+0x3dc>
 8007d7e:	9e02      	ldr	r6, [sp, #8]
 8007d80:	9b06      	ldr	r3, [sp, #24]
 8007d82:	e780      	b.n	8007c86 <_dtoa_r+0x42e>
 8007d84:	9b07      	ldr	r3, [sp, #28]
 8007d86:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007d88:	1e5a      	subs	r2, r3, #1
 8007d8a:	4b59      	ldr	r3, [pc, #356]	; (8007ef0 <_dtoa_r+0x698>)
 8007d8c:	00d2      	lsls	r2, r2, #3
 8007d8e:	189b      	adds	r3, r3, r2
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	2900      	cmp	r1, #0
 8007d96:	d051      	beq.n	8007e3c <_dtoa_r+0x5e4>
 8007d98:	2000      	movs	r0, #0
 8007d9a:	495d      	ldr	r1, [pc, #372]	; (8007f10 <_dtoa_r+0x6b8>)
 8007d9c:	f7f9 f802 	bl	8000da4 <__aeabi_ddiv>
 8007da0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007da4:	f7f9 fe70 	bl	8001a88 <__aeabi_dsub>
 8007da8:	9a05      	ldr	r2, [sp, #20]
 8007daa:	9b05      	ldr	r3, [sp, #20]
 8007dac:	4694      	mov	ip, r2
 8007dae:	9310      	str	r3, [sp, #64]	; 0x40
 8007db0:	9b07      	ldr	r3, [sp, #28]
 8007db2:	900a      	str	r0, [sp, #40]	; 0x28
 8007db4:	910b      	str	r1, [sp, #44]	; 0x2c
 8007db6:	4463      	add	r3, ip
 8007db8:	9319      	str	r3, [sp, #100]	; 0x64
 8007dba:	0029      	movs	r1, r5
 8007dbc:	0020      	movs	r0, r4
 8007dbe:	f7fa fa13 	bl	80021e8 <__aeabi_d2iz>
 8007dc2:	9017      	str	r0, [sp, #92]	; 0x5c
 8007dc4:	f7fa fa46 	bl	8002254 <__aeabi_i2d>
 8007dc8:	0002      	movs	r2, r0
 8007dca:	000b      	movs	r3, r1
 8007dcc:	0020      	movs	r0, r4
 8007dce:	0029      	movs	r1, r5
 8007dd0:	f7f9 fe5a 	bl	8001a88 <__aeabi_dsub>
 8007dd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007dd8:	3301      	adds	r3, #1
 8007dda:	9307      	str	r3, [sp, #28]
 8007ddc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007dde:	0004      	movs	r4, r0
 8007de0:	3330      	adds	r3, #48	; 0x30
 8007de2:	7013      	strb	r3, [r2, #0]
 8007de4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007de8:	000d      	movs	r5, r1
 8007dea:	f7f8 fb35 	bl	8000458 <__aeabi_dcmplt>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	d175      	bne.n	8007ede <_dtoa_r+0x686>
 8007df2:	0022      	movs	r2, r4
 8007df4:	002b      	movs	r3, r5
 8007df6:	2000      	movs	r0, #0
 8007df8:	493f      	ldr	r1, [pc, #252]	; (8007ef8 <_dtoa_r+0x6a0>)
 8007dfa:	f7f9 fe45 	bl	8001a88 <__aeabi_dsub>
 8007dfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e02:	f7f8 fb29 	bl	8000458 <__aeabi_dcmplt>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	d000      	beq.n	8007e0c <_dtoa_r+0x5b4>
 8007e0a:	e0d1      	b.n	8007fb0 <_dtoa_r+0x758>
 8007e0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e0e:	9a07      	ldr	r2, [sp, #28]
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d100      	bne.n	8007e16 <_dtoa_r+0x5be>
 8007e14:	e770      	b.n	8007cf8 <_dtoa_r+0x4a0>
 8007e16:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	4b37      	ldr	r3, [pc, #220]	; (8007efc <_dtoa_r+0x6a4>)
 8007e1e:	f7f9 fbc7 	bl	80015b0 <__aeabi_dmul>
 8007e22:	4b36      	ldr	r3, [pc, #216]	; (8007efc <_dtoa_r+0x6a4>)
 8007e24:	900a      	str	r0, [sp, #40]	; 0x28
 8007e26:	910b      	str	r1, [sp, #44]	; 0x2c
 8007e28:	2200      	movs	r2, #0
 8007e2a:	0020      	movs	r0, r4
 8007e2c:	0029      	movs	r1, r5
 8007e2e:	f7f9 fbbf 	bl	80015b0 <__aeabi_dmul>
 8007e32:	9b07      	ldr	r3, [sp, #28]
 8007e34:	0004      	movs	r4, r0
 8007e36:	000d      	movs	r5, r1
 8007e38:	9310      	str	r3, [sp, #64]	; 0x40
 8007e3a:	e7be      	b.n	8007dba <_dtoa_r+0x562>
 8007e3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e40:	f7f9 fbb6 	bl	80015b0 <__aeabi_dmul>
 8007e44:	9a05      	ldr	r2, [sp, #20]
 8007e46:	9b05      	ldr	r3, [sp, #20]
 8007e48:	4694      	mov	ip, r2
 8007e4a:	930a      	str	r3, [sp, #40]	; 0x28
 8007e4c:	9b07      	ldr	r3, [sp, #28]
 8007e4e:	9010      	str	r0, [sp, #64]	; 0x40
 8007e50:	9111      	str	r1, [sp, #68]	; 0x44
 8007e52:	4463      	add	r3, ip
 8007e54:	9319      	str	r3, [sp, #100]	; 0x64
 8007e56:	0029      	movs	r1, r5
 8007e58:	0020      	movs	r0, r4
 8007e5a:	f7fa f9c5 	bl	80021e8 <__aeabi_d2iz>
 8007e5e:	9017      	str	r0, [sp, #92]	; 0x5c
 8007e60:	f7fa f9f8 	bl	8002254 <__aeabi_i2d>
 8007e64:	0002      	movs	r2, r0
 8007e66:	000b      	movs	r3, r1
 8007e68:	0020      	movs	r0, r4
 8007e6a:	0029      	movs	r1, r5
 8007e6c:	f7f9 fe0c 	bl	8001a88 <__aeabi_dsub>
 8007e70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e74:	3330      	adds	r3, #48	; 0x30
 8007e76:	7013      	strb	r3, [r2, #0]
 8007e78:	0013      	movs	r3, r2
 8007e7a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	0004      	movs	r4, r0
 8007e80:	000d      	movs	r5, r1
 8007e82:	930a      	str	r3, [sp, #40]	; 0x28
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d12c      	bne.n	8007ee2 <_dtoa_r+0x68a>
 8007e88:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007e8a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007e8c:	9a05      	ldr	r2, [sp, #20]
 8007e8e:	9b07      	ldr	r3, [sp, #28]
 8007e90:	4694      	mov	ip, r2
 8007e92:	4463      	add	r3, ip
 8007e94:	2200      	movs	r2, #0
 8007e96:	9307      	str	r3, [sp, #28]
 8007e98:	4b1d      	ldr	r3, [pc, #116]	; (8007f10 <_dtoa_r+0x6b8>)
 8007e9a:	f7f8 fc19 	bl	80006d0 <__aeabi_dadd>
 8007e9e:	0002      	movs	r2, r0
 8007ea0:	000b      	movs	r3, r1
 8007ea2:	0020      	movs	r0, r4
 8007ea4:	0029      	movs	r1, r5
 8007ea6:	f7f8 faeb 	bl	8000480 <__aeabi_dcmpgt>
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	d000      	beq.n	8007eb0 <_dtoa_r+0x658>
 8007eae:	e07f      	b.n	8007fb0 <_dtoa_r+0x758>
 8007eb0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007eb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	4916      	ldr	r1, [pc, #88]	; (8007f10 <_dtoa_r+0x6b8>)
 8007eb8:	f7f9 fde6 	bl	8001a88 <__aeabi_dsub>
 8007ebc:	0002      	movs	r2, r0
 8007ebe:	000b      	movs	r3, r1
 8007ec0:	0020      	movs	r0, r4
 8007ec2:	0029      	movs	r1, r5
 8007ec4:	f7f8 fac8 	bl	8000458 <__aeabi_dcmplt>
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	d100      	bne.n	8007ece <_dtoa_r+0x676>
 8007ecc:	e714      	b.n	8007cf8 <_dtoa_r+0x4a0>
 8007ece:	9b07      	ldr	r3, [sp, #28]
 8007ed0:	001a      	movs	r2, r3
 8007ed2:	3a01      	subs	r2, #1
 8007ed4:	9207      	str	r2, [sp, #28]
 8007ed6:	7812      	ldrb	r2, [r2, #0]
 8007ed8:	2a30      	cmp	r2, #48	; 0x30
 8007eda:	d0f8      	beq.n	8007ece <_dtoa_r+0x676>
 8007edc:	9307      	str	r3, [sp, #28]
 8007ede:	9602      	str	r6, [sp, #8]
 8007ee0:	e054      	b.n	8007f8c <_dtoa_r+0x734>
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	4b05      	ldr	r3, [pc, #20]	; (8007efc <_dtoa_r+0x6a4>)
 8007ee6:	f7f9 fb63 	bl	80015b0 <__aeabi_dmul>
 8007eea:	0004      	movs	r4, r0
 8007eec:	000d      	movs	r5, r1
 8007eee:	e7b2      	b.n	8007e56 <_dtoa_r+0x5fe>
 8007ef0:	08009ef0 	.word	0x08009ef0
 8007ef4:	08009ec8 	.word	0x08009ec8
 8007ef8:	3ff00000 	.word	0x3ff00000
 8007efc:	40240000 	.word	0x40240000
 8007f00:	401c0000 	.word	0x401c0000
 8007f04:	fcc00000 	.word	0xfcc00000
 8007f08:	40140000 	.word	0x40140000
 8007f0c:	7cc00000 	.word	0x7cc00000
 8007f10:	3fe00000 	.word	0x3fe00000
 8007f14:	9b06      	ldr	r3, [sp, #24]
 8007f16:	9e05      	ldr	r6, [sp, #20]
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	199b      	adds	r3, r3, r6
 8007f1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007f1e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007f20:	930a      	str	r3, [sp, #40]	; 0x28
 8007f22:	9a08      	ldr	r2, [sp, #32]
 8007f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f26:	0020      	movs	r0, r4
 8007f28:	0029      	movs	r1, r5
 8007f2a:	f7f8 ff3b 	bl	8000da4 <__aeabi_ddiv>
 8007f2e:	f7fa f95b 	bl	80021e8 <__aeabi_d2iz>
 8007f32:	9006      	str	r0, [sp, #24]
 8007f34:	f7fa f98e 	bl	8002254 <__aeabi_i2d>
 8007f38:	9a08      	ldr	r2, [sp, #32]
 8007f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f3c:	f7f9 fb38 	bl	80015b0 <__aeabi_dmul>
 8007f40:	0002      	movs	r2, r0
 8007f42:	000b      	movs	r3, r1
 8007f44:	0020      	movs	r0, r4
 8007f46:	0029      	movs	r1, r5
 8007f48:	f7f9 fd9e 	bl	8001a88 <__aeabi_dsub>
 8007f4c:	0033      	movs	r3, r6
 8007f4e:	9a06      	ldr	r2, [sp, #24]
 8007f50:	3601      	adds	r6, #1
 8007f52:	3230      	adds	r2, #48	; 0x30
 8007f54:	701a      	strb	r2, [r3, #0]
 8007f56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f58:	9607      	str	r6, [sp, #28]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d139      	bne.n	8007fd2 <_dtoa_r+0x77a>
 8007f5e:	0002      	movs	r2, r0
 8007f60:	000b      	movs	r3, r1
 8007f62:	f7f8 fbb5 	bl	80006d0 <__aeabi_dadd>
 8007f66:	9a08      	ldr	r2, [sp, #32]
 8007f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f6a:	0004      	movs	r4, r0
 8007f6c:	000d      	movs	r5, r1
 8007f6e:	f7f8 fa87 	bl	8000480 <__aeabi_dcmpgt>
 8007f72:	2800      	cmp	r0, #0
 8007f74:	d11b      	bne.n	8007fae <_dtoa_r+0x756>
 8007f76:	9a08      	ldr	r2, [sp, #32]
 8007f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f7a:	0020      	movs	r0, r4
 8007f7c:	0029      	movs	r1, r5
 8007f7e:	f7f8 fa65 	bl	800044c <__aeabi_dcmpeq>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d002      	beq.n	8007f8c <_dtoa_r+0x734>
 8007f86:	9b06      	ldr	r3, [sp, #24]
 8007f88:	07db      	lsls	r3, r3, #31
 8007f8a:	d410      	bmi.n	8007fae <_dtoa_r+0x756>
 8007f8c:	0038      	movs	r0, r7
 8007f8e:	9904      	ldr	r1, [sp, #16]
 8007f90:	f000 fade 	bl	8008550 <_Bfree>
 8007f94:	2300      	movs	r3, #0
 8007f96:	9a07      	ldr	r2, [sp, #28]
 8007f98:	9802      	ldr	r0, [sp, #8]
 8007f9a:	7013      	strb	r3, [r2, #0]
 8007f9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007f9e:	3001      	adds	r0, #1
 8007fa0:	6018      	str	r0, [r3, #0]
 8007fa2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d100      	bne.n	8007faa <_dtoa_r+0x752>
 8007fa8:	e4a3      	b.n	80078f2 <_dtoa_r+0x9a>
 8007faa:	601a      	str	r2, [r3, #0]
 8007fac:	e4a1      	b.n	80078f2 <_dtoa_r+0x9a>
 8007fae:	9e02      	ldr	r6, [sp, #8]
 8007fb0:	9b07      	ldr	r3, [sp, #28]
 8007fb2:	9307      	str	r3, [sp, #28]
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	781a      	ldrb	r2, [r3, #0]
 8007fb8:	2a39      	cmp	r2, #57	; 0x39
 8007fba:	d106      	bne.n	8007fca <_dtoa_r+0x772>
 8007fbc:	9a05      	ldr	r2, [sp, #20]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d1f7      	bne.n	8007fb2 <_dtoa_r+0x75a>
 8007fc2:	2230      	movs	r2, #48	; 0x30
 8007fc4:	9905      	ldr	r1, [sp, #20]
 8007fc6:	3601      	adds	r6, #1
 8007fc8:	700a      	strb	r2, [r1, #0]
 8007fca:	781a      	ldrb	r2, [r3, #0]
 8007fcc:	3201      	adds	r2, #1
 8007fce:	701a      	strb	r2, [r3, #0]
 8007fd0:	e785      	b.n	8007ede <_dtoa_r+0x686>
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	4bad      	ldr	r3, [pc, #692]	; (800828c <_dtoa_r+0xa34>)
 8007fd6:	f7f9 faeb 	bl	80015b0 <__aeabi_dmul>
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2300      	movs	r3, #0
 8007fde:	0004      	movs	r4, r0
 8007fe0:	000d      	movs	r5, r1
 8007fe2:	f7f8 fa33 	bl	800044c <__aeabi_dcmpeq>
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	d09b      	beq.n	8007f22 <_dtoa_r+0x6ca>
 8007fea:	e7cf      	b.n	8007f8c <_dtoa_r+0x734>
 8007fec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007fee:	2a00      	cmp	r2, #0
 8007ff0:	d100      	bne.n	8007ff4 <_dtoa_r+0x79c>
 8007ff2:	e082      	b.n	80080fa <_dtoa_r+0x8a2>
 8007ff4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007ff6:	2a01      	cmp	r2, #1
 8007ff8:	dc66      	bgt.n	80080c8 <_dtoa_r+0x870>
 8007ffa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007ffc:	2a00      	cmp	r2, #0
 8007ffe:	d05f      	beq.n	80080c0 <_dtoa_r+0x868>
 8008000:	4aa3      	ldr	r2, [pc, #652]	; (8008290 <_dtoa_r+0xa38>)
 8008002:	189b      	adds	r3, r3, r2
 8008004:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008006:	9c08      	ldr	r4, [sp, #32]
 8008008:	9a08      	ldr	r2, [sp, #32]
 800800a:	2101      	movs	r1, #1
 800800c:	18d2      	adds	r2, r2, r3
 800800e:	9208      	str	r2, [sp, #32]
 8008010:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008012:	0038      	movs	r0, r7
 8008014:	18d3      	adds	r3, r2, r3
 8008016:	930d      	str	r3, [sp, #52]	; 0x34
 8008018:	f000 fb4a 	bl	80086b0 <__i2b>
 800801c:	0005      	movs	r5, r0
 800801e:	2c00      	cmp	r4, #0
 8008020:	dd0e      	ble.n	8008040 <_dtoa_r+0x7e8>
 8008022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008024:	2b00      	cmp	r3, #0
 8008026:	dd0b      	ble.n	8008040 <_dtoa_r+0x7e8>
 8008028:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800802a:	0023      	movs	r3, r4
 800802c:	4294      	cmp	r4, r2
 800802e:	dd00      	ble.n	8008032 <_dtoa_r+0x7da>
 8008030:	0013      	movs	r3, r2
 8008032:	9a08      	ldr	r2, [sp, #32]
 8008034:	1ae4      	subs	r4, r4, r3
 8008036:	1ad2      	subs	r2, r2, r3
 8008038:	9208      	str	r2, [sp, #32]
 800803a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	930d      	str	r3, [sp, #52]	; 0x34
 8008040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008042:	2b00      	cmp	r3, #0
 8008044:	d01f      	beq.n	8008086 <_dtoa_r+0x82e>
 8008046:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008048:	2b00      	cmp	r3, #0
 800804a:	d05a      	beq.n	8008102 <_dtoa_r+0x8aa>
 800804c:	2e00      	cmp	r6, #0
 800804e:	dd11      	ble.n	8008074 <_dtoa_r+0x81c>
 8008050:	0029      	movs	r1, r5
 8008052:	0032      	movs	r2, r6
 8008054:	0038      	movs	r0, r7
 8008056:	f000 fbf1 	bl	800883c <__pow5mult>
 800805a:	9a04      	ldr	r2, [sp, #16]
 800805c:	0001      	movs	r1, r0
 800805e:	0005      	movs	r5, r0
 8008060:	0038      	movs	r0, r7
 8008062:	f000 fb3b 	bl	80086dc <__multiply>
 8008066:	9904      	ldr	r1, [sp, #16]
 8008068:	9007      	str	r0, [sp, #28]
 800806a:	0038      	movs	r0, r7
 800806c:	f000 fa70 	bl	8008550 <_Bfree>
 8008070:	9b07      	ldr	r3, [sp, #28]
 8008072:	9304      	str	r3, [sp, #16]
 8008074:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008076:	1b9a      	subs	r2, r3, r6
 8008078:	42b3      	cmp	r3, r6
 800807a:	d004      	beq.n	8008086 <_dtoa_r+0x82e>
 800807c:	0038      	movs	r0, r7
 800807e:	9904      	ldr	r1, [sp, #16]
 8008080:	f000 fbdc 	bl	800883c <__pow5mult>
 8008084:	9004      	str	r0, [sp, #16]
 8008086:	2101      	movs	r1, #1
 8008088:	0038      	movs	r0, r7
 800808a:	f000 fb11 	bl	80086b0 <__i2b>
 800808e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008090:	0006      	movs	r6, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	dd37      	ble.n	8008106 <_dtoa_r+0x8ae>
 8008096:	001a      	movs	r2, r3
 8008098:	0001      	movs	r1, r0
 800809a:	0038      	movs	r0, r7
 800809c:	f000 fbce 	bl	800883c <__pow5mult>
 80080a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080a2:	0006      	movs	r6, r0
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	dd33      	ble.n	8008110 <_dtoa_r+0x8b8>
 80080a8:	2300      	movs	r3, #0
 80080aa:	9307      	str	r3, [sp, #28]
 80080ac:	6933      	ldr	r3, [r6, #16]
 80080ae:	3303      	adds	r3, #3
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	18f3      	adds	r3, r6, r3
 80080b4:	6858      	ldr	r0, [r3, #4]
 80080b6:	f000 fab3 	bl	8008620 <__hi0bits>
 80080ba:	2320      	movs	r3, #32
 80080bc:	1a18      	subs	r0, r3, r0
 80080be:	e03f      	b.n	8008140 <_dtoa_r+0x8e8>
 80080c0:	2336      	movs	r3, #54	; 0x36
 80080c2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80080c4:	1a9b      	subs	r3, r3, r2
 80080c6:	e79d      	b.n	8008004 <_dtoa_r+0x7ac>
 80080c8:	9b06      	ldr	r3, [sp, #24]
 80080ca:	1e5e      	subs	r6, r3, #1
 80080cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080ce:	42b3      	cmp	r3, r6
 80080d0:	db08      	blt.n	80080e4 <_dtoa_r+0x88c>
 80080d2:	1b9e      	subs	r6, r3, r6
 80080d4:	9b06      	ldr	r3, [sp, #24]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	da0c      	bge.n	80080f4 <_dtoa_r+0x89c>
 80080da:	9b08      	ldr	r3, [sp, #32]
 80080dc:	9a06      	ldr	r2, [sp, #24]
 80080de:	1a9c      	subs	r4, r3, r2
 80080e0:	2300      	movs	r3, #0
 80080e2:	e791      	b.n	8008008 <_dtoa_r+0x7b0>
 80080e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80080e8:	1af3      	subs	r3, r6, r3
 80080ea:	18d3      	adds	r3, r2, r3
 80080ec:	960e      	str	r6, [sp, #56]	; 0x38
 80080ee:	9314      	str	r3, [sp, #80]	; 0x50
 80080f0:	2600      	movs	r6, #0
 80080f2:	e7ef      	b.n	80080d4 <_dtoa_r+0x87c>
 80080f4:	9c08      	ldr	r4, [sp, #32]
 80080f6:	9b06      	ldr	r3, [sp, #24]
 80080f8:	e786      	b.n	8008008 <_dtoa_r+0x7b0>
 80080fa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80080fc:	9c08      	ldr	r4, [sp, #32]
 80080fe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008100:	e78d      	b.n	800801e <_dtoa_r+0x7c6>
 8008102:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008104:	e7ba      	b.n	800807c <_dtoa_r+0x824>
 8008106:	2300      	movs	r3, #0
 8008108:	9307      	str	r3, [sp, #28]
 800810a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800810c:	2b01      	cmp	r3, #1
 800810e:	dc13      	bgt.n	8008138 <_dtoa_r+0x8e0>
 8008110:	2300      	movs	r3, #0
 8008112:	9307      	str	r3, [sp, #28]
 8008114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10e      	bne.n	8008138 <_dtoa_r+0x8e0>
 800811a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800811c:	031b      	lsls	r3, r3, #12
 800811e:	d10b      	bne.n	8008138 <_dtoa_r+0x8e0>
 8008120:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008122:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008124:	4213      	tst	r3, r2
 8008126:	d007      	beq.n	8008138 <_dtoa_r+0x8e0>
 8008128:	9b08      	ldr	r3, [sp, #32]
 800812a:	3301      	adds	r3, #1
 800812c:	9308      	str	r3, [sp, #32]
 800812e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008130:	3301      	adds	r3, #1
 8008132:	930d      	str	r3, [sp, #52]	; 0x34
 8008134:	2301      	movs	r3, #1
 8008136:	9307      	str	r3, [sp, #28]
 8008138:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800813a:	2001      	movs	r0, #1
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1b5      	bne.n	80080ac <_dtoa_r+0x854>
 8008140:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008142:	221f      	movs	r2, #31
 8008144:	1818      	adds	r0, r3, r0
 8008146:	0003      	movs	r3, r0
 8008148:	4013      	ands	r3, r2
 800814a:	4210      	tst	r0, r2
 800814c:	d046      	beq.n	80081dc <_dtoa_r+0x984>
 800814e:	3201      	adds	r2, #1
 8008150:	1ad2      	subs	r2, r2, r3
 8008152:	2a04      	cmp	r2, #4
 8008154:	dd3f      	ble.n	80081d6 <_dtoa_r+0x97e>
 8008156:	221c      	movs	r2, #28
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	9a08      	ldr	r2, [sp, #32]
 800815c:	18e4      	adds	r4, r4, r3
 800815e:	18d2      	adds	r2, r2, r3
 8008160:	9208      	str	r2, [sp, #32]
 8008162:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008164:	18d3      	adds	r3, r2, r3
 8008166:	930d      	str	r3, [sp, #52]	; 0x34
 8008168:	9b08      	ldr	r3, [sp, #32]
 800816a:	2b00      	cmp	r3, #0
 800816c:	dd05      	ble.n	800817a <_dtoa_r+0x922>
 800816e:	001a      	movs	r2, r3
 8008170:	0038      	movs	r0, r7
 8008172:	9904      	ldr	r1, [sp, #16]
 8008174:	f000 fbbe 	bl	80088f4 <__lshift>
 8008178:	9004      	str	r0, [sp, #16]
 800817a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800817c:	2b00      	cmp	r3, #0
 800817e:	dd05      	ble.n	800818c <_dtoa_r+0x934>
 8008180:	0031      	movs	r1, r6
 8008182:	001a      	movs	r2, r3
 8008184:	0038      	movs	r0, r7
 8008186:	f000 fbb5 	bl	80088f4 <__lshift>
 800818a:	0006      	movs	r6, r0
 800818c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800818e:	2b00      	cmp	r3, #0
 8008190:	d026      	beq.n	80081e0 <_dtoa_r+0x988>
 8008192:	0031      	movs	r1, r6
 8008194:	9804      	ldr	r0, [sp, #16]
 8008196:	f000 fc1d 	bl	80089d4 <__mcmp>
 800819a:	2800      	cmp	r0, #0
 800819c:	da20      	bge.n	80081e0 <_dtoa_r+0x988>
 800819e:	9b02      	ldr	r3, [sp, #8]
 80081a0:	220a      	movs	r2, #10
 80081a2:	3b01      	subs	r3, #1
 80081a4:	9302      	str	r3, [sp, #8]
 80081a6:	0038      	movs	r0, r7
 80081a8:	2300      	movs	r3, #0
 80081aa:	9904      	ldr	r1, [sp, #16]
 80081ac:	f000 f9f4 	bl	8008598 <__multadd>
 80081b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081b2:	9004      	str	r0, [sp, #16]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d100      	bne.n	80081ba <_dtoa_r+0x962>
 80081b8:	e160      	b.n	800847c <_dtoa_r+0xc24>
 80081ba:	2300      	movs	r3, #0
 80081bc:	0029      	movs	r1, r5
 80081be:	220a      	movs	r2, #10
 80081c0:	0038      	movs	r0, r7
 80081c2:	f000 f9e9 	bl	8008598 <__multadd>
 80081c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081c8:	0005      	movs	r5, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	dc47      	bgt.n	800825e <_dtoa_r+0xa06>
 80081ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	dc0d      	bgt.n	80081f0 <_dtoa_r+0x998>
 80081d4:	e043      	b.n	800825e <_dtoa_r+0xa06>
 80081d6:	2a04      	cmp	r2, #4
 80081d8:	d0c6      	beq.n	8008168 <_dtoa_r+0x910>
 80081da:	0013      	movs	r3, r2
 80081dc:	331c      	adds	r3, #28
 80081de:	e7bc      	b.n	800815a <_dtoa_r+0x902>
 80081e0:	9b06      	ldr	r3, [sp, #24]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	dc35      	bgt.n	8008252 <_dtoa_r+0x9fa>
 80081e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	dd32      	ble.n	8008252 <_dtoa_r+0x9fa>
 80081ec:	9b06      	ldr	r3, [sp, #24]
 80081ee:	930c      	str	r3, [sp, #48]	; 0x30
 80081f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10c      	bne.n	8008210 <_dtoa_r+0x9b8>
 80081f6:	0031      	movs	r1, r6
 80081f8:	2205      	movs	r2, #5
 80081fa:	0038      	movs	r0, r7
 80081fc:	f000 f9cc 	bl	8008598 <__multadd>
 8008200:	0006      	movs	r6, r0
 8008202:	0001      	movs	r1, r0
 8008204:	9804      	ldr	r0, [sp, #16]
 8008206:	f000 fbe5 	bl	80089d4 <__mcmp>
 800820a:	2800      	cmp	r0, #0
 800820c:	dd00      	ble.n	8008210 <_dtoa_r+0x9b8>
 800820e:	e59f      	b.n	8007d50 <_dtoa_r+0x4f8>
 8008210:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008212:	43db      	mvns	r3, r3
 8008214:	9302      	str	r3, [sp, #8]
 8008216:	9b05      	ldr	r3, [sp, #20]
 8008218:	9307      	str	r3, [sp, #28]
 800821a:	2400      	movs	r4, #0
 800821c:	0031      	movs	r1, r6
 800821e:	0038      	movs	r0, r7
 8008220:	f000 f996 	bl	8008550 <_Bfree>
 8008224:	2d00      	cmp	r5, #0
 8008226:	d100      	bne.n	800822a <_dtoa_r+0x9d2>
 8008228:	e6b0      	b.n	8007f8c <_dtoa_r+0x734>
 800822a:	2c00      	cmp	r4, #0
 800822c:	d005      	beq.n	800823a <_dtoa_r+0x9e2>
 800822e:	42ac      	cmp	r4, r5
 8008230:	d003      	beq.n	800823a <_dtoa_r+0x9e2>
 8008232:	0021      	movs	r1, r4
 8008234:	0038      	movs	r0, r7
 8008236:	f000 f98b 	bl	8008550 <_Bfree>
 800823a:	0029      	movs	r1, r5
 800823c:	0038      	movs	r0, r7
 800823e:	f000 f987 	bl	8008550 <_Bfree>
 8008242:	e6a3      	b.n	8007f8c <_dtoa_r+0x734>
 8008244:	2600      	movs	r6, #0
 8008246:	0035      	movs	r5, r6
 8008248:	e7e2      	b.n	8008210 <_dtoa_r+0x9b8>
 800824a:	9602      	str	r6, [sp, #8]
 800824c:	9e07      	ldr	r6, [sp, #28]
 800824e:	0035      	movs	r5, r6
 8008250:	e57e      	b.n	8007d50 <_dtoa_r+0x4f8>
 8008252:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008254:	2b00      	cmp	r3, #0
 8008256:	d100      	bne.n	800825a <_dtoa_r+0xa02>
 8008258:	e0c8      	b.n	80083ec <_dtoa_r+0xb94>
 800825a:	9b06      	ldr	r3, [sp, #24]
 800825c:	930c      	str	r3, [sp, #48]	; 0x30
 800825e:	2c00      	cmp	r4, #0
 8008260:	dd05      	ble.n	800826e <_dtoa_r+0xa16>
 8008262:	0029      	movs	r1, r5
 8008264:	0022      	movs	r2, r4
 8008266:	0038      	movs	r0, r7
 8008268:	f000 fb44 	bl	80088f4 <__lshift>
 800826c:	0005      	movs	r5, r0
 800826e:	9b07      	ldr	r3, [sp, #28]
 8008270:	0028      	movs	r0, r5
 8008272:	2b00      	cmp	r3, #0
 8008274:	d01f      	beq.n	80082b6 <_dtoa_r+0xa5e>
 8008276:	0038      	movs	r0, r7
 8008278:	6869      	ldr	r1, [r5, #4]
 800827a:	f000 f925 	bl	80084c8 <_Balloc>
 800827e:	1e04      	subs	r4, r0, #0
 8008280:	d10c      	bne.n	800829c <_dtoa_r+0xa44>
 8008282:	0002      	movs	r2, r0
 8008284:	4b03      	ldr	r3, [pc, #12]	; (8008294 <_dtoa_r+0xa3c>)
 8008286:	4904      	ldr	r1, [pc, #16]	; (8008298 <_dtoa_r+0xa40>)
 8008288:	f7ff fafb 	bl	8007882 <_dtoa_r+0x2a>
 800828c:	40240000 	.word	0x40240000
 8008290:	00000433 	.word	0x00000433
 8008294:	08009e53 	.word	0x08009e53
 8008298:	000002ea 	.word	0x000002ea
 800829c:	0029      	movs	r1, r5
 800829e:	692b      	ldr	r3, [r5, #16]
 80082a0:	310c      	adds	r1, #12
 80082a2:	1c9a      	adds	r2, r3, #2
 80082a4:	0092      	lsls	r2, r2, #2
 80082a6:	300c      	adds	r0, #12
 80082a8:	f7fe fd9e 	bl	8006de8 <memcpy>
 80082ac:	2201      	movs	r2, #1
 80082ae:	0021      	movs	r1, r4
 80082b0:	0038      	movs	r0, r7
 80082b2:	f000 fb1f 	bl	80088f4 <__lshift>
 80082b6:	002c      	movs	r4, r5
 80082b8:	0005      	movs	r5, r0
 80082ba:	9b05      	ldr	r3, [sp, #20]
 80082bc:	9308      	str	r3, [sp, #32]
 80082be:	0031      	movs	r1, r6
 80082c0:	9804      	ldr	r0, [sp, #16]
 80082c2:	f7ff fa3d 	bl	8007740 <quorem>
 80082c6:	0003      	movs	r3, r0
 80082c8:	0021      	movs	r1, r4
 80082ca:	3330      	adds	r3, #48	; 0x30
 80082cc:	900e      	str	r0, [sp, #56]	; 0x38
 80082ce:	9804      	ldr	r0, [sp, #16]
 80082d0:	9306      	str	r3, [sp, #24]
 80082d2:	f000 fb7f 	bl	80089d4 <__mcmp>
 80082d6:	002a      	movs	r2, r5
 80082d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80082da:	0031      	movs	r1, r6
 80082dc:	0038      	movs	r0, r7
 80082de:	f000 fb95 	bl	8008a0c <__mdiff>
 80082e2:	68c3      	ldr	r3, [r0, #12]
 80082e4:	9007      	str	r0, [sp, #28]
 80082e6:	9310      	str	r3, [sp, #64]	; 0x40
 80082e8:	2301      	movs	r3, #1
 80082ea:	930d      	str	r3, [sp, #52]	; 0x34
 80082ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d104      	bne.n	80082fc <_dtoa_r+0xaa4>
 80082f2:	0001      	movs	r1, r0
 80082f4:	9804      	ldr	r0, [sp, #16]
 80082f6:	f000 fb6d 	bl	80089d4 <__mcmp>
 80082fa:	900d      	str	r0, [sp, #52]	; 0x34
 80082fc:	0038      	movs	r0, r7
 80082fe:	9907      	ldr	r1, [sp, #28]
 8008300:	f000 f926 	bl	8008550 <_Bfree>
 8008304:	2301      	movs	r3, #1
 8008306:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008308:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800830a:	4018      	ands	r0, r3
 800830c:	9b08      	ldr	r3, [sp, #32]
 800830e:	3301      	adds	r3, #1
 8008310:	9307      	str	r3, [sp, #28]
 8008312:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008314:	4313      	orrs	r3, r2
 8008316:	4303      	orrs	r3, r0
 8008318:	d10c      	bne.n	8008334 <_dtoa_r+0xadc>
 800831a:	9b06      	ldr	r3, [sp, #24]
 800831c:	2b39      	cmp	r3, #57	; 0x39
 800831e:	d025      	beq.n	800836c <_dtoa_r+0xb14>
 8008320:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008322:	2b00      	cmp	r3, #0
 8008324:	dd02      	ble.n	800832c <_dtoa_r+0xad4>
 8008326:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008328:	3331      	adds	r3, #49	; 0x31
 800832a:	9306      	str	r3, [sp, #24]
 800832c:	9b08      	ldr	r3, [sp, #32]
 800832e:	9a06      	ldr	r2, [sp, #24]
 8008330:	701a      	strb	r2, [r3, #0]
 8008332:	e773      	b.n	800821c <_dtoa_r+0x9c4>
 8008334:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008336:	2b00      	cmp	r3, #0
 8008338:	db03      	blt.n	8008342 <_dtoa_r+0xaea>
 800833a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800833c:	4313      	orrs	r3, r2
 800833e:	4303      	orrs	r3, r0
 8008340:	d11f      	bne.n	8008382 <_dtoa_r+0xb2a>
 8008342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008344:	2b00      	cmp	r3, #0
 8008346:	ddf1      	ble.n	800832c <_dtoa_r+0xad4>
 8008348:	9904      	ldr	r1, [sp, #16]
 800834a:	2201      	movs	r2, #1
 800834c:	0038      	movs	r0, r7
 800834e:	f000 fad1 	bl	80088f4 <__lshift>
 8008352:	0031      	movs	r1, r6
 8008354:	9004      	str	r0, [sp, #16]
 8008356:	f000 fb3d 	bl	80089d4 <__mcmp>
 800835a:	2800      	cmp	r0, #0
 800835c:	dc03      	bgt.n	8008366 <_dtoa_r+0xb0e>
 800835e:	d1e5      	bne.n	800832c <_dtoa_r+0xad4>
 8008360:	9b06      	ldr	r3, [sp, #24]
 8008362:	07db      	lsls	r3, r3, #31
 8008364:	d5e2      	bpl.n	800832c <_dtoa_r+0xad4>
 8008366:	9b06      	ldr	r3, [sp, #24]
 8008368:	2b39      	cmp	r3, #57	; 0x39
 800836a:	d1dc      	bne.n	8008326 <_dtoa_r+0xace>
 800836c:	2339      	movs	r3, #57	; 0x39
 800836e:	9a08      	ldr	r2, [sp, #32]
 8008370:	7013      	strb	r3, [r2, #0]
 8008372:	9b07      	ldr	r3, [sp, #28]
 8008374:	9307      	str	r3, [sp, #28]
 8008376:	3b01      	subs	r3, #1
 8008378:	781a      	ldrb	r2, [r3, #0]
 800837a:	2a39      	cmp	r2, #57	; 0x39
 800837c:	d06c      	beq.n	8008458 <_dtoa_r+0xc00>
 800837e:	3201      	adds	r2, #1
 8008380:	e7d6      	b.n	8008330 <_dtoa_r+0xad8>
 8008382:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008384:	2b00      	cmp	r3, #0
 8008386:	dd07      	ble.n	8008398 <_dtoa_r+0xb40>
 8008388:	9b06      	ldr	r3, [sp, #24]
 800838a:	2b39      	cmp	r3, #57	; 0x39
 800838c:	d0ee      	beq.n	800836c <_dtoa_r+0xb14>
 800838e:	9b06      	ldr	r3, [sp, #24]
 8008390:	9a08      	ldr	r2, [sp, #32]
 8008392:	3301      	adds	r3, #1
 8008394:	7013      	strb	r3, [r2, #0]
 8008396:	e741      	b.n	800821c <_dtoa_r+0x9c4>
 8008398:	9b08      	ldr	r3, [sp, #32]
 800839a:	9a06      	ldr	r2, [sp, #24]
 800839c:	701a      	strb	r2, [r3, #0]
 800839e:	2301      	movs	r3, #1
 80083a0:	9a05      	ldr	r2, [sp, #20]
 80083a2:	1a9b      	subs	r3, r3, r2
 80083a4:	9a08      	ldr	r2, [sp, #32]
 80083a6:	189b      	adds	r3, r3, r2
 80083a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d03e      	beq.n	800842c <_dtoa_r+0xbd4>
 80083ae:	2300      	movs	r3, #0
 80083b0:	220a      	movs	r2, #10
 80083b2:	9904      	ldr	r1, [sp, #16]
 80083b4:	0038      	movs	r0, r7
 80083b6:	f000 f8ef 	bl	8008598 <__multadd>
 80083ba:	2300      	movs	r3, #0
 80083bc:	9004      	str	r0, [sp, #16]
 80083be:	220a      	movs	r2, #10
 80083c0:	0021      	movs	r1, r4
 80083c2:	0038      	movs	r0, r7
 80083c4:	42ac      	cmp	r4, r5
 80083c6:	d106      	bne.n	80083d6 <_dtoa_r+0xb7e>
 80083c8:	f000 f8e6 	bl	8008598 <__multadd>
 80083cc:	0004      	movs	r4, r0
 80083ce:	0005      	movs	r5, r0
 80083d0:	9b07      	ldr	r3, [sp, #28]
 80083d2:	9308      	str	r3, [sp, #32]
 80083d4:	e773      	b.n	80082be <_dtoa_r+0xa66>
 80083d6:	f000 f8df 	bl	8008598 <__multadd>
 80083da:	0029      	movs	r1, r5
 80083dc:	0004      	movs	r4, r0
 80083de:	2300      	movs	r3, #0
 80083e0:	220a      	movs	r2, #10
 80083e2:	0038      	movs	r0, r7
 80083e4:	f000 f8d8 	bl	8008598 <__multadd>
 80083e8:	0005      	movs	r5, r0
 80083ea:	e7f1      	b.n	80083d0 <_dtoa_r+0xb78>
 80083ec:	9b06      	ldr	r3, [sp, #24]
 80083ee:	930c      	str	r3, [sp, #48]	; 0x30
 80083f0:	2400      	movs	r4, #0
 80083f2:	0031      	movs	r1, r6
 80083f4:	9804      	ldr	r0, [sp, #16]
 80083f6:	f7ff f9a3 	bl	8007740 <quorem>
 80083fa:	9b05      	ldr	r3, [sp, #20]
 80083fc:	3030      	adds	r0, #48	; 0x30
 80083fe:	5518      	strb	r0, [r3, r4]
 8008400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008402:	3401      	adds	r4, #1
 8008404:	9006      	str	r0, [sp, #24]
 8008406:	42a3      	cmp	r3, r4
 8008408:	dd07      	ble.n	800841a <_dtoa_r+0xbc2>
 800840a:	2300      	movs	r3, #0
 800840c:	220a      	movs	r2, #10
 800840e:	0038      	movs	r0, r7
 8008410:	9904      	ldr	r1, [sp, #16]
 8008412:	f000 f8c1 	bl	8008598 <__multadd>
 8008416:	9004      	str	r0, [sp, #16]
 8008418:	e7eb      	b.n	80083f2 <_dtoa_r+0xb9a>
 800841a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800841c:	2001      	movs	r0, #1
 800841e:	2b00      	cmp	r3, #0
 8008420:	dd00      	ble.n	8008424 <_dtoa_r+0xbcc>
 8008422:	0018      	movs	r0, r3
 8008424:	2400      	movs	r4, #0
 8008426:	9b05      	ldr	r3, [sp, #20]
 8008428:	181b      	adds	r3, r3, r0
 800842a:	9307      	str	r3, [sp, #28]
 800842c:	9904      	ldr	r1, [sp, #16]
 800842e:	2201      	movs	r2, #1
 8008430:	0038      	movs	r0, r7
 8008432:	f000 fa5f 	bl	80088f4 <__lshift>
 8008436:	0031      	movs	r1, r6
 8008438:	9004      	str	r0, [sp, #16]
 800843a:	f000 facb 	bl	80089d4 <__mcmp>
 800843e:	2800      	cmp	r0, #0
 8008440:	dc97      	bgt.n	8008372 <_dtoa_r+0xb1a>
 8008442:	d102      	bne.n	800844a <_dtoa_r+0xbf2>
 8008444:	9b06      	ldr	r3, [sp, #24]
 8008446:	07db      	lsls	r3, r3, #31
 8008448:	d493      	bmi.n	8008372 <_dtoa_r+0xb1a>
 800844a:	9b07      	ldr	r3, [sp, #28]
 800844c:	9307      	str	r3, [sp, #28]
 800844e:	3b01      	subs	r3, #1
 8008450:	781a      	ldrb	r2, [r3, #0]
 8008452:	2a30      	cmp	r2, #48	; 0x30
 8008454:	d0fa      	beq.n	800844c <_dtoa_r+0xbf4>
 8008456:	e6e1      	b.n	800821c <_dtoa_r+0x9c4>
 8008458:	9a05      	ldr	r2, [sp, #20]
 800845a:	429a      	cmp	r2, r3
 800845c:	d18a      	bne.n	8008374 <_dtoa_r+0xb1c>
 800845e:	9b02      	ldr	r3, [sp, #8]
 8008460:	3301      	adds	r3, #1
 8008462:	9302      	str	r3, [sp, #8]
 8008464:	2331      	movs	r3, #49	; 0x31
 8008466:	e795      	b.n	8008394 <_dtoa_r+0xb3c>
 8008468:	4b08      	ldr	r3, [pc, #32]	; (800848c <_dtoa_r+0xc34>)
 800846a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800846c:	9305      	str	r3, [sp, #20]
 800846e:	4b08      	ldr	r3, [pc, #32]	; (8008490 <_dtoa_r+0xc38>)
 8008470:	2a00      	cmp	r2, #0
 8008472:	d001      	beq.n	8008478 <_dtoa_r+0xc20>
 8008474:	f7ff fa3b 	bl	80078ee <_dtoa_r+0x96>
 8008478:	f7ff fa3b 	bl	80078f2 <_dtoa_r+0x9a>
 800847c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800847e:	2b00      	cmp	r3, #0
 8008480:	dcb6      	bgt.n	80083f0 <_dtoa_r+0xb98>
 8008482:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008484:	2b02      	cmp	r3, #2
 8008486:	dd00      	ble.n	800848a <_dtoa_r+0xc32>
 8008488:	e6b2      	b.n	80081f0 <_dtoa_r+0x998>
 800848a:	e7b1      	b.n	80083f0 <_dtoa_r+0xb98>
 800848c:	08009dd0 	.word	0x08009dd0
 8008490:	08009dd8 	.word	0x08009dd8

08008494 <_localeconv_r>:
 8008494:	4800      	ldr	r0, [pc, #0]	; (8008498 <_localeconv_r+0x4>)
 8008496:	4770      	bx	lr
 8008498:	20000198 	.word	0x20000198

0800849c <malloc>:
 800849c:	b510      	push	{r4, lr}
 800849e:	4b03      	ldr	r3, [pc, #12]	; (80084ac <malloc+0x10>)
 80084a0:	0001      	movs	r1, r0
 80084a2:	6818      	ldr	r0, [r3, #0]
 80084a4:	f000 fc06 	bl	8008cb4 <_malloc_r>
 80084a8:	bd10      	pop	{r4, pc}
 80084aa:	46c0      	nop			; (mov r8, r8)
 80084ac:	20000044 	.word	0x20000044

080084b0 <memchr>:
 80084b0:	b2c9      	uxtb	r1, r1
 80084b2:	1882      	adds	r2, r0, r2
 80084b4:	4290      	cmp	r0, r2
 80084b6:	d101      	bne.n	80084bc <memchr+0xc>
 80084b8:	2000      	movs	r0, #0
 80084ba:	4770      	bx	lr
 80084bc:	7803      	ldrb	r3, [r0, #0]
 80084be:	428b      	cmp	r3, r1
 80084c0:	d0fb      	beq.n	80084ba <memchr+0xa>
 80084c2:	3001      	adds	r0, #1
 80084c4:	e7f6      	b.n	80084b4 <memchr+0x4>
	...

080084c8 <_Balloc>:
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80084cc:	0006      	movs	r6, r0
 80084ce:	000c      	movs	r4, r1
 80084d0:	2d00      	cmp	r5, #0
 80084d2:	d10e      	bne.n	80084f2 <_Balloc+0x2a>
 80084d4:	2010      	movs	r0, #16
 80084d6:	f7ff ffe1 	bl	800849c <malloc>
 80084da:	1e02      	subs	r2, r0, #0
 80084dc:	6270      	str	r0, [r6, #36]	; 0x24
 80084de:	d104      	bne.n	80084ea <_Balloc+0x22>
 80084e0:	2166      	movs	r1, #102	; 0x66
 80084e2:	4b19      	ldr	r3, [pc, #100]	; (8008548 <_Balloc+0x80>)
 80084e4:	4819      	ldr	r0, [pc, #100]	; (800854c <_Balloc+0x84>)
 80084e6:	f000 fdb7 	bl	8009058 <__assert_func>
 80084ea:	6045      	str	r5, [r0, #4]
 80084ec:	6085      	str	r5, [r0, #8]
 80084ee:	6005      	str	r5, [r0, #0]
 80084f0:	60c5      	str	r5, [r0, #12]
 80084f2:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80084f4:	68eb      	ldr	r3, [r5, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d013      	beq.n	8008522 <_Balloc+0x5a>
 80084fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80084fc:	00a2      	lsls	r2, r4, #2
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	189b      	adds	r3, r3, r2
 8008502:	6818      	ldr	r0, [r3, #0]
 8008504:	2800      	cmp	r0, #0
 8008506:	d118      	bne.n	800853a <_Balloc+0x72>
 8008508:	2101      	movs	r1, #1
 800850a:	000d      	movs	r5, r1
 800850c:	40a5      	lsls	r5, r4
 800850e:	1d6a      	adds	r2, r5, #5
 8008510:	0030      	movs	r0, r6
 8008512:	0092      	lsls	r2, r2, #2
 8008514:	f000 fb76 	bl	8008c04 <_calloc_r>
 8008518:	2800      	cmp	r0, #0
 800851a:	d00c      	beq.n	8008536 <_Balloc+0x6e>
 800851c:	6044      	str	r4, [r0, #4]
 800851e:	6085      	str	r5, [r0, #8]
 8008520:	e00d      	b.n	800853e <_Balloc+0x76>
 8008522:	2221      	movs	r2, #33	; 0x21
 8008524:	2104      	movs	r1, #4
 8008526:	0030      	movs	r0, r6
 8008528:	f000 fb6c 	bl	8008c04 <_calloc_r>
 800852c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800852e:	60e8      	str	r0, [r5, #12]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1e1      	bne.n	80084fa <_Balloc+0x32>
 8008536:	2000      	movs	r0, #0
 8008538:	bd70      	pop	{r4, r5, r6, pc}
 800853a:	6802      	ldr	r2, [r0, #0]
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	2300      	movs	r3, #0
 8008540:	6103      	str	r3, [r0, #16]
 8008542:	60c3      	str	r3, [r0, #12]
 8008544:	e7f8      	b.n	8008538 <_Balloc+0x70>
 8008546:	46c0      	nop			; (mov r8, r8)
 8008548:	08009ddd 	.word	0x08009ddd
 800854c:	08009e64 	.word	0x08009e64

08008550 <_Bfree>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008554:	0005      	movs	r5, r0
 8008556:	000c      	movs	r4, r1
 8008558:	2e00      	cmp	r6, #0
 800855a:	d10e      	bne.n	800857a <_Bfree+0x2a>
 800855c:	2010      	movs	r0, #16
 800855e:	f7ff ff9d 	bl	800849c <malloc>
 8008562:	1e02      	subs	r2, r0, #0
 8008564:	6268      	str	r0, [r5, #36]	; 0x24
 8008566:	d104      	bne.n	8008572 <_Bfree+0x22>
 8008568:	218a      	movs	r1, #138	; 0x8a
 800856a:	4b09      	ldr	r3, [pc, #36]	; (8008590 <_Bfree+0x40>)
 800856c:	4809      	ldr	r0, [pc, #36]	; (8008594 <_Bfree+0x44>)
 800856e:	f000 fd73 	bl	8009058 <__assert_func>
 8008572:	6046      	str	r6, [r0, #4]
 8008574:	6086      	str	r6, [r0, #8]
 8008576:	6006      	str	r6, [r0, #0]
 8008578:	60c6      	str	r6, [r0, #12]
 800857a:	2c00      	cmp	r4, #0
 800857c:	d007      	beq.n	800858e <_Bfree+0x3e>
 800857e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008580:	6862      	ldr	r2, [r4, #4]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	0092      	lsls	r2, r2, #2
 8008586:	189b      	adds	r3, r3, r2
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	6022      	str	r2, [r4, #0]
 800858c:	601c      	str	r4, [r3, #0]
 800858e:	bd70      	pop	{r4, r5, r6, pc}
 8008590:	08009ddd 	.word	0x08009ddd
 8008594:	08009e64 	.word	0x08009e64

08008598 <__multadd>:
 8008598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800859a:	000e      	movs	r6, r1
 800859c:	9001      	str	r0, [sp, #4]
 800859e:	000c      	movs	r4, r1
 80085a0:	001d      	movs	r5, r3
 80085a2:	2000      	movs	r0, #0
 80085a4:	690f      	ldr	r7, [r1, #16]
 80085a6:	3614      	adds	r6, #20
 80085a8:	6833      	ldr	r3, [r6, #0]
 80085aa:	3001      	adds	r0, #1
 80085ac:	b299      	uxth	r1, r3
 80085ae:	4351      	muls	r1, r2
 80085b0:	0c1b      	lsrs	r3, r3, #16
 80085b2:	4353      	muls	r3, r2
 80085b4:	1949      	adds	r1, r1, r5
 80085b6:	0c0d      	lsrs	r5, r1, #16
 80085b8:	195b      	adds	r3, r3, r5
 80085ba:	0c1d      	lsrs	r5, r3, #16
 80085bc:	b289      	uxth	r1, r1
 80085be:	041b      	lsls	r3, r3, #16
 80085c0:	185b      	adds	r3, r3, r1
 80085c2:	c608      	stmia	r6!, {r3}
 80085c4:	4287      	cmp	r7, r0
 80085c6:	dcef      	bgt.n	80085a8 <__multadd+0x10>
 80085c8:	2d00      	cmp	r5, #0
 80085ca:	d022      	beq.n	8008612 <__multadd+0x7a>
 80085cc:	68a3      	ldr	r3, [r4, #8]
 80085ce:	42bb      	cmp	r3, r7
 80085d0:	dc19      	bgt.n	8008606 <__multadd+0x6e>
 80085d2:	6863      	ldr	r3, [r4, #4]
 80085d4:	9801      	ldr	r0, [sp, #4]
 80085d6:	1c59      	adds	r1, r3, #1
 80085d8:	f7ff ff76 	bl	80084c8 <_Balloc>
 80085dc:	1e06      	subs	r6, r0, #0
 80085de:	d105      	bne.n	80085ec <__multadd+0x54>
 80085e0:	0002      	movs	r2, r0
 80085e2:	21b5      	movs	r1, #181	; 0xb5
 80085e4:	4b0c      	ldr	r3, [pc, #48]	; (8008618 <__multadd+0x80>)
 80085e6:	480d      	ldr	r0, [pc, #52]	; (800861c <__multadd+0x84>)
 80085e8:	f000 fd36 	bl	8009058 <__assert_func>
 80085ec:	0021      	movs	r1, r4
 80085ee:	6923      	ldr	r3, [r4, #16]
 80085f0:	310c      	adds	r1, #12
 80085f2:	1c9a      	adds	r2, r3, #2
 80085f4:	0092      	lsls	r2, r2, #2
 80085f6:	300c      	adds	r0, #12
 80085f8:	f7fe fbf6 	bl	8006de8 <memcpy>
 80085fc:	0021      	movs	r1, r4
 80085fe:	9801      	ldr	r0, [sp, #4]
 8008600:	f7ff ffa6 	bl	8008550 <_Bfree>
 8008604:	0034      	movs	r4, r6
 8008606:	1d3b      	adds	r3, r7, #4
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	18e3      	adds	r3, r4, r3
 800860c:	605d      	str	r5, [r3, #4]
 800860e:	1c7b      	adds	r3, r7, #1
 8008610:	6123      	str	r3, [r4, #16]
 8008612:	0020      	movs	r0, r4
 8008614:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008616:	46c0      	nop			; (mov r8, r8)
 8008618:	08009e53 	.word	0x08009e53
 800861c:	08009e64 	.word	0x08009e64

08008620 <__hi0bits>:
 8008620:	0003      	movs	r3, r0
 8008622:	0c02      	lsrs	r2, r0, #16
 8008624:	2000      	movs	r0, #0
 8008626:	4282      	cmp	r2, r0
 8008628:	d101      	bne.n	800862e <__hi0bits+0xe>
 800862a:	041b      	lsls	r3, r3, #16
 800862c:	3010      	adds	r0, #16
 800862e:	0e1a      	lsrs	r2, r3, #24
 8008630:	d101      	bne.n	8008636 <__hi0bits+0x16>
 8008632:	3008      	adds	r0, #8
 8008634:	021b      	lsls	r3, r3, #8
 8008636:	0f1a      	lsrs	r2, r3, #28
 8008638:	d101      	bne.n	800863e <__hi0bits+0x1e>
 800863a:	3004      	adds	r0, #4
 800863c:	011b      	lsls	r3, r3, #4
 800863e:	0f9a      	lsrs	r2, r3, #30
 8008640:	d101      	bne.n	8008646 <__hi0bits+0x26>
 8008642:	3002      	adds	r0, #2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	2b00      	cmp	r3, #0
 8008648:	db03      	blt.n	8008652 <__hi0bits+0x32>
 800864a:	3001      	adds	r0, #1
 800864c:	005b      	lsls	r3, r3, #1
 800864e:	d400      	bmi.n	8008652 <__hi0bits+0x32>
 8008650:	2020      	movs	r0, #32
 8008652:	4770      	bx	lr

08008654 <__lo0bits>:
 8008654:	6803      	ldr	r3, [r0, #0]
 8008656:	0002      	movs	r2, r0
 8008658:	2107      	movs	r1, #7
 800865a:	0018      	movs	r0, r3
 800865c:	4008      	ands	r0, r1
 800865e:	420b      	tst	r3, r1
 8008660:	d00d      	beq.n	800867e <__lo0bits+0x2a>
 8008662:	3906      	subs	r1, #6
 8008664:	2000      	movs	r0, #0
 8008666:	420b      	tst	r3, r1
 8008668:	d105      	bne.n	8008676 <__lo0bits+0x22>
 800866a:	3002      	adds	r0, #2
 800866c:	4203      	tst	r3, r0
 800866e:	d003      	beq.n	8008678 <__lo0bits+0x24>
 8008670:	40cb      	lsrs	r3, r1
 8008672:	0008      	movs	r0, r1
 8008674:	6013      	str	r3, [r2, #0]
 8008676:	4770      	bx	lr
 8008678:	089b      	lsrs	r3, r3, #2
 800867a:	6013      	str	r3, [r2, #0]
 800867c:	e7fb      	b.n	8008676 <__lo0bits+0x22>
 800867e:	b299      	uxth	r1, r3
 8008680:	2900      	cmp	r1, #0
 8008682:	d101      	bne.n	8008688 <__lo0bits+0x34>
 8008684:	2010      	movs	r0, #16
 8008686:	0c1b      	lsrs	r3, r3, #16
 8008688:	b2d9      	uxtb	r1, r3
 800868a:	2900      	cmp	r1, #0
 800868c:	d101      	bne.n	8008692 <__lo0bits+0x3e>
 800868e:	3008      	adds	r0, #8
 8008690:	0a1b      	lsrs	r3, r3, #8
 8008692:	0719      	lsls	r1, r3, #28
 8008694:	d101      	bne.n	800869a <__lo0bits+0x46>
 8008696:	3004      	adds	r0, #4
 8008698:	091b      	lsrs	r3, r3, #4
 800869a:	0799      	lsls	r1, r3, #30
 800869c:	d101      	bne.n	80086a2 <__lo0bits+0x4e>
 800869e:	3002      	adds	r0, #2
 80086a0:	089b      	lsrs	r3, r3, #2
 80086a2:	07d9      	lsls	r1, r3, #31
 80086a4:	d4e9      	bmi.n	800867a <__lo0bits+0x26>
 80086a6:	3001      	adds	r0, #1
 80086a8:	085b      	lsrs	r3, r3, #1
 80086aa:	d1e6      	bne.n	800867a <__lo0bits+0x26>
 80086ac:	2020      	movs	r0, #32
 80086ae:	e7e2      	b.n	8008676 <__lo0bits+0x22>

080086b0 <__i2b>:
 80086b0:	b510      	push	{r4, lr}
 80086b2:	000c      	movs	r4, r1
 80086b4:	2101      	movs	r1, #1
 80086b6:	f7ff ff07 	bl	80084c8 <_Balloc>
 80086ba:	2800      	cmp	r0, #0
 80086bc:	d106      	bne.n	80086cc <__i2b+0x1c>
 80086be:	21a0      	movs	r1, #160	; 0xa0
 80086c0:	0002      	movs	r2, r0
 80086c2:	4b04      	ldr	r3, [pc, #16]	; (80086d4 <__i2b+0x24>)
 80086c4:	4804      	ldr	r0, [pc, #16]	; (80086d8 <__i2b+0x28>)
 80086c6:	0049      	lsls	r1, r1, #1
 80086c8:	f000 fcc6 	bl	8009058 <__assert_func>
 80086cc:	2301      	movs	r3, #1
 80086ce:	6144      	str	r4, [r0, #20]
 80086d0:	6103      	str	r3, [r0, #16]
 80086d2:	bd10      	pop	{r4, pc}
 80086d4:	08009e53 	.word	0x08009e53
 80086d8:	08009e64 	.word	0x08009e64

080086dc <__multiply>:
 80086dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086de:	690b      	ldr	r3, [r1, #16]
 80086e0:	0014      	movs	r4, r2
 80086e2:	6912      	ldr	r2, [r2, #16]
 80086e4:	000d      	movs	r5, r1
 80086e6:	b089      	sub	sp, #36	; 0x24
 80086e8:	4293      	cmp	r3, r2
 80086ea:	da01      	bge.n	80086f0 <__multiply+0x14>
 80086ec:	0025      	movs	r5, r4
 80086ee:	000c      	movs	r4, r1
 80086f0:	692f      	ldr	r7, [r5, #16]
 80086f2:	6926      	ldr	r6, [r4, #16]
 80086f4:	6869      	ldr	r1, [r5, #4]
 80086f6:	19bb      	adds	r3, r7, r6
 80086f8:	9302      	str	r3, [sp, #8]
 80086fa:	68ab      	ldr	r3, [r5, #8]
 80086fc:	19ba      	adds	r2, r7, r6
 80086fe:	4293      	cmp	r3, r2
 8008700:	da00      	bge.n	8008704 <__multiply+0x28>
 8008702:	3101      	adds	r1, #1
 8008704:	f7ff fee0 	bl	80084c8 <_Balloc>
 8008708:	9001      	str	r0, [sp, #4]
 800870a:	2800      	cmp	r0, #0
 800870c:	d106      	bne.n	800871c <__multiply+0x40>
 800870e:	215e      	movs	r1, #94	; 0x5e
 8008710:	0002      	movs	r2, r0
 8008712:	4b48      	ldr	r3, [pc, #288]	; (8008834 <__multiply+0x158>)
 8008714:	4848      	ldr	r0, [pc, #288]	; (8008838 <__multiply+0x15c>)
 8008716:	31ff      	adds	r1, #255	; 0xff
 8008718:	f000 fc9e 	bl	8009058 <__assert_func>
 800871c:	9b01      	ldr	r3, [sp, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	3314      	adds	r3, #20
 8008722:	469c      	mov	ip, r3
 8008724:	19bb      	adds	r3, r7, r6
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	4463      	add	r3, ip
 800872a:	9303      	str	r3, [sp, #12]
 800872c:	4663      	mov	r3, ip
 800872e:	9903      	ldr	r1, [sp, #12]
 8008730:	428b      	cmp	r3, r1
 8008732:	d32c      	bcc.n	800878e <__multiply+0xb2>
 8008734:	002b      	movs	r3, r5
 8008736:	0022      	movs	r2, r4
 8008738:	3314      	adds	r3, #20
 800873a:	00bf      	lsls	r7, r7, #2
 800873c:	3214      	adds	r2, #20
 800873e:	9306      	str	r3, [sp, #24]
 8008740:	00b6      	lsls	r6, r6, #2
 8008742:	19db      	adds	r3, r3, r7
 8008744:	9304      	str	r3, [sp, #16]
 8008746:	1993      	adds	r3, r2, r6
 8008748:	9307      	str	r3, [sp, #28]
 800874a:	2304      	movs	r3, #4
 800874c:	9305      	str	r3, [sp, #20]
 800874e:	002b      	movs	r3, r5
 8008750:	9904      	ldr	r1, [sp, #16]
 8008752:	3315      	adds	r3, #21
 8008754:	9200      	str	r2, [sp, #0]
 8008756:	4299      	cmp	r1, r3
 8008758:	d305      	bcc.n	8008766 <__multiply+0x8a>
 800875a:	1b4b      	subs	r3, r1, r5
 800875c:	3b15      	subs	r3, #21
 800875e:	089b      	lsrs	r3, r3, #2
 8008760:	3301      	adds	r3, #1
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	9305      	str	r3, [sp, #20]
 8008766:	9b07      	ldr	r3, [sp, #28]
 8008768:	9a00      	ldr	r2, [sp, #0]
 800876a:	429a      	cmp	r2, r3
 800876c:	d311      	bcc.n	8008792 <__multiply+0xb6>
 800876e:	9b02      	ldr	r3, [sp, #8]
 8008770:	2b00      	cmp	r3, #0
 8008772:	dd06      	ble.n	8008782 <__multiply+0xa6>
 8008774:	9b03      	ldr	r3, [sp, #12]
 8008776:	3b04      	subs	r3, #4
 8008778:	9303      	str	r3, [sp, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	9300      	str	r3, [sp, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d054      	beq.n	800882c <__multiply+0x150>
 8008782:	9b01      	ldr	r3, [sp, #4]
 8008784:	9a02      	ldr	r2, [sp, #8]
 8008786:	0018      	movs	r0, r3
 8008788:	611a      	str	r2, [r3, #16]
 800878a:	b009      	add	sp, #36	; 0x24
 800878c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800878e:	c304      	stmia	r3!, {r2}
 8008790:	e7cd      	b.n	800872e <__multiply+0x52>
 8008792:	9b00      	ldr	r3, [sp, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	b298      	uxth	r0, r3
 8008798:	2800      	cmp	r0, #0
 800879a:	d01c      	beq.n	80087d6 <__multiply+0xfa>
 800879c:	4667      	mov	r7, ip
 800879e:	2400      	movs	r4, #0
 80087a0:	9e06      	ldr	r6, [sp, #24]
 80087a2:	ce02      	ldmia	r6!, {r1}
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	b28b      	uxth	r3, r1
 80087a8:	4343      	muls	r3, r0
 80087aa:	0c09      	lsrs	r1, r1, #16
 80087ac:	4341      	muls	r1, r0
 80087ae:	b292      	uxth	r2, r2
 80087b0:	189b      	adds	r3, r3, r2
 80087b2:	191b      	adds	r3, r3, r4
 80087b4:	000c      	movs	r4, r1
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	0c11      	lsrs	r1, r2, #16
 80087ba:	1861      	adds	r1, r4, r1
 80087bc:	0c1c      	lsrs	r4, r3, #16
 80087be:	1909      	adds	r1, r1, r4
 80087c0:	0c0c      	lsrs	r4, r1, #16
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	0409      	lsls	r1, r1, #16
 80087c6:	430b      	orrs	r3, r1
 80087c8:	c708      	stmia	r7!, {r3}
 80087ca:	9b04      	ldr	r3, [sp, #16]
 80087cc:	42b3      	cmp	r3, r6
 80087ce:	d8e8      	bhi.n	80087a2 <__multiply+0xc6>
 80087d0:	4663      	mov	r3, ip
 80087d2:	9a05      	ldr	r2, [sp, #20]
 80087d4:	509c      	str	r4, [r3, r2]
 80087d6:	9b00      	ldr	r3, [sp, #0]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	0c1e      	lsrs	r6, r3, #16
 80087dc:	d020      	beq.n	8008820 <__multiply+0x144>
 80087de:	4663      	mov	r3, ip
 80087e0:	002c      	movs	r4, r5
 80087e2:	4660      	mov	r0, ip
 80087e4:	2700      	movs	r7, #0
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3414      	adds	r4, #20
 80087ea:	6822      	ldr	r2, [r4, #0]
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	b291      	uxth	r1, r2
 80087f0:	4371      	muls	r1, r6
 80087f2:	6802      	ldr	r2, [r0, #0]
 80087f4:	0c12      	lsrs	r2, r2, #16
 80087f6:	1889      	adds	r1, r1, r2
 80087f8:	19cf      	adds	r7, r1, r7
 80087fa:	0439      	lsls	r1, r7, #16
 80087fc:	430b      	orrs	r3, r1
 80087fe:	6003      	str	r3, [r0, #0]
 8008800:	cc02      	ldmia	r4!, {r1}
 8008802:	6843      	ldr	r3, [r0, #4]
 8008804:	0c09      	lsrs	r1, r1, #16
 8008806:	4371      	muls	r1, r6
 8008808:	b29b      	uxth	r3, r3
 800880a:	0c3f      	lsrs	r7, r7, #16
 800880c:	18cb      	adds	r3, r1, r3
 800880e:	9a04      	ldr	r2, [sp, #16]
 8008810:	19db      	adds	r3, r3, r7
 8008812:	0c1f      	lsrs	r7, r3, #16
 8008814:	3004      	adds	r0, #4
 8008816:	42a2      	cmp	r2, r4
 8008818:	d8e7      	bhi.n	80087ea <__multiply+0x10e>
 800881a:	4662      	mov	r2, ip
 800881c:	9905      	ldr	r1, [sp, #20]
 800881e:	5053      	str	r3, [r2, r1]
 8008820:	9b00      	ldr	r3, [sp, #0]
 8008822:	3304      	adds	r3, #4
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	2304      	movs	r3, #4
 8008828:	449c      	add	ip, r3
 800882a:	e79c      	b.n	8008766 <__multiply+0x8a>
 800882c:	9b02      	ldr	r3, [sp, #8]
 800882e:	3b01      	subs	r3, #1
 8008830:	9302      	str	r3, [sp, #8]
 8008832:	e79c      	b.n	800876e <__multiply+0x92>
 8008834:	08009e53 	.word	0x08009e53
 8008838:	08009e64 	.word	0x08009e64

0800883c <__pow5mult>:
 800883c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800883e:	2303      	movs	r3, #3
 8008840:	0015      	movs	r5, r2
 8008842:	0007      	movs	r7, r0
 8008844:	000e      	movs	r6, r1
 8008846:	401a      	ands	r2, r3
 8008848:	421d      	tst	r5, r3
 800884a:	d008      	beq.n	800885e <__pow5mult+0x22>
 800884c:	4925      	ldr	r1, [pc, #148]	; (80088e4 <__pow5mult+0xa8>)
 800884e:	3a01      	subs	r2, #1
 8008850:	0092      	lsls	r2, r2, #2
 8008852:	5852      	ldr	r2, [r2, r1]
 8008854:	2300      	movs	r3, #0
 8008856:	0031      	movs	r1, r6
 8008858:	f7ff fe9e 	bl	8008598 <__multadd>
 800885c:	0006      	movs	r6, r0
 800885e:	10ad      	asrs	r5, r5, #2
 8008860:	d03d      	beq.n	80088de <__pow5mult+0xa2>
 8008862:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008864:	2c00      	cmp	r4, #0
 8008866:	d10f      	bne.n	8008888 <__pow5mult+0x4c>
 8008868:	2010      	movs	r0, #16
 800886a:	f7ff fe17 	bl	800849c <malloc>
 800886e:	1e02      	subs	r2, r0, #0
 8008870:	6278      	str	r0, [r7, #36]	; 0x24
 8008872:	d105      	bne.n	8008880 <__pow5mult+0x44>
 8008874:	21d7      	movs	r1, #215	; 0xd7
 8008876:	4b1c      	ldr	r3, [pc, #112]	; (80088e8 <__pow5mult+0xac>)
 8008878:	481c      	ldr	r0, [pc, #112]	; (80088ec <__pow5mult+0xb0>)
 800887a:	0049      	lsls	r1, r1, #1
 800887c:	f000 fbec 	bl	8009058 <__assert_func>
 8008880:	6044      	str	r4, [r0, #4]
 8008882:	6084      	str	r4, [r0, #8]
 8008884:	6004      	str	r4, [r0, #0]
 8008886:	60c4      	str	r4, [r0, #12]
 8008888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888a:	689c      	ldr	r4, [r3, #8]
 800888c:	9301      	str	r3, [sp, #4]
 800888e:	2c00      	cmp	r4, #0
 8008890:	d108      	bne.n	80088a4 <__pow5mult+0x68>
 8008892:	0038      	movs	r0, r7
 8008894:	4916      	ldr	r1, [pc, #88]	; (80088f0 <__pow5mult+0xb4>)
 8008896:	f7ff ff0b 	bl	80086b0 <__i2b>
 800889a:	9b01      	ldr	r3, [sp, #4]
 800889c:	0004      	movs	r4, r0
 800889e:	6098      	str	r0, [r3, #8]
 80088a0:	2300      	movs	r3, #0
 80088a2:	6003      	str	r3, [r0, #0]
 80088a4:	2301      	movs	r3, #1
 80088a6:	421d      	tst	r5, r3
 80088a8:	d00a      	beq.n	80088c0 <__pow5mult+0x84>
 80088aa:	0031      	movs	r1, r6
 80088ac:	0022      	movs	r2, r4
 80088ae:	0038      	movs	r0, r7
 80088b0:	f7ff ff14 	bl	80086dc <__multiply>
 80088b4:	0031      	movs	r1, r6
 80088b6:	9001      	str	r0, [sp, #4]
 80088b8:	0038      	movs	r0, r7
 80088ba:	f7ff fe49 	bl	8008550 <_Bfree>
 80088be:	9e01      	ldr	r6, [sp, #4]
 80088c0:	106d      	asrs	r5, r5, #1
 80088c2:	d00c      	beq.n	80088de <__pow5mult+0xa2>
 80088c4:	6820      	ldr	r0, [r4, #0]
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d107      	bne.n	80088da <__pow5mult+0x9e>
 80088ca:	0022      	movs	r2, r4
 80088cc:	0021      	movs	r1, r4
 80088ce:	0038      	movs	r0, r7
 80088d0:	f7ff ff04 	bl	80086dc <__multiply>
 80088d4:	2300      	movs	r3, #0
 80088d6:	6020      	str	r0, [r4, #0]
 80088d8:	6003      	str	r3, [r0, #0]
 80088da:	0004      	movs	r4, r0
 80088dc:	e7e2      	b.n	80088a4 <__pow5mult+0x68>
 80088de:	0030      	movs	r0, r6
 80088e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80088e2:	46c0      	nop			; (mov r8, r8)
 80088e4:	08009fb8 	.word	0x08009fb8
 80088e8:	08009ddd 	.word	0x08009ddd
 80088ec:	08009e64 	.word	0x08009e64
 80088f0:	00000271 	.word	0x00000271

080088f4 <__lshift>:
 80088f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088f6:	000c      	movs	r4, r1
 80088f8:	0017      	movs	r7, r2
 80088fa:	6923      	ldr	r3, [r4, #16]
 80088fc:	1155      	asrs	r5, r2, #5
 80088fe:	b087      	sub	sp, #28
 8008900:	18eb      	adds	r3, r5, r3
 8008902:	9302      	str	r3, [sp, #8]
 8008904:	3301      	adds	r3, #1
 8008906:	9301      	str	r3, [sp, #4]
 8008908:	6849      	ldr	r1, [r1, #4]
 800890a:	68a3      	ldr	r3, [r4, #8]
 800890c:	9004      	str	r0, [sp, #16]
 800890e:	9a01      	ldr	r2, [sp, #4]
 8008910:	4293      	cmp	r3, r2
 8008912:	db11      	blt.n	8008938 <__lshift+0x44>
 8008914:	9804      	ldr	r0, [sp, #16]
 8008916:	f7ff fdd7 	bl	80084c8 <_Balloc>
 800891a:	0002      	movs	r2, r0
 800891c:	2300      	movs	r3, #0
 800891e:	3214      	adds	r2, #20
 8008920:	0006      	movs	r6, r0
 8008922:	0011      	movs	r1, r2
 8008924:	9203      	str	r2, [sp, #12]
 8008926:	4298      	cmp	r0, r3
 8008928:	d10d      	bne.n	8008946 <__lshift+0x52>
 800892a:	21da      	movs	r1, #218	; 0xda
 800892c:	0002      	movs	r2, r0
 800892e:	4b27      	ldr	r3, [pc, #156]	; (80089cc <__lshift+0xd8>)
 8008930:	4827      	ldr	r0, [pc, #156]	; (80089d0 <__lshift+0xdc>)
 8008932:	31ff      	adds	r1, #255	; 0xff
 8008934:	f000 fb90 	bl	8009058 <__assert_func>
 8008938:	3101      	adds	r1, #1
 800893a:	005b      	lsls	r3, r3, #1
 800893c:	e7e7      	b.n	800890e <__lshift+0x1a>
 800893e:	2200      	movs	r2, #0
 8008940:	0098      	lsls	r0, r3, #2
 8008942:	500a      	str	r2, [r1, r0]
 8008944:	3301      	adds	r3, #1
 8008946:	42ab      	cmp	r3, r5
 8008948:	dbf9      	blt.n	800893e <__lshift+0x4a>
 800894a:	43eb      	mvns	r3, r5
 800894c:	17db      	asrs	r3, r3, #31
 800894e:	401d      	ands	r5, r3
 8008950:	9b03      	ldr	r3, [sp, #12]
 8008952:	00ad      	lsls	r5, r5, #2
 8008954:	211f      	movs	r1, #31
 8008956:	0038      	movs	r0, r7
 8008958:	195d      	adds	r5, r3, r5
 800895a:	0023      	movs	r3, r4
 800895c:	6922      	ldr	r2, [r4, #16]
 800895e:	3314      	adds	r3, #20
 8008960:	0092      	lsls	r2, r2, #2
 8008962:	4008      	ands	r0, r1
 8008964:	4684      	mov	ip, r0
 8008966:	189a      	adds	r2, r3, r2
 8008968:	420f      	tst	r7, r1
 800896a:	d02a      	beq.n	80089c2 <__lshift+0xce>
 800896c:	3101      	adds	r1, #1
 800896e:	1a09      	subs	r1, r1, r0
 8008970:	9105      	str	r1, [sp, #20]
 8008972:	2100      	movs	r1, #0
 8008974:	9503      	str	r5, [sp, #12]
 8008976:	4667      	mov	r7, ip
 8008978:	6818      	ldr	r0, [r3, #0]
 800897a:	40b8      	lsls	r0, r7
 800897c:	4301      	orrs	r1, r0
 800897e:	9803      	ldr	r0, [sp, #12]
 8008980:	c002      	stmia	r0!, {r1}
 8008982:	cb02      	ldmia	r3!, {r1}
 8008984:	9003      	str	r0, [sp, #12]
 8008986:	9805      	ldr	r0, [sp, #20]
 8008988:	40c1      	lsrs	r1, r0
 800898a:	429a      	cmp	r2, r3
 800898c:	d8f3      	bhi.n	8008976 <__lshift+0x82>
 800898e:	0020      	movs	r0, r4
 8008990:	3015      	adds	r0, #21
 8008992:	2304      	movs	r3, #4
 8008994:	4282      	cmp	r2, r0
 8008996:	d304      	bcc.n	80089a2 <__lshift+0xae>
 8008998:	1b13      	subs	r3, r2, r4
 800899a:	3b15      	subs	r3, #21
 800899c:	089b      	lsrs	r3, r3, #2
 800899e:	3301      	adds	r3, #1
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	50e9      	str	r1, [r5, r3]
 80089a4:	2900      	cmp	r1, #0
 80089a6:	d002      	beq.n	80089ae <__lshift+0xba>
 80089a8:	9b02      	ldr	r3, [sp, #8]
 80089aa:	3302      	adds	r3, #2
 80089ac:	9301      	str	r3, [sp, #4]
 80089ae:	9b01      	ldr	r3, [sp, #4]
 80089b0:	9804      	ldr	r0, [sp, #16]
 80089b2:	3b01      	subs	r3, #1
 80089b4:	0021      	movs	r1, r4
 80089b6:	6133      	str	r3, [r6, #16]
 80089b8:	f7ff fdca 	bl	8008550 <_Bfree>
 80089bc:	0030      	movs	r0, r6
 80089be:	b007      	add	sp, #28
 80089c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089c2:	cb02      	ldmia	r3!, {r1}
 80089c4:	c502      	stmia	r5!, {r1}
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d8fb      	bhi.n	80089c2 <__lshift+0xce>
 80089ca:	e7f0      	b.n	80089ae <__lshift+0xba>
 80089cc:	08009e53 	.word	0x08009e53
 80089d0:	08009e64 	.word	0x08009e64

080089d4 <__mcmp>:
 80089d4:	6902      	ldr	r2, [r0, #16]
 80089d6:	690b      	ldr	r3, [r1, #16]
 80089d8:	b530      	push	{r4, r5, lr}
 80089da:	0004      	movs	r4, r0
 80089dc:	1ad0      	subs	r0, r2, r3
 80089de:	429a      	cmp	r2, r3
 80089e0:	d10d      	bne.n	80089fe <__mcmp+0x2a>
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	3414      	adds	r4, #20
 80089e6:	3114      	adds	r1, #20
 80089e8:	18e2      	adds	r2, r4, r3
 80089ea:	18c9      	adds	r1, r1, r3
 80089ec:	3a04      	subs	r2, #4
 80089ee:	3904      	subs	r1, #4
 80089f0:	6815      	ldr	r5, [r2, #0]
 80089f2:	680b      	ldr	r3, [r1, #0]
 80089f4:	429d      	cmp	r5, r3
 80089f6:	d003      	beq.n	8008a00 <__mcmp+0x2c>
 80089f8:	2001      	movs	r0, #1
 80089fa:	429d      	cmp	r5, r3
 80089fc:	d303      	bcc.n	8008a06 <__mcmp+0x32>
 80089fe:	bd30      	pop	{r4, r5, pc}
 8008a00:	4294      	cmp	r4, r2
 8008a02:	d3f3      	bcc.n	80089ec <__mcmp+0x18>
 8008a04:	e7fb      	b.n	80089fe <__mcmp+0x2a>
 8008a06:	4240      	negs	r0, r0
 8008a08:	e7f9      	b.n	80089fe <__mcmp+0x2a>
	...

08008a0c <__mdiff>:
 8008a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a0e:	000e      	movs	r6, r1
 8008a10:	0007      	movs	r7, r0
 8008a12:	0011      	movs	r1, r2
 8008a14:	0030      	movs	r0, r6
 8008a16:	b087      	sub	sp, #28
 8008a18:	0014      	movs	r4, r2
 8008a1a:	f7ff ffdb 	bl	80089d4 <__mcmp>
 8008a1e:	1e05      	subs	r5, r0, #0
 8008a20:	d110      	bne.n	8008a44 <__mdiff+0x38>
 8008a22:	0001      	movs	r1, r0
 8008a24:	0038      	movs	r0, r7
 8008a26:	f7ff fd4f 	bl	80084c8 <_Balloc>
 8008a2a:	1e02      	subs	r2, r0, #0
 8008a2c:	d104      	bne.n	8008a38 <__mdiff+0x2c>
 8008a2e:	4b40      	ldr	r3, [pc, #256]	; (8008b30 <__mdiff+0x124>)
 8008a30:	4940      	ldr	r1, [pc, #256]	; (8008b34 <__mdiff+0x128>)
 8008a32:	4841      	ldr	r0, [pc, #260]	; (8008b38 <__mdiff+0x12c>)
 8008a34:	f000 fb10 	bl	8009058 <__assert_func>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	6145      	str	r5, [r0, #20]
 8008a3c:	6103      	str	r3, [r0, #16]
 8008a3e:	0010      	movs	r0, r2
 8008a40:	b007      	add	sp, #28
 8008a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a44:	2301      	movs	r3, #1
 8008a46:	9301      	str	r3, [sp, #4]
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	db04      	blt.n	8008a56 <__mdiff+0x4a>
 8008a4c:	0023      	movs	r3, r4
 8008a4e:	0034      	movs	r4, r6
 8008a50:	001e      	movs	r6, r3
 8008a52:	2300      	movs	r3, #0
 8008a54:	9301      	str	r3, [sp, #4]
 8008a56:	0038      	movs	r0, r7
 8008a58:	6861      	ldr	r1, [r4, #4]
 8008a5a:	f7ff fd35 	bl	80084c8 <_Balloc>
 8008a5e:	1e02      	subs	r2, r0, #0
 8008a60:	d103      	bne.n	8008a6a <__mdiff+0x5e>
 8008a62:	2190      	movs	r1, #144	; 0x90
 8008a64:	4b32      	ldr	r3, [pc, #200]	; (8008b30 <__mdiff+0x124>)
 8008a66:	0089      	lsls	r1, r1, #2
 8008a68:	e7e3      	b.n	8008a32 <__mdiff+0x26>
 8008a6a:	9b01      	ldr	r3, [sp, #4]
 8008a6c:	2700      	movs	r7, #0
 8008a6e:	60c3      	str	r3, [r0, #12]
 8008a70:	6920      	ldr	r0, [r4, #16]
 8008a72:	3414      	adds	r4, #20
 8008a74:	9401      	str	r4, [sp, #4]
 8008a76:	9b01      	ldr	r3, [sp, #4]
 8008a78:	0084      	lsls	r4, r0, #2
 8008a7a:	191b      	adds	r3, r3, r4
 8008a7c:	0034      	movs	r4, r6
 8008a7e:	9302      	str	r3, [sp, #8]
 8008a80:	6933      	ldr	r3, [r6, #16]
 8008a82:	3414      	adds	r4, #20
 8008a84:	0099      	lsls	r1, r3, #2
 8008a86:	1863      	adds	r3, r4, r1
 8008a88:	9303      	str	r3, [sp, #12]
 8008a8a:	0013      	movs	r3, r2
 8008a8c:	3314      	adds	r3, #20
 8008a8e:	469c      	mov	ip, r3
 8008a90:	9305      	str	r3, [sp, #20]
 8008a92:	9b01      	ldr	r3, [sp, #4]
 8008a94:	9304      	str	r3, [sp, #16]
 8008a96:	9b04      	ldr	r3, [sp, #16]
 8008a98:	cc02      	ldmia	r4!, {r1}
 8008a9a:	cb20      	ldmia	r3!, {r5}
 8008a9c:	9304      	str	r3, [sp, #16]
 8008a9e:	b2ab      	uxth	r3, r5
 8008aa0:	19df      	adds	r7, r3, r7
 8008aa2:	b28b      	uxth	r3, r1
 8008aa4:	1afb      	subs	r3, r7, r3
 8008aa6:	0c2d      	lsrs	r5, r5, #16
 8008aa8:	0c09      	lsrs	r1, r1, #16
 8008aaa:	1a69      	subs	r1, r5, r1
 8008aac:	141d      	asrs	r5, r3, #16
 8008aae:	1949      	adds	r1, r1, r5
 8008ab0:	140f      	asrs	r7, r1, #16
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	0409      	lsls	r1, r1, #16
 8008ab6:	430b      	orrs	r3, r1
 8008ab8:	4661      	mov	r1, ip
 8008aba:	c108      	stmia	r1!, {r3}
 8008abc:	9b03      	ldr	r3, [sp, #12]
 8008abe:	468c      	mov	ip, r1
 8008ac0:	42a3      	cmp	r3, r4
 8008ac2:	d8e8      	bhi.n	8008a96 <__mdiff+0x8a>
 8008ac4:	0031      	movs	r1, r6
 8008ac6:	9c03      	ldr	r4, [sp, #12]
 8008ac8:	3115      	adds	r1, #21
 8008aca:	2304      	movs	r3, #4
 8008acc:	428c      	cmp	r4, r1
 8008ace:	d304      	bcc.n	8008ada <__mdiff+0xce>
 8008ad0:	1ba3      	subs	r3, r4, r6
 8008ad2:	3b15      	subs	r3, #21
 8008ad4:	089b      	lsrs	r3, r3, #2
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	9901      	ldr	r1, [sp, #4]
 8008adc:	18cc      	adds	r4, r1, r3
 8008ade:	9905      	ldr	r1, [sp, #20]
 8008ae0:	0026      	movs	r6, r4
 8008ae2:	18cb      	adds	r3, r1, r3
 8008ae4:	469c      	mov	ip, r3
 8008ae6:	9902      	ldr	r1, [sp, #8]
 8008ae8:	428e      	cmp	r6, r1
 8008aea:	d310      	bcc.n	8008b0e <__mdiff+0x102>
 8008aec:	9e02      	ldr	r6, [sp, #8]
 8008aee:	1ee5      	subs	r5, r4, #3
 8008af0:	2100      	movs	r1, #0
 8008af2:	42ae      	cmp	r6, r5
 8008af4:	d304      	bcc.n	8008b00 <__mdiff+0xf4>
 8008af6:	0031      	movs	r1, r6
 8008af8:	3103      	adds	r1, #3
 8008afa:	1b09      	subs	r1, r1, r4
 8008afc:	0889      	lsrs	r1, r1, #2
 8008afe:	0089      	lsls	r1, r1, #2
 8008b00:	185b      	adds	r3, r3, r1
 8008b02:	3b04      	subs	r3, #4
 8008b04:	6819      	ldr	r1, [r3, #0]
 8008b06:	2900      	cmp	r1, #0
 8008b08:	d00f      	beq.n	8008b2a <__mdiff+0x11e>
 8008b0a:	6110      	str	r0, [r2, #16]
 8008b0c:	e797      	b.n	8008a3e <__mdiff+0x32>
 8008b0e:	ce02      	ldmia	r6!, {r1}
 8008b10:	b28d      	uxth	r5, r1
 8008b12:	19ed      	adds	r5, r5, r7
 8008b14:	0c0f      	lsrs	r7, r1, #16
 8008b16:	1429      	asrs	r1, r5, #16
 8008b18:	1879      	adds	r1, r7, r1
 8008b1a:	140f      	asrs	r7, r1, #16
 8008b1c:	b2ad      	uxth	r5, r5
 8008b1e:	0409      	lsls	r1, r1, #16
 8008b20:	430d      	orrs	r5, r1
 8008b22:	4661      	mov	r1, ip
 8008b24:	c120      	stmia	r1!, {r5}
 8008b26:	468c      	mov	ip, r1
 8008b28:	e7dd      	b.n	8008ae6 <__mdiff+0xda>
 8008b2a:	3801      	subs	r0, #1
 8008b2c:	e7e9      	b.n	8008b02 <__mdiff+0xf6>
 8008b2e:	46c0      	nop			; (mov r8, r8)
 8008b30:	08009e53 	.word	0x08009e53
 8008b34:	00000232 	.word	0x00000232
 8008b38:	08009e64 	.word	0x08009e64

08008b3c <__d2b>:
 8008b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b3e:	2101      	movs	r1, #1
 8008b40:	0014      	movs	r4, r2
 8008b42:	001e      	movs	r6, r3
 8008b44:	9f08      	ldr	r7, [sp, #32]
 8008b46:	f7ff fcbf 	bl	80084c8 <_Balloc>
 8008b4a:	1e05      	subs	r5, r0, #0
 8008b4c:	d105      	bne.n	8008b5a <__d2b+0x1e>
 8008b4e:	0002      	movs	r2, r0
 8008b50:	4b26      	ldr	r3, [pc, #152]	; (8008bec <__d2b+0xb0>)
 8008b52:	4927      	ldr	r1, [pc, #156]	; (8008bf0 <__d2b+0xb4>)
 8008b54:	4827      	ldr	r0, [pc, #156]	; (8008bf4 <__d2b+0xb8>)
 8008b56:	f000 fa7f 	bl	8009058 <__assert_func>
 8008b5a:	0333      	lsls	r3, r6, #12
 8008b5c:	0076      	lsls	r6, r6, #1
 8008b5e:	0b1b      	lsrs	r3, r3, #12
 8008b60:	0d76      	lsrs	r6, r6, #21
 8008b62:	d124      	bne.n	8008bae <__d2b+0x72>
 8008b64:	9301      	str	r3, [sp, #4]
 8008b66:	2c00      	cmp	r4, #0
 8008b68:	d027      	beq.n	8008bba <__d2b+0x7e>
 8008b6a:	4668      	mov	r0, sp
 8008b6c:	9400      	str	r4, [sp, #0]
 8008b6e:	f7ff fd71 	bl	8008654 <__lo0bits>
 8008b72:	9c00      	ldr	r4, [sp, #0]
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d01e      	beq.n	8008bb6 <__d2b+0x7a>
 8008b78:	9b01      	ldr	r3, [sp, #4]
 8008b7a:	2120      	movs	r1, #32
 8008b7c:	001a      	movs	r2, r3
 8008b7e:	1a09      	subs	r1, r1, r0
 8008b80:	408a      	lsls	r2, r1
 8008b82:	40c3      	lsrs	r3, r0
 8008b84:	4322      	orrs	r2, r4
 8008b86:	616a      	str	r2, [r5, #20]
 8008b88:	9301      	str	r3, [sp, #4]
 8008b8a:	9c01      	ldr	r4, [sp, #4]
 8008b8c:	61ac      	str	r4, [r5, #24]
 8008b8e:	1e63      	subs	r3, r4, #1
 8008b90:	419c      	sbcs	r4, r3
 8008b92:	3401      	adds	r4, #1
 8008b94:	612c      	str	r4, [r5, #16]
 8008b96:	2e00      	cmp	r6, #0
 8008b98:	d018      	beq.n	8008bcc <__d2b+0x90>
 8008b9a:	4b17      	ldr	r3, [pc, #92]	; (8008bf8 <__d2b+0xbc>)
 8008b9c:	18f6      	adds	r6, r6, r3
 8008b9e:	2335      	movs	r3, #53	; 0x35
 8008ba0:	1836      	adds	r6, r6, r0
 8008ba2:	1a18      	subs	r0, r3, r0
 8008ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba6:	603e      	str	r6, [r7, #0]
 8008ba8:	6018      	str	r0, [r3, #0]
 8008baa:	0028      	movs	r0, r5
 8008bac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008bae:	2280      	movs	r2, #128	; 0x80
 8008bb0:	0352      	lsls	r2, r2, #13
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	e7d6      	b.n	8008b64 <__d2b+0x28>
 8008bb6:	616c      	str	r4, [r5, #20]
 8008bb8:	e7e7      	b.n	8008b8a <__d2b+0x4e>
 8008bba:	a801      	add	r0, sp, #4
 8008bbc:	f7ff fd4a 	bl	8008654 <__lo0bits>
 8008bc0:	2401      	movs	r4, #1
 8008bc2:	9b01      	ldr	r3, [sp, #4]
 8008bc4:	612c      	str	r4, [r5, #16]
 8008bc6:	616b      	str	r3, [r5, #20]
 8008bc8:	3020      	adds	r0, #32
 8008bca:	e7e4      	b.n	8008b96 <__d2b+0x5a>
 8008bcc:	4b0b      	ldr	r3, [pc, #44]	; (8008bfc <__d2b+0xc0>)
 8008bce:	18c0      	adds	r0, r0, r3
 8008bd0:	4b0b      	ldr	r3, [pc, #44]	; (8008c00 <__d2b+0xc4>)
 8008bd2:	6038      	str	r0, [r7, #0]
 8008bd4:	18e3      	adds	r3, r4, r3
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	18eb      	adds	r3, r5, r3
 8008bda:	6958      	ldr	r0, [r3, #20]
 8008bdc:	f7ff fd20 	bl	8008620 <__hi0bits>
 8008be0:	0164      	lsls	r4, r4, #5
 8008be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be4:	1a24      	subs	r4, r4, r0
 8008be6:	601c      	str	r4, [r3, #0]
 8008be8:	e7df      	b.n	8008baa <__d2b+0x6e>
 8008bea:	46c0      	nop			; (mov r8, r8)
 8008bec:	08009e53 	.word	0x08009e53
 8008bf0:	0000030a 	.word	0x0000030a
 8008bf4:	08009e64 	.word	0x08009e64
 8008bf8:	fffffbcd 	.word	0xfffffbcd
 8008bfc:	fffffbce 	.word	0xfffffbce
 8008c00:	3fffffff 	.word	0x3fffffff

08008c04 <_calloc_r>:
 8008c04:	434a      	muls	r2, r1
 8008c06:	b570      	push	{r4, r5, r6, lr}
 8008c08:	0011      	movs	r1, r2
 8008c0a:	0015      	movs	r5, r2
 8008c0c:	f000 f852 	bl	8008cb4 <_malloc_r>
 8008c10:	1e04      	subs	r4, r0, #0
 8008c12:	d003      	beq.n	8008c1c <_calloc_r+0x18>
 8008c14:	002a      	movs	r2, r5
 8008c16:	2100      	movs	r1, #0
 8008c18:	f7fe f8ef 	bl	8006dfa <memset>
 8008c1c:	0020      	movs	r0, r4
 8008c1e:	bd70      	pop	{r4, r5, r6, pc}

08008c20 <_free_r>:
 8008c20:	b570      	push	{r4, r5, r6, lr}
 8008c22:	0005      	movs	r5, r0
 8008c24:	2900      	cmp	r1, #0
 8008c26:	d010      	beq.n	8008c4a <_free_r+0x2a>
 8008c28:	1f0c      	subs	r4, r1, #4
 8008c2a:	6823      	ldr	r3, [r4, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	da00      	bge.n	8008c32 <_free_r+0x12>
 8008c30:	18e4      	adds	r4, r4, r3
 8008c32:	0028      	movs	r0, r5
 8008c34:	f000 fa64 	bl	8009100 <__malloc_lock>
 8008c38:	4a1d      	ldr	r2, [pc, #116]	; (8008cb0 <_free_r+0x90>)
 8008c3a:	6813      	ldr	r3, [r2, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d105      	bne.n	8008c4c <_free_r+0x2c>
 8008c40:	6063      	str	r3, [r4, #4]
 8008c42:	6014      	str	r4, [r2, #0]
 8008c44:	0028      	movs	r0, r5
 8008c46:	f000 fa63 	bl	8009110 <__malloc_unlock>
 8008c4a:	bd70      	pop	{r4, r5, r6, pc}
 8008c4c:	42a3      	cmp	r3, r4
 8008c4e:	d908      	bls.n	8008c62 <_free_r+0x42>
 8008c50:	6821      	ldr	r1, [r4, #0]
 8008c52:	1860      	adds	r0, r4, r1
 8008c54:	4283      	cmp	r3, r0
 8008c56:	d1f3      	bne.n	8008c40 <_free_r+0x20>
 8008c58:	6818      	ldr	r0, [r3, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	1841      	adds	r1, r0, r1
 8008c5e:	6021      	str	r1, [r4, #0]
 8008c60:	e7ee      	b.n	8008c40 <_free_r+0x20>
 8008c62:	001a      	movs	r2, r3
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d001      	beq.n	8008c6e <_free_r+0x4e>
 8008c6a:	42a3      	cmp	r3, r4
 8008c6c:	d9f9      	bls.n	8008c62 <_free_r+0x42>
 8008c6e:	6811      	ldr	r1, [r2, #0]
 8008c70:	1850      	adds	r0, r2, r1
 8008c72:	42a0      	cmp	r0, r4
 8008c74:	d10b      	bne.n	8008c8e <_free_r+0x6e>
 8008c76:	6820      	ldr	r0, [r4, #0]
 8008c78:	1809      	adds	r1, r1, r0
 8008c7a:	1850      	adds	r0, r2, r1
 8008c7c:	6011      	str	r1, [r2, #0]
 8008c7e:	4283      	cmp	r3, r0
 8008c80:	d1e0      	bne.n	8008c44 <_free_r+0x24>
 8008c82:	6818      	ldr	r0, [r3, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	1841      	adds	r1, r0, r1
 8008c88:	6011      	str	r1, [r2, #0]
 8008c8a:	6053      	str	r3, [r2, #4]
 8008c8c:	e7da      	b.n	8008c44 <_free_r+0x24>
 8008c8e:	42a0      	cmp	r0, r4
 8008c90:	d902      	bls.n	8008c98 <_free_r+0x78>
 8008c92:	230c      	movs	r3, #12
 8008c94:	602b      	str	r3, [r5, #0]
 8008c96:	e7d5      	b.n	8008c44 <_free_r+0x24>
 8008c98:	6821      	ldr	r1, [r4, #0]
 8008c9a:	1860      	adds	r0, r4, r1
 8008c9c:	4283      	cmp	r3, r0
 8008c9e:	d103      	bne.n	8008ca8 <_free_r+0x88>
 8008ca0:	6818      	ldr	r0, [r3, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	1841      	adds	r1, r0, r1
 8008ca6:	6021      	str	r1, [r4, #0]
 8008ca8:	6063      	str	r3, [r4, #4]
 8008caa:	6054      	str	r4, [r2, #4]
 8008cac:	e7ca      	b.n	8008c44 <_free_r+0x24>
 8008cae:	46c0      	nop			; (mov r8, r8)
 8008cb0:	200002cc 	.word	0x200002cc

08008cb4 <_malloc_r>:
 8008cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	1ccd      	adds	r5, r1, #3
 8008cba:	439d      	bics	r5, r3
 8008cbc:	3508      	adds	r5, #8
 8008cbe:	0006      	movs	r6, r0
 8008cc0:	2d0c      	cmp	r5, #12
 8008cc2:	d21f      	bcs.n	8008d04 <_malloc_r+0x50>
 8008cc4:	250c      	movs	r5, #12
 8008cc6:	42a9      	cmp	r1, r5
 8008cc8:	d81e      	bhi.n	8008d08 <_malloc_r+0x54>
 8008cca:	0030      	movs	r0, r6
 8008ccc:	f000 fa18 	bl	8009100 <__malloc_lock>
 8008cd0:	4925      	ldr	r1, [pc, #148]	; (8008d68 <_malloc_r+0xb4>)
 8008cd2:	680a      	ldr	r2, [r1, #0]
 8008cd4:	0014      	movs	r4, r2
 8008cd6:	2c00      	cmp	r4, #0
 8008cd8:	d11a      	bne.n	8008d10 <_malloc_r+0x5c>
 8008cda:	4f24      	ldr	r7, [pc, #144]	; (8008d6c <_malloc_r+0xb8>)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d104      	bne.n	8008cec <_malloc_r+0x38>
 8008ce2:	0021      	movs	r1, r4
 8008ce4:	0030      	movs	r0, r6
 8008ce6:	f000 f9a5 	bl	8009034 <_sbrk_r>
 8008cea:	6038      	str	r0, [r7, #0]
 8008cec:	0029      	movs	r1, r5
 8008cee:	0030      	movs	r0, r6
 8008cf0:	f000 f9a0 	bl	8009034 <_sbrk_r>
 8008cf4:	1c43      	adds	r3, r0, #1
 8008cf6:	d12b      	bne.n	8008d50 <_malloc_r+0x9c>
 8008cf8:	230c      	movs	r3, #12
 8008cfa:	0030      	movs	r0, r6
 8008cfc:	6033      	str	r3, [r6, #0]
 8008cfe:	f000 fa07 	bl	8009110 <__malloc_unlock>
 8008d02:	e003      	b.n	8008d0c <_malloc_r+0x58>
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	dade      	bge.n	8008cc6 <_malloc_r+0x12>
 8008d08:	230c      	movs	r3, #12
 8008d0a:	6033      	str	r3, [r6, #0]
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d10:	6823      	ldr	r3, [r4, #0]
 8008d12:	1b5b      	subs	r3, r3, r5
 8008d14:	d419      	bmi.n	8008d4a <_malloc_r+0x96>
 8008d16:	2b0b      	cmp	r3, #11
 8008d18:	d903      	bls.n	8008d22 <_malloc_r+0x6e>
 8008d1a:	6023      	str	r3, [r4, #0]
 8008d1c:	18e4      	adds	r4, r4, r3
 8008d1e:	6025      	str	r5, [r4, #0]
 8008d20:	e003      	b.n	8008d2a <_malloc_r+0x76>
 8008d22:	6863      	ldr	r3, [r4, #4]
 8008d24:	42a2      	cmp	r2, r4
 8008d26:	d10e      	bne.n	8008d46 <_malloc_r+0x92>
 8008d28:	600b      	str	r3, [r1, #0]
 8008d2a:	0030      	movs	r0, r6
 8008d2c:	f000 f9f0 	bl	8009110 <__malloc_unlock>
 8008d30:	0020      	movs	r0, r4
 8008d32:	2207      	movs	r2, #7
 8008d34:	300b      	adds	r0, #11
 8008d36:	1d23      	adds	r3, r4, #4
 8008d38:	4390      	bics	r0, r2
 8008d3a:	1ac2      	subs	r2, r0, r3
 8008d3c:	4298      	cmp	r0, r3
 8008d3e:	d0e6      	beq.n	8008d0e <_malloc_r+0x5a>
 8008d40:	1a1b      	subs	r3, r3, r0
 8008d42:	50a3      	str	r3, [r4, r2]
 8008d44:	e7e3      	b.n	8008d0e <_malloc_r+0x5a>
 8008d46:	6053      	str	r3, [r2, #4]
 8008d48:	e7ef      	b.n	8008d2a <_malloc_r+0x76>
 8008d4a:	0022      	movs	r2, r4
 8008d4c:	6864      	ldr	r4, [r4, #4]
 8008d4e:	e7c2      	b.n	8008cd6 <_malloc_r+0x22>
 8008d50:	2303      	movs	r3, #3
 8008d52:	1cc4      	adds	r4, r0, #3
 8008d54:	439c      	bics	r4, r3
 8008d56:	42a0      	cmp	r0, r4
 8008d58:	d0e1      	beq.n	8008d1e <_malloc_r+0x6a>
 8008d5a:	1a21      	subs	r1, r4, r0
 8008d5c:	0030      	movs	r0, r6
 8008d5e:	f000 f969 	bl	8009034 <_sbrk_r>
 8008d62:	1c43      	adds	r3, r0, #1
 8008d64:	d1db      	bne.n	8008d1e <_malloc_r+0x6a>
 8008d66:	e7c7      	b.n	8008cf8 <_malloc_r+0x44>
 8008d68:	200002cc 	.word	0x200002cc
 8008d6c:	200002d0 	.word	0x200002d0

08008d70 <__ssputs_r>:
 8008d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d72:	688e      	ldr	r6, [r1, #8]
 8008d74:	b085      	sub	sp, #20
 8008d76:	0007      	movs	r7, r0
 8008d78:	000c      	movs	r4, r1
 8008d7a:	9203      	str	r2, [sp, #12]
 8008d7c:	9301      	str	r3, [sp, #4]
 8008d7e:	429e      	cmp	r6, r3
 8008d80:	d83c      	bhi.n	8008dfc <__ssputs_r+0x8c>
 8008d82:	2390      	movs	r3, #144	; 0x90
 8008d84:	898a      	ldrh	r2, [r1, #12]
 8008d86:	00db      	lsls	r3, r3, #3
 8008d88:	421a      	tst	r2, r3
 8008d8a:	d034      	beq.n	8008df6 <__ssputs_r+0x86>
 8008d8c:	2503      	movs	r5, #3
 8008d8e:	6909      	ldr	r1, [r1, #16]
 8008d90:	6823      	ldr	r3, [r4, #0]
 8008d92:	1a5b      	subs	r3, r3, r1
 8008d94:	9302      	str	r3, [sp, #8]
 8008d96:	6963      	ldr	r3, [r4, #20]
 8008d98:	9802      	ldr	r0, [sp, #8]
 8008d9a:	435d      	muls	r5, r3
 8008d9c:	0feb      	lsrs	r3, r5, #31
 8008d9e:	195d      	adds	r5, r3, r5
 8008da0:	9b01      	ldr	r3, [sp, #4]
 8008da2:	106d      	asrs	r5, r5, #1
 8008da4:	3301      	adds	r3, #1
 8008da6:	181b      	adds	r3, r3, r0
 8008da8:	42ab      	cmp	r3, r5
 8008daa:	d900      	bls.n	8008dae <__ssputs_r+0x3e>
 8008dac:	001d      	movs	r5, r3
 8008dae:	0553      	lsls	r3, r2, #21
 8008db0:	d532      	bpl.n	8008e18 <__ssputs_r+0xa8>
 8008db2:	0029      	movs	r1, r5
 8008db4:	0038      	movs	r0, r7
 8008db6:	f7ff ff7d 	bl	8008cb4 <_malloc_r>
 8008dba:	1e06      	subs	r6, r0, #0
 8008dbc:	d109      	bne.n	8008dd2 <__ssputs_r+0x62>
 8008dbe:	230c      	movs	r3, #12
 8008dc0:	603b      	str	r3, [r7, #0]
 8008dc2:	2340      	movs	r3, #64	; 0x40
 8008dc4:	2001      	movs	r0, #1
 8008dc6:	89a2      	ldrh	r2, [r4, #12]
 8008dc8:	4240      	negs	r0, r0
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	81a3      	strh	r3, [r4, #12]
 8008dce:	b005      	add	sp, #20
 8008dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dd2:	9a02      	ldr	r2, [sp, #8]
 8008dd4:	6921      	ldr	r1, [r4, #16]
 8008dd6:	f7fe f807 	bl	8006de8 <memcpy>
 8008dda:	89a3      	ldrh	r3, [r4, #12]
 8008ddc:	4a14      	ldr	r2, [pc, #80]	; (8008e30 <__ssputs_r+0xc0>)
 8008dde:	401a      	ands	r2, r3
 8008de0:	2380      	movs	r3, #128	; 0x80
 8008de2:	4313      	orrs	r3, r2
 8008de4:	81a3      	strh	r3, [r4, #12]
 8008de6:	9b02      	ldr	r3, [sp, #8]
 8008de8:	6126      	str	r6, [r4, #16]
 8008dea:	18f6      	adds	r6, r6, r3
 8008dec:	6026      	str	r6, [r4, #0]
 8008dee:	6165      	str	r5, [r4, #20]
 8008df0:	9e01      	ldr	r6, [sp, #4]
 8008df2:	1aed      	subs	r5, r5, r3
 8008df4:	60a5      	str	r5, [r4, #8]
 8008df6:	9b01      	ldr	r3, [sp, #4]
 8008df8:	429e      	cmp	r6, r3
 8008dfa:	d900      	bls.n	8008dfe <__ssputs_r+0x8e>
 8008dfc:	9e01      	ldr	r6, [sp, #4]
 8008dfe:	0032      	movs	r2, r6
 8008e00:	9903      	ldr	r1, [sp, #12]
 8008e02:	6820      	ldr	r0, [r4, #0]
 8008e04:	f000 f968 	bl	80090d8 <memmove>
 8008e08:	68a3      	ldr	r3, [r4, #8]
 8008e0a:	2000      	movs	r0, #0
 8008e0c:	1b9b      	subs	r3, r3, r6
 8008e0e:	60a3      	str	r3, [r4, #8]
 8008e10:	6823      	ldr	r3, [r4, #0]
 8008e12:	199e      	adds	r6, r3, r6
 8008e14:	6026      	str	r6, [r4, #0]
 8008e16:	e7da      	b.n	8008dce <__ssputs_r+0x5e>
 8008e18:	002a      	movs	r2, r5
 8008e1a:	0038      	movs	r0, r7
 8008e1c:	f000 f980 	bl	8009120 <_realloc_r>
 8008e20:	1e06      	subs	r6, r0, #0
 8008e22:	d1e0      	bne.n	8008de6 <__ssputs_r+0x76>
 8008e24:	0038      	movs	r0, r7
 8008e26:	6921      	ldr	r1, [r4, #16]
 8008e28:	f7ff fefa 	bl	8008c20 <_free_r>
 8008e2c:	e7c7      	b.n	8008dbe <__ssputs_r+0x4e>
 8008e2e:	46c0      	nop			; (mov r8, r8)
 8008e30:	fffffb7f 	.word	0xfffffb7f

08008e34 <_svfiprintf_r>:
 8008e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e36:	b0a1      	sub	sp, #132	; 0x84
 8008e38:	9003      	str	r0, [sp, #12]
 8008e3a:	001d      	movs	r5, r3
 8008e3c:	898b      	ldrh	r3, [r1, #12]
 8008e3e:	000f      	movs	r7, r1
 8008e40:	0016      	movs	r6, r2
 8008e42:	061b      	lsls	r3, r3, #24
 8008e44:	d511      	bpl.n	8008e6a <_svfiprintf_r+0x36>
 8008e46:	690b      	ldr	r3, [r1, #16]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d10e      	bne.n	8008e6a <_svfiprintf_r+0x36>
 8008e4c:	2140      	movs	r1, #64	; 0x40
 8008e4e:	f7ff ff31 	bl	8008cb4 <_malloc_r>
 8008e52:	6038      	str	r0, [r7, #0]
 8008e54:	6138      	str	r0, [r7, #16]
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d105      	bne.n	8008e66 <_svfiprintf_r+0x32>
 8008e5a:	230c      	movs	r3, #12
 8008e5c:	9a03      	ldr	r2, [sp, #12]
 8008e5e:	3801      	subs	r0, #1
 8008e60:	6013      	str	r3, [r2, #0]
 8008e62:	b021      	add	sp, #132	; 0x84
 8008e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e66:	2340      	movs	r3, #64	; 0x40
 8008e68:	617b      	str	r3, [r7, #20]
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	ac08      	add	r4, sp, #32
 8008e6e:	6163      	str	r3, [r4, #20]
 8008e70:	3320      	adds	r3, #32
 8008e72:	7663      	strb	r3, [r4, #25]
 8008e74:	3310      	adds	r3, #16
 8008e76:	76a3      	strb	r3, [r4, #26]
 8008e78:	9507      	str	r5, [sp, #28]
 8008e7a:	0035      	movs	r5, r6
 8008e7c:	782b      	ldrb	r3, [r5, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <_svfiprintf_r+0x52>
 8008e82:	2b25      	cmp	r3, #37	; 0x25
 8008e84:	d147      	bne.n	8008f16 <_svfiprintf_r+0xe2>
 8008e86:	1bab      	subs	r3, r5, r6
 8008e88:	9305      	str	r3, [sp, #20]
 8008e8a:	42b5      	cmp	r5, r6
 8008e8c:	d00c      	beq.n	8008ea8 <_svfiprintf_r+0x74>
 8008e8e:	0032      	movs	r2, r6
 8008e90:	0039      	movs	r1, r7
 8008e92:	9803      	ldr	r0, [sp, #12]
 8008e94:	f7ff ff6c 	bl	8008d70 <__ssputs_r>
 8008e98:	1c43      	adds	r3, r0, #1
 8008e9a:	d100      	bne.n	8008e9e <_svfiprintf_r+0x6a>
 8008e9c:	e0ae      	b.n	8008ffc <_svfiprintf_r+0x1c8>
 8008e9e:	6962      	ldr	r2, [r4, #20]
 8008ea0:	9b05      	ldr	r3, [sp, #20]
 8008ea2:	4694      	mov	ip, r2
 8008ea4:	4463      	add	r3, ip
 8008ea6:	6163      	str	r3, [r4, #20]
 8008ea8:	782b      	ldrb	r3, [r5, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d100      	bne.n	8008eb0 <_svfiprintf_r+0x7c>
 8008eae:	e0a5      	b.n	8008ffc <_svfiprintf_r+0x1c8>
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	4252      	negs	r2, r2
 8008eb6:	6062      	str	r2, [r4, #4]
 8008eb8:	a904      	add	r1, sp, #16
 8008eba:	3254      	adds	r2, #84	; 0x54
 8008ebc:	1852      	adds	r2, r2, r1
 8008ebe:	1c6e      	adds	r6, r5, #1
 8008ec0:	6023      	str	r3, [r4, #0]
 8008ec2:	60e3      	str	r3, [r4, #12]
 8008ec4:	60a3      	str	r3, [r4, #8]
 8008ec6:	7013      	strb	r3, [r2, #0]
 8008ec8:	65a3      	str	r3, [r4, #88]	; 0x58
 8008eca:	2205      	movs	r2, #5
 8008ecc:	7831      	ldrb	r1, [r6, #0]
 8008ece:	4854      	ldr	r0, [pc, #336]	; (8009020 <_svfiprintf_r+0x1ec>)
 8008ed0:	f7ff faee 	bl	80084b0 <memchr>
 8008ed4:	1c75      	adds	r5, r6, #1
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	d11f      	bne.n	8008f1a <_svfiprintf_r+0xe6>
 8008eda:	6822      	ldr	r2, [r4, #0]
 8008edc:	06d3      	lsls	r3, r2, #27
 8008ede:	d504      	bpl.n	8008eea <_svfiprintf_r+0xb6>
 8008ee0:	2353      	movs	r3, #83	; 0x53
 8008ee2:	a904      	add	r1, sp, #16
 8008ee4:	185b      	adds	r3, r3, r1
 8008ee6:	2120      	movs	r1, #32
 8008ee8:	7019      	strb	r1, [r3, #0]
 8008eea:	0713      	lsls	r3, r2, #28
 8008eec:	d504      	bpl.n	8008ef8 <_svfiprintf_r+0xc4>
 8008eee:	2353      	movs	r3, #83	; 0x53
 8008ef0:	a904      	add	r1, sp, #16
 8008ef2:	185b      	adds	r3, r3, r1
 8008ef4:	212b      	movs	r1, #43	; 0x2b
 8008ef6:	7019      	strb	r1, [r3, #0]
 8008ef8:	7833      	ldrb	r3, [r6, #0]
 8008efa:	2b2a      	cmp	r3, #42	; 0x2a
 8008efc:	d016      	beq.n	8008f2c <_svfiprintf_r+0xf8>
 8008efe:	0035      	movs	r5, r6
 8008f00:	2100      	movs	r1, #0
 8008f02:	200a      	movs	r0, #10
 8008f04:	68e3      	ldr	r3, [r4, #12]
 8008f06:	782a      	ldrb	r2, [r5, #0]
 8008f08:	1c6e      	adds	r6, r5, #1
 8008f0a:	3a30      	subs	r2, #48	; 0x30
 8008f0c:	2a09      	cmp	r2, #9
 8008f0e:	d94e      	bls.n	8008fae <_svfiprintf_r+0x17a>
 8008f10:	2900      	cmp	r1, #0
 8008f12:	d111      	bne.n	8008f38 <_svfiprintf_r+0x104>
 8008f14:	e017      	b.n	8008f46 <_svfiprintf_r+0x112>
 8008f16:	3501      	adds	r5, #1
 8008f18:	e7b0      	b.n	8008e7c <_svfiprintf_r+0x48>
 8008f1a:	4b41      	ldr	r3, [pc, #260]	; (8009020 <_svfiprintf_r+0x1ec>)
 8008f1c:	6822      	ldr	r2, [r4, #0]
 8008f1e:	1ac0      	subs	r0, r0, r3
 8008f20:	2301      	movs	r3, #1
 8008f22:	4083      	lsls	r3, r0
 8008f24:	4313      	orrs	r3, r2
 8008f26:	002e      	movs	r6, r5
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	e7ce      	b.n	8008eca <_svfiprintf_r+0x96>
 8008f2c:	9b07      	ldr	r3, [sp, #28]
 8008f2e:	1d19      	adds	r1, r3, #4
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	9107      	str	r1, [sp, #28]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	db01      	blt.n	8008f3c <_svfiprintf_r+0x108>
 8008f38:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f3a:	e004      	b.n	8008f46 <_svfiprintf_r+0x112>
 8008f3c:	425b      	negs	r3, r3
 8008f3e:	60e3      	str	r3, [r4, #12]
 8008f40:	2302      	movs	r3, #2
 8008f42:	4313      	orrs	r3, r2
 8008f44:	6023      	str	r3, [r4, #0]
 8008f46:	782b      	ldrb	r3, [r5, #0]
 8008f48:	2b2e      	cmp	r3, #46	; 0x2e
 8008f4a:	d10a      	bne.n	8008f62 <_svfiprintf_r+0x12e>
 8008f4c:	786b      	ldrb	r3, [r5, #1]
 8008f4e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f50:	d135      	bne.n	8008fbe <_svfiprintf_r+0x18a>
 8008f52:	9b07      	ldr	r3, [sp, #28]
 8008f54:	3502      	adds	r5, #2
 8008f56:	1d1a      	adds	r2, r3, #4
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	9207      	str	r2, [sp, #28]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	db2b      	blt.n	8008fb8 <_svfiprintf_r+0x184>
 8008f60:	9309      	str	r3, [sp, #36]	; 0x24
 8008f62:	4e30      	ldr	r6, [pc, #192]	; (8009024 <_svfiprintf_r+0x1f0>)
 8008f64:	2203      	movs	r2, #3
 8008f66:	0030      	movs	r0, r6
 8008f68:	7829      	ldrb	r1, [r5, #0]
 8008f6a:	f7ff faa1 	bl	80084b0 <memchr>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d006      	beq.n	8008f80 <_svfiprintf_r+0x14c>
 8008f72:	2340      	movs	r3, #64	; 0x40
 8008f74:	1b80      	subs	r0, r0, r6
 8008f76:	4083      	lsls	r3, r0
 8008f78:	6822      	ldr	r2, [r4, #0]
 8008f7a:	3501      	adds	r5, #1
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	6023      	str	r3, [r4, #0]
 8008f80:	7829      	ldrb	r1, [r5, #0]
 8008f82:	2206      	movs	r2, #6
 8008f84:	4828      	ldr	r0, [pc, #160]	; (8009028 <_svfiprintf_r+0x1f4>)
 8008f86:	1c6e      	adds	r6, r5, #1
 8008f88:	7621      	strb	r1, [r4, #24]
 8008f8a:	f7ff fa91 	bl	80084b0 <memchr>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d03c      	beq.n	800900c <_svfiprintf_r+0x1d8>
 8008f92:	4b26      	ldr	r3, [pc, #152]	; (800902c <_svfiprintf_r+0x1f8>)
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d125      	bne.n	8008fe4 <_svfiprintf_r+0x1b0>
 8008f98:	2207      	movs	r2, #7
 8008f9a:	9b07      	ldr	r3, [sp, #28]
 8008f9c:	3307      	adds	r3, #7
 8008f9e:	4393      	bics	r3, r2
 8008fa0:	3308      	adds	r3, #8
 8008fa2:	9307      	str	r3, [sp, #28]
 8008fa4:	6963      	ldr	r3, [r4, #20]
 8008fa6:	9a04      	ldr	r2, [sp, #16]
 8008fa8:	189b      	adds	r3, r3, r2
 8008faa:	6163      	str	r3, [r4, #20]
 8008fac:	e765      	b.n	8008e7a <_svfiprintf_r+0x46>
 8008fae:	4343      	muls	r3, r0
 8008fb0:	0035      	movs	r5, r6
 8008fb2:	2101      	movs	r1, #1
 8008fb4:	189b      	adds	r3, r3, r2
 8008fb6:	e7a6      	b.n	8008f06 <_svfiprintf_r+0xd2>
 8008fb8:	2301      	movs	r3, #1
 8008fba:	425b      	negs	r3, r3
 8008fbc:	e7d0      	b.n	8008f60 <_svfiprintf_r+0x12c>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	200a      	movs	r0, #10
 8008fc2:	001a      	movs	r2, r3
 8008fc4:	3501      	adds	r5, #1
 8008fc6:	6063      	str	r3, [r4, #4]
 8008fc8:	7829      	ldrb	r1, [r5, #0]
 8008fca:	1c6e      	adds	r6, r5, #1
 8008fcc:	3930      	subs	r1, #48	; 0x30
 8008fce:	2909      	cmp	r1, #9
 8008fd0:	d903      	bls.n	8008fda <_svfiprintf_r+0x1a6>
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d0c5      	beq.n	8008f62 <_svfiprintf_r+0x12e>
 8008fd6:	9209      	str	r2, [sp, #36]	; 0x24
 8008fd8:	e7c3      	b.n	8008f62 <_svfiprintf_r+0x12e>
 8008fda:	4342      	muls	r2, r0
 8008fdc:	0035      	movs	r5, r6
 8008fde:	2301      	movs	r3, #1
 8008fe0:	1852      	adds	r2, r2, r1
 8008fe2:	e7f1      	b.n	8008fc8 <_svfiprintf_r+0x194>
 8008fe4:	ab07      	add	r3, sp, #28
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	003a      	movs	r2, r7
 8008fea:	0021      	movs	r1, r4
 8008fec:	4b10      	ldr	r3, [pc, #64]	; (8009030 <_svfiprintf_r+0x1fc>)
 8008fee:	9803      	ldr	r0, [sp, #12]
 8008ff0:	f7fd ffb6 	bl	8006f60 <_printf_float>
 8008ff4:	9004      	str	r0, [sp, #16]
 8008ff6:	9b04      	ldr	r3, [sp, #16]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	d1d3      	bne.n	8008fa4 <_svfiprintf_r+0x170>
 8008ffc:	89bb      	ldrh	r3, [r7, #12]
 8008ffe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009000:	065b      	lsls	r3, r3, #25
 8009002:	d400      	bmi.n	8009006 <_svfiprintf_r+0x1d2>
 8009004:	e72d      	b.n	8008e62 <_svfiprintf_r+0x2e>
 8009006:	2001      	movs	r0, #1
 8009008:	4240      	negs	r0, r0
 800900a:	e72a      	b.n	8008e62 <_svfiprintf_r+0x2e>
 800900c:	ab07      	add	r3, sp, #28
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	003a      	movs	r2, r7
 8009012:	0021      	movs	r1, r4
 8009014:	4b06      	ldr	r3, [pc, #24]	; (8009030 <_svfiprintf_r+0x1fc>)
 8009016:	9803      	ldr	r0, [sp, #12]
 8009018:	f7fe fa60 	bl	80074dc <_printf_i>
 800901c:	e7ea      	b.n	8008ff4 <_svfiprintf_r+0x1c0>
 800901e:	46c0      	nop			; (mov r8, r8)
 8009020:	08009fc4 	.word	0x08009fc4
 8009024:	08009fca 	.word	0x08009fca
 8009028:	08009fce 	.word	0x08009fce
 800902c:	08006f61 	.word	0x08006f61
 8009030:	08008d71 	.word	0x08008d71

08009034 <_sbrk_r>:
 8009034:	2300      	movs	r3, #0
 8009036:	b570      	push	{r4, r5, r6, lr}
 8009038:	4d06      	ldr	r5, [pc, #24]	; (8009054 <_sbrk_r+0x20>)
 800903a:	0004      	movs	r4, r0
 800903c:	0008      	movs	r0, r1
 800903e:	602b      	str	r3, [r5, #0]
 8009040:	f7fa fdc4 	bl	8003bcc <_sbrk>
 8009044:	1c43      	adds	r3, r0, #1
 8009046:	d103      	bne.n	8009050 <_sbrk_r+0x1c>
 8009048:	682b      	ldr	r3, [r5, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d000      	beq.n	8009050 <_sbrk_r+0x1c>
 800904e:	6023      	str	r3, [r4, #0]
 8009050:	bd70      	pop	{r4, r5, r6, pc}
 8009052:	46c0      	nop			; (mov r8, r8)
 8009054:	20000470 	.word	0x20000470

08009058 <__assert_func>:
 8009058:	b530      	push	{r4, r5, lr}
 800905a:	0014      	movs	r4, r2
 800905c:	001a      	movs	r2, r3
 800905e:	4b09      	ldr	r3, [pc, #36]	; (8009084 <__assert_func+0x2c>)
 8009060:	0005      	movs	r5, r0
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	b085      	sub	sp, #20
 8009066:	68d8      	ldr	r0, [r3, #12]
 8009068:	4b07      	ldr	r3, [pc, #28]	; (8009088 <__assert_func+0x30>)
 800906a:	2c00      	cmp	r4, #0
 800906c:	d101      	bne.n	8009072 <__assert_func+0x1a>
 800906e:	4b07      	ldr	r3, [pc, #28]	; (800908c <__assert_func+0x34>)
 8009070:	001c      	movs	r4, r3
 8009072:	9301      	str	r3, [sp, #4]
 8009074:	9100      	str	r1, [sp, #0]
 8009076:	002b      	movs	r3, r5
 8009078:	4905      	ldr	r1, [pc, #20]	; (8009090 <__assert_func+0x38>)
 800907a:	9402      	str	r4, [sp, #8]
 800907c:	f000 f80a 	bl	8009094 <fiprintf>
 8009080:	f000 fab2 	bl	80095e8 <abort>
 8009084:	20000044 	.word	0x20000044
 8009088:	08009fd5 	.word	0x08009fd5
 800908c:	0800a010 	.word	0x0800a010
 8009090:	08009fe2 	.word	0x08009fe2

08009094 <fiprintf>:
 8009094:	b40e      	push	{r1, r2, r3}
 8009096:	b503      	push	{r0, r1, lr}
 8009098:	0001      	movs	r1, r0
 800909a:	ab03      	add	r3, sp, #12
 800909c:	4804      	ldr	r0, [pc, #16]	; (80090b0 <fiprintf+0x1c>)
 800909e:	cb04      	ldmia	r3!, {r2}
 80090a0:	6800      	ldr	r0, [r0, #0]
 80090a2:	9301      	str	r3, [sp, #4]
 80090a4:	f000 f88a 	bl	80091bc <_vfiprintf_r>
 80090a8:	b002      	add	sp, #8
 80090aa:	bc08      	pop	{r3}
 80090ac:	b003      	add	sp, #12
 80090ae:	4718      	bx	r3
 80090b0:	20000044 	.word	0x20000044

080090b4 <__ascii_mbtowc>:
 80090b4:	b082      	sub	sp, #8
 80090b6:	2900      	cmp	r1, #0
 80090b8:	d100      	bne.n	80090bc <__ascii_mbtowc+0x8>
 80090ba:	a901      	add	r1, sp, #4
 80090bc:	1e10      	subs	r0, r2, #0
 80090be:	d006      	beq.n	80090ce <__ascii_mbtowc+0x1a>
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d006      	beq.n	80090d2 <__ascii_mbtowc+0x1e>
 80090c4:	7813      	ldrb	r3, [r2, #0]
 80090c6:	600b      	str	r3, [r1, #0]
 80090c8:	7810      	ldrb	r0, [r2, #0]
 80090ca:	1e43      	subs	r3, r0, #1
 80090cc:	4198      	sbcs	r0, r3
 80090ce:	b002      	add	sp, #8
 80090d0:	4770      	bx	lr
 80090d2:	2002      	movs	r0, #2
 80090d4:	4240      	negs	r0, r0
 80090d6:	e7fa      	b.n	80090ce <__ascii_mbtowc+0x1a>

080090d8 <memmove>:
 80090d8:	b510      	push	{r4, lr}
 80090da:	4288      	cmp	r0, r1
 80090dc:	d902      	bls.n	80090e4 <memmove+0xc>
 80090de:	188b      	adds	r3, r1, r2
 80090e0:	4298      	cmp	r0, r3
 80090e2:	d303      	bcc.n	80090ec <memmove+0x14>
 80090e4:	2300      	movs	r3, #0
 80090e6:	e007      	b.n	80090f8 <memmove+0x20>
 80090e8:	5c8b      	ldrb	r3, [r1, r2]
 80090ea:	5483      	strb	r3, [r0, r2]
 80090ec:	3a01      	subs	r2, #1
 80090ee:	d2fb      	bcs.n	80090e8 <memmove+0x10>
 80090f0:	bd10      	pop	{r4, pc}
 80090f2:	5ccc      	ldrb	r4, [r1, r3]
 80090f4:	54c4      	strb	r4, [r0, r3]
 80090f6:	3301      	adds	r3, #1
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d1fa      	bne.n	80090f2 <memmove+0x1a>
 80090fc:	e7f8      	b.n	80090f0 <memmove+0x18>
	...

08009100 <__malloc_lock>:
 8009100:	b510      	push	{r4, lr}
 8009102:	4802      	ldr	r0, [pc, #8]	; (800910c <__malloc_lock+0xc>)
 8009104:	f000 fc47 	bl	8009996 <__retarget_lock_acquire_recursive>
 8009108:	bd10      	pop	{r4, pc}
 800910a:	46c0      	nop			; (mov r8, r8)
 800910c:	20000478 	.word	0x20000478

08009110 <__malloc_unlock>:
 8009110:	b510      	push	{r4, lr}
 8009112:	4802      	ldr	r0, [pc, #8]	; (800911c <__malloc_unlock+0xc>)
 8009114:	f000 fc40 	bl	8009998 <__retarget_lock_release_recursive>
 8009118:	bd10      	pop	{r4, pc}
 800911a:	46c0      	nop			; (mov r8, r8)
 800911c:	20000478 	.word	0x20000478

08009120 <_realloc_r>:
 8009120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009122:	0007      	movs	r7, r0
 8009124:	000d      	movs	r5, r1
 8009126:	0016      	movs	r6, r2
 8009128:	2900      	cmp	r1, #0
 800912a:	d105      	bne.n	8009138 <_realloc_r+0x18>
 800912c:	0011      	movs	r1, r2
 800912e:	f7ff fdc1 	bl	8008cb4 <_malloc_r>
 8009132:	0004      	movs	r4, r0
 8009134:	0020      	movs	r0, r4
 8009136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009138:	2a00      	cmp	r2, #0
 800913a:	d103      	bne.n	8009144 <_realloc_r+0x24>
 800913c:	f7ff fd70 	bl	8008c20 <_free_r>
 8009140:	0034      	movs	r4, r6
 8009142:	e7f7      	b.n	8009134 <_realloc_r+0x14>
 8009144:	f000 fc96 	bl	8009a74 <_malloc_usable_size_r>
 8009148:	002c      	movs	r4, r5
 800914a:	42b0      	cmp	r0, r6
 800914c:	d2f2      	bcs.n	8009134 <_realloc_r+0x14>
 800914e:	0031      	movs	r1, r6
 8009150:	0038      	movs	r0, r7
 8009152:	f7ff fdaf 	bl	8008cb4 <_malloc_r>
 8009156:	1e04      	subs	r4, r0, #0
 8009158:	d0ec      	beq.n	8009134 <_realloc_r+0x14>
 800915a:	0029      	movs	r1, r5
 800915c:	0032      	movs	r2, r6
 800915e:	f7fd fe43 	bl	8006de8 <memcpy>
 8009162:	0029      	movs	r1, r5
 8009164:	0038      	movs	r0, r7
 8009166:	f7ff fd5b 	bl	8008c20 <_free_r>
 800916a:	e7e3      	b.n	8009134 <_realloc_r+0x14>

0800916c <__sfputc_r>:
 800916c:	6893      	ldr	r3, [r2, #8]
 800916e:	b510      	push	{r4, lr}
 8009170:	3b01      	subs	r3, #1
 8009172:	6093      	str	r3, [r2, #8]
 8009174:	2b00      	cmp	r3, #0
 8009176:	da04      	bge.n	8009182 <__sfputc_r+0x16>
 8009178:	6994      	ldr	r4, [r2, #24]
 800917a:	42a3      	cmp	r3, r4
 800917c:	db07      	blt.n	800918e <__sfputc_r+0x22>
 800917e:	290a      	cmp	r1, #10
 8009180:	d005      	beq.n	800918e <__sfputc_r+0x22>
 8009182:	6813      	ldr	r3, [r2, #0]
 8009184:	1c58      	adds	r0, r3, #1
 8009186:	6010      	str	r0, [r2, #0]
 8009188:	7019      	strb	r1, [r3, #0]
 800918a:	0008      	movs	r0, r1
 800918c:	bd10      	pop	{r4, pc}
 800918e:	f000 f94f 	bl	8009430 <__swbuf_r>
 8009192:	0001      	movs	r1, r0
 8009194:	e7f9      	b.n	800918a <__sfputc_r+0x1e>

08009196 <__sfputs_r>:
 8009196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009198:	0006      	movs	r6, r0
 800919a:	000f      	movs	r7, r1
 800919c:	0014      	movs	r4, r2
 800919e:	18d5      	adds	r5, r2, r3
 80091a0:	42ac      	cmp	r4, r5
 80091a2:	d101      	bne.n	80091a8 <__sfputs_r+0x12>
 80091a4:	2000      	movs	r0, #0
 80091a6:	e007      	b.n	80091b8 <__sfputs_r+0x22>
 80091a8:	7821      	ldrb	r1, [r4, #0]
 80091aa:	003a      	movs	r2, r7
 80091ac:	0030      	movs	r0, r6
 80091ae:	f7ff ffdd 	bl	800916c <__sfputc_r>
 80091b2:	3401      	adds	r4, #1
 80091b4:	1c43      	adds	r3, r0, #1
 80091b6:	d1f3      	bne.n	80091a0 <__sfputs_r+0xa>
 80091b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091bc <_vfiprintf_r>:
 80091bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091be:	b0a1      	sub	sp, #132	; 0x84
 80091c0:	0006      	movs	r6, r0
 80091c2:	000c      	movs	r4, r1
 80091c4:	001f      	movs	r7, r3
 80091c6:	9203      	str	r2, [sp, #12]
 80091c8:	2800      	cmp	r0, #0
 80091ca:	d004      	beq.n	80091d6 <_vfiprintf_r+0x1a>
 80091cc:	6983      	ldr	r3, [r0, #24]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d101      	bne.n	80091d6 <_vfiprintf_r+0x1a>
 80091d2:	f000 fb3f 	bl	8009854 <__sinit>
 80091d6:	4b8e      	ldr	r3, [pc, #568]	; (8009410 <_vfiprintf_r+0x254>)
 80091d8:	429c      	cmp	r4, r3
 80091da:	d11c      	bne.n	8009216 <_vfiprintf_r+0x5a>
 80091dc:	6874      	ldr	r4, [r6, #4]
 80091de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091e0:	07db      	lsls	r3, r3, #31
 80091e2:	d405      	bmi.n	80091f0 <_vfiprintf_r+0x34>
 80091e4:	89a3      	ldrh	r3, [r4, #12]
 80091e6:	059b      	lsls	r3, r3, #22
 80091e8:	d402      	bmi.n	80091f0 <_vfiprintf_r+0x34>
 80091ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091ec:	f000 fbd3 	bl	8009996 <__retarget_lock_acquire_recursive>
 80091f0:	89a3      	ldrh	r3, [r4, #12]
 80091f2:	071b      	lsls	r3, r3, #28
 80091f4:	d502      	bpl.n	80091fc <_vfiprintf_r+0x40>
 80091f6:	6923      	ldr	r3, [r4, #16]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d11d      	bne.n	8009238 <_vfiprintf_r+0x7c>
 80091fc:	0021      	movs	r1, r4
 80091fe:	0030      	movs	r0, r6
 8009200:	f000 f97a 	bl	80094f8 <__swsetup_r>
 8009204:	2800      	cmp	r0, #0
 8009206:	d017      	beq.n	8009238 <_vfiprintf_r+0x7c>
 8009208:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800920a:	07db      	lsls	r3, r3, #31
 800920c:	d50d      	bpl.n	800922a <_vfiprintf_r+0x6e>
 800920e:	2001      	movs	r0, #1
 8009210:	4240      	negs	r0, r0
 8009212:	b021      	add	sp, #132	; 0x84
 8009214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009216:	4b7f      	ldr	r3, [pc, #508]	; (8009414 <_vfiprintf_r+0x258>)
 8009218:	429c      	cmp	r4, r3
 800921a:	d101      	bne.n	8009220 <_vfiprintf_r+0x64>
 800921c:	68b4      	ldr	r4, [r6, #8]
 800921e:	e7de      	b.n	80091de <_vfiprintf_r+0x22>
 8009220:	4b7d      	ldr	r3, [pc, #500]	; (8009418 <_vfiprintf_r+0x25c>)
 8009222:	429c      	cmp	r4, r3
 8009224:	d1db      	bne.n	80091de <_vfiprintf_r+0x22>
 8009226:	68f4      	ldr	r4, [r6, #12]
 8009228:	e7d9      	b.n	80091de <_vfiprintf_r+0x22>
 800922a:	89a3      	ldrh	r3, [r4, #12]
 800922c:	059b      	lsls	r3, r3, #22
 800922e:	d4ee      	bmi.n	800920e <_vfiprintf_r+0x52>
 8009230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009232:	f000 fbb1 	bl	8009998 <__retarget_lock_release_recursive>
 8009236:	e7ea      	b.n	800920e <_vfiprintf_r+0x52>
 8009238:	2300      	movs	r3, #0
 800923a:	ad08      	add	r5, sp, #32
 800923c:	616b      	str	r3, [r5, #20]
 800923e:	3320      	adds	r3, #32
 8009240:	766b      	strb	r3, [r5, #25]
 8009242:	3310      	adds	r3, #16
 8009244:	76ab      	strb	r3, [r5, #26]
 8009246:	9707      	str	r7, [sp, #28]
 8009248:	9f03      	ldr	r7, [sp, #12]
 800924a:	783b      	ldrb	r3, [r7, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d001      	beq.n	8009254 <_vfiprintf_r+0x98>
 8009250:	2b25      	cmp	r3, #37	; 0x25
 8009252:	d14e      	bne.n	80092f2 <_vfiprintf_r+0x136>
 8009254:	9b03      	ldr	r3, [sp, #12]
 8009256:	1afb      	subs	r3, r7, r3
 8009258:	9305      	str	r3, [sp, #20]
 800925a:	9b03      	ldr	r3, [sp, #12]
 800925c:	429f      	cmp	r7, r3
 800925e:	d00d      	beq.n	800927c <_vfiprintf_r+0xc0>
 8009260:	9b05      	ldr	r3, [sp, #20]
 8009262:	0021      	movs	r1, r4
 8009264:	0030      	movs	r0, r6
 8009266:	9a03      	ldr	r2, [sp, #12]
 8009268:	f7ff ff95 	bl	8009196 <__sfputs_r>
 800926c:	1c43      	adds	r3, r0, #1
 800926e:	d100      	bne.n	8009272 <_vfiprintf_r+0xb6>
 8009270:	e0b5      	b.n	80093de <_vfiprintf_r+0x222>
 8009272:	696a      	ldr	r2, [r5, #20]
 8009274:	9b05      	ldr	r3, [sp, #20]
 8009276:	4694      	mov	ip, r2
 8009278:	4463      	add	r3, ip
 800927a:	616b      	str	r3, [r5, #20]
 800927c:	783b      	ldrb	r3, [r7, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d100      	bne.n	8009284 <_vfiprintf_r+0xc8>
 8009282:	e0ac      	b.n	80093de <_vfiprintf_r+0x222>
 8009284:	2201      	movs	r2, #1
 8009286:	1c7b      	adds	r3, r7, #1
 8009288:	9303      	str	r3, [sp, #12]
 800928a:	2300      	movs	r3, #0
 800928c:	4252      	negs	r2, r2
 800928e:	606a      	str	r2, [r5, #4]
 8009290:	a904      	add	r1, sp, #16
 8009292:	3254      	adds	r2, #84	; 0x54
 8009294:	1852      	adds	r2, r2, r1
 8009296:	602b      	str	r3, [r5, #0]
 8009298:	60eb      	str	r3, [r5, #12]
 800929a:	60ab      	str	r3, [r5, #8]
 800929c:	7013      	strb	r3, [r2, #0]
 800929e:	65ab      	str	r3, [r5, #88]	; 0x58
 80092a0:	9b03      	ldr	r3, [sp, #12]
 80092a2:	2205      	movs	r2, #5
 80092a4:	7819      	ldrb	r1, [r3, #0]
 80092a6:	485d      	ldr	r0, [pc, #372]	; (800941c <_vfiprintf_r+0x260>)
 80092a8:	f7ff f902 	bl	80084b0 <memchr>
 80092ac:	9b03      	ldr	r3, [sp, #12]
 80092ae:	1c5f      	adds	r7, r3, #1
 80092b0:	2800      	cmp	r0, #0
 80092b2:	d120      	bne.n	80092f6 <_vfiprintf_r+0x13a>
 80092b4:	682a      	ldr	r2, [r5, #0]
 80092b6:	06d3      	lsls	r3, r2, #27
 80092b8:	d504      	bpl.n	80092c4 <_vfiprintf_r+0x108>
 80092ba:	2353      	movs	r3, #83	; 0x53
 80092bc:	a904      	add	r1, sp, #16
 80092be:	185b      	adds	r3, r3, r1
 80092c0:	2120      	movs	r1, #32
 80092c2:	7019      	strb	r1, [r3, #0]
 80092c4:	0713      	lsls	r3, r2, #28
 80092c6:	d504      	bpl.n	80092d2 <_vfiprintf_r+0x116>
 80092c8:	2353      	movs	r3, #83	; 0x53
 80092ca:	a904      	add	r1, sp, #16
 80092cc:	185b      	adds	r3, r3, r1
 80092ce:	212b      	movs	r1, #43	; 0x2b
 80092d0:	7019      	strb	r1, [r3, #0]
 80092d2:	9b03      	ldr	r3, [sp, #12]
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	2b2a      	cmp	r3, #42	; 0x2a
 80092d8:	d016      	beq.n	8009308 <_vfiprintf_r+0x14c>
 80092da:	2100      	movs	r1, #0
 80092dc:	68eb      	ldr	r3, [r5, #12]
 80092de:	9f03      	ldr	r7, [sp, #12]
 80092e0:	783a      	ldrb	r2, [r7, #0]
 80092e2:	1c78      	adds	r0, r7, #1
 80092e4:	3a30      	subs	r2, #48	; 0x30
 80092e6:	4684      	mov	ip, r0
 80092e8:	2a09      	cmp	r2, #9
 80092ea:	d94f      	bls.n	800938c <_vfiprintf_r+0x1d0>
 80092ec:	2900      	cmp	r1, #0
 80092ee:	d111      	bne.n	8009314 <_vfiprintf_r+0x158>
 80092f0:	e017      	b.n	8009322 <_vfiprintf_r+0x166>
 80092f2:	3701      	adds	r7, #1
 80092f4:	e7a9      	b.n	800924a <_vfiprintf_r+0x8e>
 80092f6:	4b49      	ldr	r3, [pc, #292]	; (800941c <_vfiprintf_r+0x260>)
 80092f8:	682a      	ldr	r2, [r5, #0]
 80092fa:	1ac0      	subs	r0, r0, r3
 80092fc:	2301      	movs	r3, #1
 80092fe:	4083      	lsls	r3, r0
 8009300:	4313      	orrs	r3, r2
 8009302:	602b      	str	r3, [r5, #0]
 8009304:	9703      	str	r7, [sp, #12]
 8009306:	e7cb      	b.n	80092a0 <_vfiprintf_r+0xe4>
 8009308:	9b07      	ldr	r3, [sp, #28]
 800930a:	1d19      	adds	r1, r3, #4
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	9107      	str	r1, [sp, #28]
 8009310:	2b00      	cmp	r3, #0
 8009312:	db01      	blt.n	8009318 <_vfiprintf_r+0x15c>
 8009314:	930b      	str	r3, [sp, #44]	; 0x2c
 8009316:	e004      	b.n	8009322 <_vfiprintf_r+0x166>
 8009318:	425b      	negs	r3, r3
 800931a:	60eb      	str	r3, [r5, #12]
 800931c:	2302      	movs	r3, #2
 800931e:	4313      	orrs	r3, r2
 8009320:	602b      	str	r3, [r5, #0]
 8009322:	783b      	ldrb	r3, [r7, #0]
 8009324:	2b2e      	cmp	r3, #46	; 0x2e
 8009326:	d10a      	bne.n	800933e <_vfiprintf_r+0x182>
 8009328:	787b      	ldrb	r3, [r7, #1]
 800932a:	2b2a      	cmp	r3, #42	; 0x2a
 800932c:	d137      	bne.n	800939e <_vfiprintf_r+0x1e2>
 800932e:	9b07      	ldr	r3, [sp, #28]
 8009330:	3702      	adds	r7, #2
 8009332:	1d1a      	adds	r2, r3, #4
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	9207      	str	r2, [sp, #28]
 8009338:	2b00      	cmp	r3, #0
 800933a:	db2d      	blt.n	8009398 <_vfiprintf_r+0x1dc>
 800933c:	9309      	str	r3, [sp, #36]	; 0x24
 800933e:	2203      	movs	r2, #3
 8009340:	7839      	ldrb	r1, [r7, #0]
 8009342:	4837      	ldr	r0, [pc, #220]	; (8009420 <_vfiprintf_r+0x264>)
 8009344:	f7ff f8b4 	bl	80084b0 <memchr>
 8009348:	2800      	cmp	r0, #0
 800934a:	d007      	beq.n	800935c <_vfiprintf_r+0x1a0>
 800934c:	4b34      	ldr	r3, [pc, #208]	; (8009420 <_vfiprintf_r+0x264>)
 800934e:	682a      	ldr	r2, [r5, #0]
 8009350:	1ac0      	subs	r0, r0, r3
 8009352:	2340      	movs	r3, #64	; 0x40
 8009354:	4083      	lsls	r3, r0
 8009356:	4313      	orrs	r3, r2
 8009358:	3701      	adds	r7, #1
 800935a:	602b      	str	r3, [r5, #0]
 800935c:	7839      	ldrb	r1, [r7, #0]
 800935e:	1c7b      	adds	r3, r7, #1
 8009360:	2206      	movs	r2, #6
 8009362:	4830      	ldr	r0, [pc, #192]	; (8009424 <_vfiprintf_r+0x268>)
 8009364:	9303      	str	r3, [sp, #12]
 8009366:	7629      	strb	r1, [r5, #24]
 8009368:	f7ff f8a2 	bl	80084b0 <memchr>
 800936c:	2800      	cmp	r0, #0
 800936e:	d045      	beq.n	80093fc <_vfiprintf_r+0x240>
 8009370:	4b2d      	ldr	r3, [pc, #180]	; (8009428 <_vfiprintf_r+0x26c>)
 8009372:	2b00      	cmp	r3, #0
 8009374:	d127      	bne.n	80093c6 <_vfiprintf_r+0x20a>
 8009376:	2207      	movs	r2, #7
 8009378:	9b07      	ldr	r3, [sp, #28]
 800937a:	3307      	adds	r3, #7
 800937c:	4393      	bics	r3, r2
 800937e:	3308      	adds	r3, #8
 8009380:	9307      	str	r3, [sp, #28]
 8009382:	696b      	ldr	r3, [r5, #20]
 8009384:	9a04      	ldr	r2, [sp, #16]
 8009386:	189b      	adds	r3, r3, r2
 8009388:	616b      	str	r3, [r5, #20]
 800938a:	e75d      	b.n	8009248 <_vfiprintf_r+0x8c>
 800938c:	210a      	movs	r1, #10
 800938e:	434b      	muls	r3, r1
 8009390:	4667      	mov	r7, ip
 8009392:	189b      	adds	r3, r3, r2
 8009394:	3909      	subs	r1, #9
 8009396:	e7a3      	b.n	80092e0 <_vfiprintf_r+0x124>
 8009398:	2301      	movs	r3, #1
 800939a:	425b      	negs	r3, r3
 800939c:	e7ce      	b.n	800933c <_vfiprintf_r+0x180>
 800939e:	2300      	movs	r3, #0
 80093a0:	001a      	movs	r2, r3
 80093a2:	3701      	adds	r7, #1
 80093a4:	606b      	str	r3, [r5, #4]
 80093a6:	7839      	ldrb	r1, [r7, #0]
 80093a8:	1c78      	adds	r0, r7, #1
 80093aa:	3930      	subs	r1, #48	; 0x30
 80093ac:	4684      	mov	ip, r0
 80093ae:	2909      	cmp	r1, #9
 80093b0:	d903      	bls.n	80093ba <_vfiprintf_r+0x1fe>
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d0c3      	beq.n	800933e <_vfiprintf_r+0x182>
 80093b6:	9209      	str	r2, [sp, #36]	; 0x24
 80093b8:	e7c1      	b.n	800933e <_vfiprintf_r+0x182>
 80093ba:	230a      	movs	r3, #10
 80093bc:	435a      	muls	r2, r3
 80093be:	4667      	mov	r7, ip
 80093c0:	1852      	adds	r2, r2, r1
 80093c2:	3b09      	subs	r3, #9
 80093c4:	e7ef      	b.n	80093a6 <_vfiprintf_r+0x1ea>
 80093c6:	ab07      	add	r3, sp, #28
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	0022      	movs	r2, r4
 80093cc:	0029      	movs	r1, r5
 80093ce:	0030      	movs	r0, r6
 80093d0:	4b16      	ldr	r3, [pc, #88]	; (800942c <_vfiprintf_r+0x270>)
 80093d2:	f7fd fdc5 	bl	8006f60 <_printf_float>
 80093d6:	9004      	str	r0, [sp, #16]
 80093d8:	9b04      	ldr	r3, [sp, #16]
 80093da:	3301      	adds	r3, #1
 80093dc:	d1d1      	bne.n	8009382 <_vfiprintf_r+0x1c6>
 80093de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093e0:	07db      	lsls	r3, r3, #31
 80093e2:	d405      	bmi.n	80093f0 <_vfiprintf_r+0x234>
 80093e4:	89a3      	ldrh	r3, [r4, #12]
 80093e6:	059b      	lsls	r3, r3, #22
 80093e8:	d402      	bmi.n	80093f0 <_vfiprintf_r+0x234>
 80093ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093ec:	f000 fad4 	bl	8009998 <__retarget_lock_release_recursive>
 80093f0:	89a3      	ldrh	r3, [r4, #12]
 80093f2:	065b      	lsls	r3, r3, #25
 80093f4:	d500      	bpl.n	80093f8 <_vfiprintf_r+0x23c>
 80093f6:	e70a      	b.n	800920e <_vfiprintf_r+0x52>
 80093f8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80093fa:	e70a      	b.n	8009212 <_vfiprintf_r+0x56>
 80093fc:	ab07      	add	r3, sp, #28
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	0022      	movs	r2, r4
 8009402:	0029      	movs	r1, r5
 8009404:	0030      	movs	r0, r6
 8009406:	4b09      	ldr	r3, [pc, #36]	; (800942c <_vfiprintf_r+0x270>)
 8009408:	f7fe f868 	bl	80074dc <_printf_i>
 800940c:	e7e3      	b.n	80093d6 <_vfiprintf_r+0x21a>
 800940e:	46c0      	nop			; (mov r8, r8)
 8009410:	0800a13c 	.word	0x0800a13c
 8009414:	0800a15c 	.word	0x0800a15c
 8009418:	0800a11c 	.word	0x0800a11c
 800941c:	08009fc4 	.word	0x08009fc4
 8009420:	08009fca 	.word	0x08009fca
 8009424:	08009fce 	.word	0x08009fce
 8009428:	08006f61 	.word	0x08006f61
 800942c:	08009197 	.word	0x08009197

08009430 <__swbuf_r>:
 8009430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009432:	0005      	movs	r5, r0
 8009434:	000e      	movs	r6, r1
 8009436:	0014      	movs	r4, r2
 8009438:	2800      	cmp	r0, #0
 800943a:	d004      	beq.n	8009446 <__swbuf_r+0x16>
 800943c:	6983      	ldr	r3, [r0, #24]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <__swbuf_r+0x16>
 8009442:	f000 fa07 	bl	8009854 <__sinit>
 8009446:	4b22      	ldr	r3, [pc, #136]	; (80094d0 <__swbuf_r+0xa0>)
 8009448:	429c      	cmp	r4, r3
 800944a:	d12e      	bne.n	80094aa <__swbuf_r+0x7a>
 800944c:	686c      	ldr	r4, [r5, #4]
 800944e:	69a3      	ldr	r3, [r4, #24]
 8009450:	60a3      	str	r3, [r4, #8]
 8009452:	89a3      	ldrh	r3, [r4, #12]
 8009454:	071b      	lsls	r3, r3, #28
 8009456:	d532      	bpl.n	80094be <__swbuf_r+0x8e>
 8009458:	6923      	ldr	r3, [r4, #16]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d02f      	beq.n	80094be <__swbuf_r+0x8e>
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	6922      	ldr	r2, [r4, #16]
 8009462:	b2f7      	uxtb	r7, r6
 8009464:	1a98      	subs	r0, r3, r2
 8009466:	6963      	ldr	r3, [r4, #20]
 8009468:	b2f6      	uxtb	r6, r6
 800946a:	4283      	cmp	r3, r0
 800946c:	dc05      	bgt.n	800947a <__swbuf_r+0x4a>
 800946e:	0021      	movs	r1, r4
 8009470:	0028      	movs	r0, r5
 8009472:	f000 f94d 	bl	8009710 <_fflush_r>
 8009476:	2800      	cmp	r0, #0
 8009478:	d127      	bne.n	80094ca <__swbuf_r+0x9a>
 800947a:	68a3      	ldr	r3, [r4, #8]
 800947c:	3001      	adds	r0, #1
 800947e:	3b01      	subs	r3, #1
 8009480:	60a3      	str	r3, [r4, #8]
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	1c5a      	adds	r2, r3, #1
 8009486:	6022      	str	r2, [r4, #0]
 8009488:	701f      	strb	r7, [r3, #0]
 800948a:	6963      	ldr	r3, [r4, #20]
 800948c:	4283      	cmp	r3, r0
 800948e:	d004      	beq.n	800949a <__swbuf_r+0x6a>
 8009490:	89a3      	ldrh	r3, [r4, #12]
 8009492:	07db      	lsls	r3, r3, #31
 8009494:	d507      	bpl.n	80094a6 <__swbuf_r+0x76>
 8009496:	2e0a      	cmp	r6, #10
 8009498:	d105      	bne.n	80094a6 <__swbuf_r+0x76>
 800949a:	0021      	movs	r1, r4
 800949c:	0028      	movs	r0, r5
 800949e:	f000 f937 	bl	8009710 <_fflush_r>
 80094a2:	2800      	cmp	r0, #0
 80094a4:	d111      	bne.n	80094ca <__swbuf_r+0x9a>
 80094a6:	0030      	movs	r0, r6
 80094a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094aa:	4b0a      	ldr	r3, [pc, #40]	; (80094d4 <__swbuf_r+0xa4>)
 80094ac:	429c      	cmp	r4, r3
 80094ae:	d101      	bne.n	80094b4 <__swbuf_r+0x84>
 80094b0:	68ac      	ldr	r4, [r5, #8]
 80094b2:	e7cc      	b.n	800944e <__swbuf_r+0x1e>
 80094b4:	4b08      	ldr	r3, [pc, #32]	; (80094d8 <__swbuf_r+0xa8>)
 80094b6:	429c      	cmp	r4, r3
 80094b8:	d1c9      	bne.n	800944e <__swbuf_r+0x1e>
 80094ba:	68ec      	ldr	r4, [r5, #12]
 80094bc:	e7c7      	b.n	800944e <__swbuf_r+0x1e>
 80094be:	0021      	movs	r1, r4
 80094c0:	0028      	movs	r0, r5
 80094c2:	f000 f819 	bl	80094f8 <__swsetup_r>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d0c9      	beq.n	800945e <__swbuf_r+0x2e>
 80094ca:	2601      	movs	r6, #1
 80094cc:	4276      	negs	r6, r6
 80094ce:	e7ea      	b.n	80094a6 <__swbuf_r+0x76>
 80094d0:	0800a13c 	.word	0x0800a13c
 80094d4:	0800a15c 	.word	0x0800a15c
 80094d8:	0800a11c 	.word	0x0800a11c

080094dc <__ascii_wctomb>:
 80094dc:	0003      	movs	r3, r0
 80094de:	1e08      	subs	r0, r1, #0
 80094e0:	d005      	beq.n	80094ee <__ascii_wctomb+0x12>
 80094e2:	2aff      	cmp	r2, #255	; 0xff
 80094e4:	d904      	bls.n	80094f0 <__ascii_wctomb+0x14>
 80094e6:	228a      	movs	r2, #138	; 0x8a
 80094e8:	2001      	movs	r0, #1
 80094ea:	601a      	str	r2, [r3, #0]
 80094ec:	4240      	negs	r0, r0
 80094ee:	4770      	bx	lr
 80094f0:	2001      	movs	r0, #1
 80094f2:	700a      	strb	r2, [r1, #0]
 80094f4:	e7fb      	b.n	80094ee <__ascii_wctomb+0x12>
	...

080094f8 <__swsetup_r>:
 80094f8:	4b37      	ldr	r3, [pc, #220]	; (80095d8 <__swsetup_r+0xe0>)
 80094fa:	b570      	push	{r4, r5, r6, lr}
 80094fc:	681d      	ldr	r5, [r3, #0]
 80094fe:	0006      	movs	r6, r0
 8009500:	000c      	movs	r4, r1
 8009502:	2d00      	cmp	r5, #0
 8009504:	d005      	beq.n	8009512 <__swsetup_r+0x1a>
 8009506:	69ab      	ldr	r3, [r5, #24]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d102      	bne.n	8009512 <__swsetup_r+0x1a>
 800950c:	0028      	movs	r0, r5
 800950e:	f000 f9a1 	bl	8009854 <__sinit>
 8009512:	4b32      	ldr	r3, [pc, #200]	; (80095dc <__swsetup_r+0xe4>)
 8009514:	429c      	cmp	r4, r3
 8009516:	d10f      	bne.n	8009538 <__swsetup_r+0x40>
 8009518:	686c      	ldr	r4, [r5, #4]
 800951a:	230c      	movs	r3, #12
 800951c:	5ee2      	ldrsh	r2, [r4, r3]
 800951e:	b293      	uxth	r3, r2
 8009520:	0711      	lsls	r1, r2, #28
 8009522:	d42d      	bmi.n	8009580 <__swsetup_r+0x88>
 8009524:	06d9      	lsls	r1, r3, #27
 8009526:	d411      	bmi.n	800954c <__swsetup_r+0x54>
 8009528:	2309      	movs	r3, #9
 800952a:	2001      	movs	r0, #1
 800952c:	6033      	str	r3, [r6, #0]
 800952e:	3337      	adds	r3, #55	; 0x37
 8009530:	4313      	orrs	r3, r2
 8009532:	81a3      	strh	r3, [r4, #12]
 8009534:	4240      	negs	r0, r0
 8009536:	bd70      	pop	{r4, r5, r6, pc}
 8009538:	4b29      	ldr	r3, [pc, #164]	; (80095e0 <__swsetup_r+0xe8>)
 800953a:	429c      	cmp	r4, r3
 800953c:	d101      	bne.n	8009542 <__swsetup_r+0x4a>
 800953e:	68ac      	ldr	r4, [r5, #8]
 8009540:	e7eb      	b.n	800951a <__swsetup_r+0x22>
 8009542:	4b28      	ldr	r3, [pc, #160]	; (80095e4 <__swsetup_r+0xec>)
 8009544:	429c      	cmp	r4, r3
 8009546:	d1e8      	bne.n	800951a <__swsetup_r+0x22>
 8009548:	68ec      	ldr	r4, [r5, #12]
 800954a:	e7e6      	b.n	800951a <__swsetup_r+0x22>
 800954c:	075b      	lsls	r3, r3, #29
 800954e:	d513      	bpl.n	8009578 <__swsetup_r+0x80>
 8009550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009552:	2900      	cmp	r1, #0
 8009554:	d008      	beq.n	8009568 <__swsetup_r+0x70>
 8009556:	0023      	movs	r3, r4
 8009558:	3344      	adds	r3, #68	; 0x44
 800955a:	4299      	cmp	r1, r3
 800955c:	d002      	beq.n	8009564 <__swsetup_r+0x6c>
 800955e:	0030      	movs	r0, r6
 8009560:	f7ff fb5e 	bl	8008c20 <_free_r>
 8009564:	2300      	movs	r3, #0
 8009566:	6363      	str	r3, [r4, #52]	; 0x34
 8009568:	2224      	movs	r2, #36	; 0x24
 800956a:	89a3      	ldrh	r3, [r4, #12]
 800956c:	4393      	bics	r3, r2
 800956e:	81a3      	strh	r3, [r4, #12]
 8009570:	2300      	movs	r3, #0
 8009572:	6063      	str	r3, [r4, #4]
 8009574:	6923      	ldr	r3, [r4, #16]
 8009576:	6023      	str	r3, [r4, #0]
 8009578:	2308      	movs	r3, #8
 800957a:	89a2      	ldrh	r2, [r4, #12]
 800957c:	4313      	orrs	r3, r2
 800957e:	81a3      	strh	r3, [r4, #12]
 8009580:	6923      	ldr	r3, [r4, #16]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10b      	bne.n	800959e <__swsetup_r+0xa6>
 8009586:	21a0      	movs	r1, #160	; 0xa0
 8009588:	2280      	movs	r2, #128	; 0x80
 800958a:	89a3      	ldrh	r3, [r4, #12]
 800958c:	0089      	lsls	r1, r1, #2
 800958e:	0092      	lsls	r2, r2, #2
 8009590:	400b      	ands	r3, r1
 8009592:	4293      	cmp	r3, r2
 8009594:	d003      	beq.n	800959e <__swsetup_r+0xa6>
 8009596:	0021      	movs	r1, r4
 8009598:	0030      	movs	r0, r6
 800959a:	f000 fa27 	bl	80099ec <__smakebuf_r>
 800959e:	220c      	movs	r2, #12
 80095a0:	5ea3      	ldrsh	r3, [r4, r2]
 80095a2:	2001      	movs	r0, #1
 80095a4:	001a      	movs	r2, r3
 80095a6:	b299      	uxth	r1, r3
 80095a8:	4002      	ands	r2, r0
 80095aa:	4203      	tst	r3, r0
 80095ac:	d00f      	beq.n	80095ce <__swsetup_r+0xd6>
 80095ae:	2200      	movs	r2, #0
 80095b0:	60a2      	str	r2, [r4, #8]
 80095b2:	6962      	ldr	r2, [r4, #20]
 80095b4:	4252      	negs	r2, r2
 80095b6:	61a2      	str	r2, [r4, #24]
 80095b8:	2000      	movs	r0, #0
 80095ba:	6922      	ldr	r2, [r4, #16]
 80095bc:	4282      	cmp	r2, r0
 80095be:	d1ba      	bne.n	8009536 <__swsetup_r+0x3e>
 80095c0:	060a      	lsls	r2, r1, #24
 80095c2:	d5b8      	bpl.n	8009536 <__swsetup_r+0x3e>
 80095c4:	2240      	movs	r2, #64	; 0x40
 80095c6:	4313      	orrs	r3, r2
 80095c8:	81a3      	strh	r3, [r4, #12]
 80095ca:	3801      	subs	r0, #1
 80095cc:	e7b3      	b.n	8009536 <__swsetup_r+0x3e>
 80095ce:	0788      	lsls	r0, r1, #30
 80095d0:	d400      	bmi.n	80095d4 <__swsetup_r+0xdc>
 80095d2:	6962      	ldr	r2, [r4, #20]
 80095d4:	60a2      	str	r2, [r4, #8]
 80095d6:	e7ef      	b.n	80095b8 <__swsetup_r+0xc0>
 80095d8:	20000044 	.word	0x20000044
 80095dc:	0800a13c 	.word	0x0800a13c
 80095e0:	0800a15c 	.word	0x0800a15c
 80095e4:	0800a11c 	.word	0x0800a11c

080095e8 <abort>:
 80095e8:	2006      	movs	r0, #6
 80095ea:	b510      	push	{r4, lr}
 80095ec:	f000 fa74 	bl	8009ad8 <raise>
 80095f0:	2001      	movs	r0, #1
 80095f2:	f7fa fa79 	bl	8003ae8 <_exit>
	...

080095f8 <__sflush_r>:
 80095f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095fa:	898b      	ldrh	r3, [r1, #12]
 80095fc:	0005      	movs	r5, r0
 80095fe:	000c      	movs	r4, r1
 8009600:	071a      	lsls	r2, r3, #28
 8009602:	d45f      	bmi.n	80096c4 <__sflush_r+0xcc>
 8009604:	684a      	ldr	r2, [r1, #4]
 8009606:	2a00      	cmp	r2, #0
 8009608:	dc04      	bgt.n	8009614 <__sflush_r+0x1c>
 800960a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800960c:	2a00      	cmp	r2, #0
 800960e:	dc01      	bgt.n	8009614 <__sflush_r+0x1c>
 8009610:	2000      	movs	r0, #0
 8009612:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009614:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009616:	2f00      	cmp	r7, #0
 8009618:	d0fa      	beq.n	8009610 <__sflush_r+0x18>
 800961a:	2200      	movs	r2, #0
 800961c:	2180      	movs	r1, #128	; 0x80
 800961e:	682e      	ldr	r6, [r5, #0]
 8009620:	602a      	str	r2, [r5, #0]
 8009622:	001a      	movs	r2, r3
 8009624:	0149      	lsls	r1, r1, #5
 8009626:	400a      	ands	r2, r1
 8009628:	420b      	tst	r3, r1
 800962a:	d034      	beq.n	8009696 <__sflush_r+0x9e>
 800962c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800962e:	89a3      	ldrh	r3, [r4, #12]
 8009630:	075b      	lsls	r3, r3, #29
 8009632:	d506      	bpl.n	8009642 <__sflush_r+0x4a>
 8009634:	6863      	ldr	r3, [r4, #4]
 8009636:	1ac0      	subs	r0, r0, r3
 8009638:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800963a:	2b00      	cmp	r3, #0
 800963c:	d001      	beq.n	8009642 <__sflush_r+0x4a>
 800963e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009640:	1ac0      	subs	r0, r0, r3
 8009642:	0002      	movs	r2, r0
 8009644:	6a21      	ldr	r1, [r4, #32]
 8009646:	2300      	movs	r3, #0
 8009648:	0028      	movs	r0, r5
 800964a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800964c:	47b8      	blx	r7
 800964e:	89a1      	ldrh	r1, [r4, #12]
 8009650:	1c43      	adds	r3, r0, #1
 8009652:	d106      	bne.n	8009662 <__sflush_r+0x6a>
 8009654:	682b      	ldr	r3, [r5, #0]
 8009656:	2b1d      	cmp	r3, #29
 8009658:	d831      	bhi.n	80096be <__sflush_r+0xc6>
 800965a:	4a2c      	ldr	r2, [pc, #176]	; (800970c <__sflush_r+0x114>)
 800965c:	40da      	lsrs	r2, r3
 800965e:	07d3      	lsls	r3, r2, #31
 8009660:	d52d      	bpl.n	80096be <__sflush_r+0xc6>
 8009662:	2300      	movs	r3, #0
 8009664:	6063      	str	r3, [r4, #4]
 8009666:	6923      	ldr	r3, [r4, #16]
 8009668:	6023      	str	r3, [r4, #0]
 800966a:	04cb      	lsls	r3, r1, #19
 800966c:	d505      	bpl.n	800967a <__sflush_r+0x82>
 800966e:	1c43      	adds	r3, r0, #1
 8009670:	d102      	bne.n	8009678 <__sflush_r+0x80>
 8009672:	682b      	ldr	r3, [r5, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d100      	bne.n	800967a <__sflush_r+0x82>
 8009678:	6560      	str	r0, [r4, #84]	; 0x54
 800967a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800967c:	602e      	str	r6, [r5, #0]
 800967e:	2900      	cmp	r1, #0
 8009680:	d0c6      	beq.n	8009610 <__sflush_r+0x18>
 8009682:	0023      	movs	r3, r4
 8009684:	3344      	adds	r3, #68	; 0x44
 8009686:	4299      	cmp	r1, r3
 8009688:	d002      	beq.n	8009690 <__sflush_r+0x98>
 800968a:	0028      	movs	r0, r5
 800968c:	f7ff fac8 	bl	8008c20 <_free_r>
 8009690:	2000      	movs	r0, #0
 8009692:	6360      	str	r0, [r4, #52]	; 0x34
 8009694:	e7bd      	b.n	8009612 <__sflush_r+0x1a>
 8009696:	2301      	movs	r3, #1
 8009698:	0028      	movs	r0, r5
 800969a:	6a21      	ldr	r1, [r4, #32]
 800969c:	47b8      	blx	r7
 800969e:	1c43      	adds	r3, r0, #1
 80096a0:	d1c5      	bne.n	800962e <__sflush_r+0x36>
 80096a2:	682b      	ldr	r3, [r5, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d0c2      	beq.n	800962e <__sflush_r+0x36>
 80096a8:	2b1d      	cmp	r3, #29
 80096aa:	d001      	beq.n	80096b0 <__sflush_r+0xb8>
 80096ac:	2b16      	cmp	r3, #22
 80096ae:	d101      	bne.n	80096b4 <__sflush_r+0xbc>
 80096b0:	602e      	str	r6, [r5, #0]
 80096b2:	e7ad      	b.n	8009610 <__sflush_r+0x18>
 80096b4:	2340      	movs	r3, #64	; 0x40
 80096b6:	89a2      	ldrh	r2, [r4, #12]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	81a3      	strh	r3, [r4, #12]
 80096bc:	e7a9      	b.n	8009612 <__sflush_r+0x1a>
 80096be:	2340      	movs	r3, #64	; 0x40
 80096c0:	430b      	orrs	r3, r1
 80096c2:	e7fa      	b.n	80096ba <__sflush_r+0xc2>
 80096c4:	690f      	ldr	r7, [r1, #16]
 80096c6:	2f00      	cmp	r7, #0
 80096c8:	d0a2      	beq.n	8009610 <__sflush_r+0x18>
 80096ca:	680a      	ldr	r2, [r1, #0]
 80096cc:	600f      	str	r7, [r1, #0]
 80096ce:	1bd2      	subs	r2, r2, r7
 80096d0:	9201      	str	r2, [sp, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	079b      	lsls	r3, r3, #30
 80096d6:	d100      	bne.n	80096da <__sflush_r+0xe2>
 80096d8:	694a      	ldr	r2, [r1, #20]
 80096da:	60a2      	str	r2, [r4, #8]
 80096dc:	9b01      	ldr	r3, [sp, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	dc00      	bgt.n	80096e4 <__sflush_r+0xec>
 80096e2:	e795      	b.n	8009610 <__sflush_r+0x18>
 80096e4:	003a      	movs	r2, r7
 80096e6:	0028      	movs	r0, r5
 80096e8:	9b01      	ldr	r3, [sp, #4]
 80096ea:	6a21      	ldr	r1, [r4, #32]
 80096ec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096ee:	47b0      	blx	r6
 80096f0:	2800      	cmp	r0, #0
 80096f2:	dc06      	bgt.n	8009702 <__sflush_r+0x10a>
 80096f4:	2340      	movs	r3, #64	; 0x40
 80096f6:	2001      	movs	r0, #1
 80096f8:	89a2      	ldrh	r2, [r4, #12]
 80096fa:	4240      	negs	r0, r0
 80096fc:	4313      	orrs	r3, r2
 80096fe:	81a3      	strh	r3, [r4, #12]
 8009700:	e787      	b.n	8009612 <__sflush_r+0x1a>
 8009702:	9b01      	ldr	r3, [sp, #4]
 8009704:	183f      	adds	r7, r7, r0
 8009706:	1a1b      	subs	r3, r3, r0
 8009708:	9301      	str	r3, [sp, #4]
 800970a:	e7e7      	b.n	80096dc <__sflush_r+0xe4>
 800970c:	20400001 	.word	0x20400001

08009710 <_fflush_r>:
 8009710:	690b      	ldr	r3, [r1, #16]
 8009712:	b570      	push	{r4, r5, r6, lr}
 8009714:	0005      	movs	r5, r0
 8009716:	000c      	movs	r4, r1
 8009718:	2b00      	cmp	r3, #0
 800971a:	d102      	bne.n	8009722 <_fflush_r+0x12>
 800971c:	2500      	movs	r5, #0
 800971e:	0028      	movs	r0, r5
 8009720:	bd70      	pop	{r4, r5, r6, pc}
 8009722:	2800      	cmp	r0, #0
 8009724:	d004      	beq.n	8009730 <_fflush_r+0x20>
 8009726:	6983      	ldr	r3, [r0, #24]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d101      	bne.n	8009730 <_fflush_r+0x20>
 800972c:	f000 f892 	bl	8009854 <__sinit>
 8009730:	4b14      	ldr	r3, [pc, #80]	; (8009784 <_fflush_r+0x74>)
 8009732:	429c      	cmp	r4, r3
 8009734:	d11b      	bne.n	800976e <_fflush_r+0x5e>
 8009736:	686c      	ldr	r4, [r5, #4]
 8009738:	220c      	movs	r2, #12
 800973a:	5ea3      	ldrsh	r3, [r4, r2]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d0ed      	beq.n	800971c <_fflush_r+0xc>
 8009740:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009742:	07d2      	lsls	r2, r2, #31
 8009744:	d404      	bmi.n	8009750 <_fflush_r+0x40>
 8009746:	059b      	lsls	r3, r3, #22
 8009748:	d402      	bmi.n	8009750 <_fflush_r+0x40>
 800974a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800974c:	f000 f923 	bl	8009996 <__retarget_lock_acquire_recursive>
 8009750:	0028      	movs	r0, r5
 8009752:	0021      	movs	r1, r4
 8009754:	f7ff ff50 	bl	80095f8 <__sflush_r>
 8009758:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800975a:	0005      	movs	r5, r0
 800975c:	07db      	lsls	r3, r3, #31
 800975e:	d4de      	bmi.n	800971e <_fflush_r+0xe>
 8009760:	89a3      	ldrh	r3, [r4, #12]
 8009762:	059b      	lsls	r3, r3, #22
 8009764:	d4db      	bmi.n	800971e <_fflush_r+0xe>
 8009766:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009768:	f000 f916 	bl	8009998 <__retarget_lock_release_recursive>
 800976c:	e7d7      	b.n	800971e <_fflush_r+0xe>
 800976e:	4b06      	ldr	r3, [pc, #24]	; (8009788 <_fflush_r+0x78>)
 8009770:	429c      	cmp	r4, r3
 8009772:	d101      	bne.n	8009778 <_fflush_r+0x68>
 8009774:	68ac      	ldr	r4, [r5, #8]
 8009776:	e7df      	b.n	8009738 <_fflush_r+0x28>
 8009778:	4b04      	ldr	r3, [pc, #16]	; (800978c <_fflush_r+0x7c>)
 800977a:	429c      	cmp	r4, r3
 800977c:	d1dc      	bne.n	8009738 <_fflush_r+0x28>
 800977e:	68ec      	ldr	r4, [r5, #12]
 8009780:	e7da      	b.n	8009738 <_fflush_r+0x28>
 8009782:	46c0      	nop			; (mov r8, r8)
 8009784:	0800a13c 	.word	0x0800a13c
 8009788:	0800a15c 	.word	0x0800a15c
 800978c:	0800a11c 	.word	0x0800a11c

08009790 <std>:
 8009790:	2300      	movs	r3, #0
 8009792:	b510      	push	{r4, lr}
 8009794:	0004      	movs	r4, r0
 8009796:	6003      	str	r3, [r0, #0]
 8009798:	6043      	str	r3, [r0, #4]
 800979a:	6083      	str	r3, [r0, #8]
 800979c:	8181      	strh	r1, [r0, #12]
 800979e:	6643      	str	r3, [r0, #100]	; 0x64
 80097a0:	0019      	movs	r1, r3
 80097a2:	81c2      	strh	r2, [r0, #14]
 80097a4:	6103      	str	r3, [r0, #16]
 80097a6:	6143      	str	r3, [r0, #20]
 80097a8:	6183      	str	r3, [r0, #24]
 80097aa:	2208      	movs	r2, #8
 80097ac:	305c      	adds	r0, #92	; 0x5c
 80097ae:	f7fd fb24 	bl	8006dfa <memset>
 80097b2:	4b05      	ldr	r3, [pc, #20]	; (80097c8 <std+0x38>)
 80097b4:	6263      	str	r3, [r4, #36]	; 0x24
 80097b6:	4b05      	ldr	r3, [pc, #20]	; (80097cc <std+0x3c>)
 80097b8:	6224      	str	r4, [r4, #32]
 80097ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80097bc:	4b04      	ldr	r3, [pc, #16]	; (80097d0 <std+0x40>)
 80097be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097c0:	4b04      	ldr	r3, [pc, #16]	; (80097d4 <std+0x44>)
 80097c2:	6323      	str	r3, [r4, #48]	; 0x30
 80097c4:	bd10      	pop	{r4, pc}
 80097c6:	46c0      	nop			; (mov r8, r8)
 80097c8:	08009b19 	.word	0x08009b19
 80097cc:	08009b41 	.word	0x08009b41
 80097d0:	08009b79 	.word	0x08009b79
 80097d4:	08009ba5 	.word	0x08009ba5

080097d8 <_cleanup_r>:
 80097d8:	b510      	push	{r4, lr}
 80097da:	4902      	ldr	r1, [pc, #8]	; (80097e4 <_cleanup_r+0xc>)
 80097dc:	f000 f8ba 	bl	8009954 <_fwalk_reent>
 80097e0:	bd10      	pop	{r4, pc}
 80097e2:	46c0      	nop			; (mov r8, r8)
 80097e4:	08009711 	.word	0x08009711

080097e8 <__sfmoreglue>:
 80097e8:	b570      	push	{r4, r5, r6, lr}
 80097ea:	2568      	movs	r5, #104	; 0x68
 80097ec:	1e4a      	subs	r2, r1, #1
 80097ee:	4355      	muls	r5, r2
 80097f0:	000e      	movs	r6, r1
 80097f2:	0029      	movs	r1, r5
 80097f4:	3174      	adds	r1, #116	; 0x74
 80097f6:	f7ff fa5d 	bl	8008cb4 <_malloc_r>
 80097fa:	1e04      	subs	r4, r0, #0
 80097fc:	d008      	beq.n	8009810 <__sfmoreglue+0x28>
 80097fe:	2100      	movs	r1, #0
 8009800:	002a      	movs	r2, r5
 8009802:	6001      	str	r1, [r0, #0]
 8009804:	6046      	str	r6, [r0, #4]
 8009806:	300c      	adds	r0, #12
 8009808:	60a0      	str	r0, [r4, #8]
 800980a:	3268      	adds	r2, #104	; 0x68
 800980c:	f7fd faf5 	bl	8006dfa <memset>
 8009810:	0020      	movs	r0, r4
 8009812:	bd70      	pop	{r4, r5, r6, pc}

08009814 <__sfp_lock_acquire>:
 8009814:	b510      	push	{r4, lr}
 8009816:	4802      	ldr	r0, [pc, #8]	; (8009820 <__sfp_lock_acquire+0xc>)
 8009818:	f000 f8bd 	bl	8009996 <__retarget_lock_acquire_recursive>
 800981c:	bd10      	pop	{r4, pc}
 800981e:	46c0      	nop			; (mov r8, r8)
 8009820:	2000047c 	.word	0x2000047c

08009824 <__sfp_lock_release>:
 8009824:	b510      	push	{r4, lr}
 8009826:	4802      	ldr	r0, [pc, #8]	; (8009830 <__sfp_lock_release+0xc>)
 8009828:	f000 f8b6 	bl	8009998 <__retarget_lock_release_recursive>
 800982c:	bd10      	pop	{r4, pc}
 800982e:	46c0      	nop			; (mov r8, r8)
 8009830:	2000047c 	.word	0x2000047c

08009834 <__sinit_lock_acquire>:
 8009834:	b510      	push	{r4, lr}
 8009836:	4802      	ldr	r0, [pc, #8]	; (8009840 <__sinit_lock_acquire+0xc>)
 8009838:	f000 f8ad 	bl	8009996 <__retarget_lock_acquire_recursive>
 800983c:	bd10      	pop	{r4, pc}
 800983e:	46c0      	nop			; (mov r8, r8)
 8009840:	20000477 	.word	0x20000477

08009844 <__sinit_lock_release>:
 8009844:	b510      	push	{r4, lr}
 8009846:	4802      	ldr	r0, [pc, #8]	; (8009850 <__sinit_lock_release+0xc>)
 8009848:	f000 f8a6 	bl	8009998 <__retarget_lock_release_recursive>
 800984c:	bd10      	pop	{r4, pc}
 800984e:	46c0      	nop			; (mov r8, r8)
 8009850:	20000477 	.word	0x20000477

08009854 <__sinit>:
 8009854:	b513      	push	{r0, r1, r4, lr}
 8009856:	0004      	movs	r4, r0
 8009858:	f7ff ffec 	bl	8009834 <__sinit_lock_acquire>
 800985c:	69a3      	ldr	r3, [r4, #24]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d002      	beq.n	8009868 <__sinit+0x14>
 8009862:	f7ff ffef 	bl	8009844 <__sinit_lock_release>
 8009866:	bd13      	pop	{r0, r1, r4, pc}
 8009868:	64a3      	str	r3, [r4, #72]	; 0x48
 800986a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800986c:	6523      	str	r3, [r4, #80]	; 0x50
 800986e:	4b13      	ldr	r3, [pc, #76]	; (80098bc <__sinit+0x68>)
 8009870:	4a13      	ldr	r2, [pc, #76]	; (80098c0 <__sinit+0x6c>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	62a2      	str	r2, [r4, #40]	; 0x28
 8009876:	9301      	str	r3, [sp, #4]
 8009878:	42a3      	cmp	r3, r4
 800987a:	d101      	bne.n	8009880 <__sinit+0x2c>
 800987c:	2301      	movs	r3, #1
 800987e:	61a3      	str	r3, [r4, #24]
 8009880:	0020      	movs	r0, r4
 8009882:	f000 f81f 	bl	80098c4 <__sfp>
 8009886:	6060      	str	r0, [r4, #4]
 8009888:	0020      	movs	r0, r4
 800988a:	f000 f81b 	bl	80098c4 <__sfp>
 800988e:	60a0      	str	r0, [r4, #8]
 8009890:	0020      	movs	r0, r4
 8009892:	f000 f817 	bl	80098c4 <__sfp>
 8009896:	2200      	movs	r2, #0
 8009898:	2104      	movs	r1, #4
 800989a:	60e0      	str	r0, [r4, #12]
 800989c:	6860      	ldr	r0, [r4, #4]
 800989e:	f7ff ff77 	bl	8009790 <std>
 80098a2:	2201      	movs	r2, #1
 80098a4:	2109      	movs	r1, #9
 80098a6:	68a0      	ldr	r0, [r4, #8]
 80098a8:	f7ff ff72 	bl	8009790 <std>
 80098ac:	2202      	movs	r2, #2
 80098ae:	2112      	movs	r1, #18
 80098b0:	68e0      	ldr	r0, [r4, #12]
 80098b2:	f7ff ff6d 	bl	8009790 <std>
 80098b6:	2301      	movs	r3, #1
 80098b8:	61a3      	str	r3, [r4, #24]
 80098ba:	e7d2      	b.n	8009862 <__sinit+0xe>
 80098bc:	08009d98 	.word	0x08009d98
 80098c0:	080097d9 	.word	0x080097d9

080098c4 <__sfp>:
 80098c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098c6:	0007      	movs	r7, r0
 80098c8:	f7ff ffa4 	bl	8009814 <__sfp_lock_acquire>
 80098cc:	4b1f      	ldr	r3, [pc, #124]	; (800994c <__sfp+0x88>)
 80098ce:	681e      	ldr	r6, [r3, #0]
 80098d0:	69b3      	ldr	r3, [r6, #24]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d102      	bne.n	80098dc <__sfp+0x18>
 80098d6:	0030      	movs	r0, r6
 80098d8:	f7ff ffbc 	bl	8009854 <__sinit>
 80098dc:	3648      	adds	r6, #72	; 0x48
 80098de:	68b4      	ldr	r4, [r6, #8]
 80098e0:	6873      	ldr	r3, [r6, #4]
 80098e2:	3b01      	subs	r3, #1
 80098e4:	d504      	bpl.n	80098f0 <__sfp+0x2c>
 80098e6:	6833      	ldr	r3, [r6, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d022      	beq.n	8009932 <__sfp+0x6e>
 80098ec:	6836      	ldr	r6, [r6, #0]
 80098ee:	e7f6      	b.n	80098de <__sfp+0x1a>
 80098f0:	220c      	movs	r2, #12
 80098f2:	5ea5      	ldrsh	r5, [r4, r2]
 80098f4:	2d00      	cmp	r5, #0
 80098f6:	d11a      	bne.n	800992e <__sfp+0x6a>
 80098f8:	0020      	movs	r0, r4
 80098fa:	4b15      	ldr	r3, [pc, #84]	; (8009950 <__sfp+0x8c>)
 80098fc:	3058      	adds	r0, #88	; 0x58
 80098fe:	60e3      	str	r3, [r4, #12]
 8009900:	6665      	str	r5, [r4, #100]	; 0x64
 8009902:	f000 f847 	bl	8009994 <__retarget_lock_init_recursive>
 8009906:	f7ff ff8d 	bl	8009824 <__sfp_lock_release>
 800990a:	0020      	movs	r0, r4
 800990c:	2208      	movs	r2, #8
 800990e:	0029      	movs	r1, r5
 8009910:	6025      	str	r5, [r4, #0]
 8009912:	60a5      	str	r5, [r4, #8]
 8009914:	6065      	str	r5, [r4, #4]
 8009916:	6125      	str	r5, [r4, #16]
 8009918:	6165      	str	r5, [r4, #20]
 800991a:	61a5      	str	r5, [r4, #24]
 800991c:	305c      	adds	r0, #92	; 0x5c
 800991e:	f7fd fa6c 	bl	8006dfa <memset>
 8009922:	6365      	str	r5, [r4, #52]	; 0x34
 8009924:	63a5      	str	r5, [r4, #56]	; 0x38
 8009926:	64a5      	str	r5, [r4, #72]	; 0x48
 8009928:	64e5      	str	r5, [r4, #76]	; 0x4c
 800992a:	0020      	movs	r0, r4
 800992c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800992e:	3468      	adds	r4, #104	; 0x68
 8009930:	e7d7      	b.n	80098e2 <__sfp+0x1e>
 8009932:	2104      	movs	r1, #4
 8009934:	0038      	movs	r0, r7
 8009936:	f7ff ff57 	bl	80097e8 <__sfmoreglue>
 800993a:	1e04      	subs	r4, r0, #0
 800993c:	6030      	str	r0, [r6, #0]
 800993e:	d1d5      	bne.n	80098ec <__sfp+0x28>
 8009940:	f7ff ff70 	bl	8009824 <__sfp_lock_release>
 8009944:	230c      	movs	r3, #12
 8009946:	603b      	str	r3, [r7, #0]
 8009948:	e7ef      	b.n	800992a <__sfp+0x66>
 800994a:	46c0      	nop			; (mov r8, r8)
 800994c:	08009d98 	.word	0x08009d98
 8009950:	ffff0001 	.word	0xffff0001

08009954 <_fwalk_reent>:
 8009954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009956:	0004      	movs	r4, r0
 8009958:	0006      	movs	r6, r0
 800995a:	2700      	movs	r7, #0
 800995c:	9101      	str	r1, [sp, #4]
 800995e:	3448      	adds	r4, #72	; 0x48
 8009960:	6863      	ldr	r3, [r4, #4]
 8009962:	68a5      	ldr	r5, [r4, #8]
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	9b00      	ldr	r3, [sp, #0]
 8009968:	3b01      	subs	r3, #1
 800996a:	9300      	str	r3, [sp, #0]
 800996c:	d504      	bpl.n	8009978 <_fwalk_reent+0x24>
 800996e:	6824      	ldr	r4, [r4, #0]
 8009970:	2c00      	cmp	r4, #0
 8009972:	d1f5      	bne.n	8009960 <_fwalk_reent+0xc>
 8009974:	0038      	movs	r0, r7
 8009976:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009978:	89ab      	ldrh	r3, [r5, #12]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d908      	bls.n	8009990 <_fwalk_reent+0x3c>
 800997e:	220e      	movs	r2, #14
 8009980:	5eab      	ldrsh	r3, [r5, r2]
 8009982:	3301      	adds	r3, #1
 8009984:	d004      	beq.n	8009990 <_fwalk_reent+0x3c>
 8009986:	0029      	movs	r1, r5
 8009988:	0030      	movs	r0, r6
 800998a:	9b01      	ldr	r3, [sp, #4]
 800998c:	4798      	blx	r3
 800998e:	4307      	orrs	r7, r0
 8009990:	3568      	adds	r5, #104	; 0x68
 8009992:	e7e8      	b.n	8009966 <_fwalk_reent+0x12>

08009994 <__retarget_lock_init_recursive>:
 8009994:	4770      	bx	lr

08009996 <__retarget_lock_acquire_recursive>:
 8009996:	4770      	bx	lr

08009998 <__retarget_lock_release_recursive>:
 8009998:	4770      	bx	lr
	...

0800999c <__swhatbuf_r>:
 800999c:	b570      	push	{r4, r5, r6, lr}
 800999e:	000e      	movs	r6, r1
 80099a0:	001d      	movs	r5, r3
 80099a2:	230e      	movs	r3, #14
 80099a4:	5ec9      	ldrsh	r1, [r1, r3]
 80099a6:	0014      	movs	r4, r2
 80099a8:	b096      	sub	sp, #88	; 0x58
 80099aa:	2900      	cmp	r1, #0
 80099ac:	da07      	bge.n	80099be <__swhatbuf_r+0x22>
 80099ae:	2300      	movs	r3, #0
 80099b0:	602b      	str	r3, [r5, #0]
 80099b2:	89b3      	ldrh	r3, [r6, #12]
 80099b4:	061b      	lsls	r3, r3, #24
 80099b6:	d411      	bmi.n	80099dc <__swhatbuf_r+0x40>
 80099b8:	2380      	movs	r3, #128	; 0x80
 80099ba:	00db      	lsls	r3, r3, #3
 80099bc:	e00f      	b.n	80099de <__swhatbuf_r+0x42>
 80099be:	466a      	mov	r2, sp
 80099c0:	f000 f91c 	bl	8009bfc <_fstat_r>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	dbf2      	blt.n	80099ae <__swhatbuf_r+0x12>
 80099c8:	23f0      	movs	r3, #240	; 0xf0
 80099ca:	9901      	ldr	r1, [sp, #4]
 80099cc:	021b      	lsls	r3, r3, #8
 80099ce:	4019      	ands	r1, r3
 80099d0:	4b05      	ldr	r3, [pc, #20]	; (80099e8 <__swhatbuf_r+0x4c>)
 80099d2:	18c9      	adds	r1, r1, r3
 80099d4:	424b      	negs	r3, r1
 80099d6:	4159      	adcs	r1, r3
 80099d8:	6029      	str	r1, [r5, #0]
 80099da:	e7ed      	b.n	80099b8 <__swhatbuf_r+0x1c>
 80099dc:	2340      	movs	r3, #64	; 0x40
 80099de:	2000      	movs	r0, #0
 80099e0:	6023      	str	r3, [r4, #0]
 80099e2:	b016      	add	sp, #88	; 0x58
 80099e4:	bd70      	pop	{r4, r5, r6, pc}
 80099e6:	46c0      	nop			; (mov r8, r8)
 80099e8:	ffffe000 	.word	0xffffe000

080099ec <__smakebuf_r>:
 80099ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099ee:	2602      	movs	r6, #2
 80099f0:	898b      	ldrh	r3, [r1, #12]
 80099f2:	0005      	movs	r5, r0
 80099f4:	000c      	movs	r4, r1
 80099f6:	4233      	tst	r3, r6
 80099f8:	d006      	beq.n	8009a08 <__smakebuf_r+0x1c>
 80099fa:	0023      	movs	r3, r4
 80099fc:	3347      	adds	r3, #71	; 0x47
 80099fe:	6023      	str	r3, [r4, #0]
 8009a00:	6123      	str	r3, [r4, #16]
 8009a02:	2301      	movs	r3, #1
 8009a04:	6163      	str	r3, [r4, #20]
 8009a06:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009a08:	466a      	mov	r2, sp
 8009a0a:	ab01      	add	r3, sp, #4
 8009a0c:	f7ff ffc6 	bl	800999c <__swhatbuf_r>
 8009a10:	9900      	ldr	r1, [sp, #0]
 8009a12:	0007      	movs	r7, r0
 8009a14:	0028      	movs	r0, r5
 8009a16:	f7ff f94d 	bl	8008cb4 <_malloc_r>
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d108      	bne.n	8009a30 <__smakebuf_r+0x44>
 8009a1e:	220c      	movs	r2, #12
 8009a20:	5ea3      	ldrsh	r3, [r4, r2]
 8009a22:	059a      	lsls	r2, r3, #22
 8009a24:	d4ef      	bmi.n	8009a06 <__smakebuf_r+0x1a>
 8009a26:	2203      	movs	r2, #3
 8009a28:	4393      	bics	r3, r2
 8009a2a:	431e      	orrs	r6, r3
 8009a2c:	81a6      	strh	r6, [r4, #12]
 8009a2e:	e7e4      	b.n	80099fa <__smakebuf_r+0xe>
 8009a30:	4b0f      	ldr	r3, [pc, #60]	; (8009a70 <__smakebuf_r+0x84>)
 8009a32:	62ab      	str	r3, [r5, #40]	; 0x28
 8009a34:	2380      	movs	r3, #128	; 0x80
 8009a36:	89a2      	ldrh	r2, [r4, #12]
 8009a38:	6020      	str	r0, [r4, #0]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	81a3      	strh	r3, [r4, #12]
 8009a3e:	9b00      	ldr	r3, [sp, #0]
 8009a40:	6120      	str	r0, [r4, #16]
 8009a42:	6163      	str	r3, [r4, #20]
 8009a44:	9b01      	ldr	r3, [sp, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00d      	beq.n	8009a66 <__smakebuf_r+0x7a>
 8009a4a:	0028      	movs	r0, r5
 8009a4c:	230e      	movs	r3, #14
 8009a4e:	5ee1      	ldrsh	r1, [r4, r3]
 8009a50:	f000 f8e6 	bl	8009c20 <_isatty_r>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d006      	beq.n	8009a66 <__smakebuf_r+0x7a>
 8009a58:	2203      	movs	r2, #3
 8009a5a:	89a3      	ldrh	r3, [r4, #12]
 8009a5c:	4393      	bics	r3, r2
 8009a5e:	001a      	movs	r2, r3
 8009a60:	2301      	movs	r3, #1
 8009a62:	4313      	orrs	r3, r2
 8009a64:	81a3      	strh	r3, [r4, #12]
 8009a66:	89a0      	ldrh	r0, [r4, #12]
 8009a68:	4307      	orrs	r7, r0
 8009a6a:	81a7      	strh	r7, [r4, #12]
 8009a6c:	e7cb      	b.n	8009a06 <__smakebuf_r+0x1a>
 8009a6e:	46c0      	nop			; (mov r8, r8)
 8009a70:	080097d9 	.word	0x080097d9

08009a74 <_malloc_usable_size_r>:
 8009a74:	1f0b      	subs	r3, r1, #4
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	1f18      	subs	r0, r3, #4
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	da01      	bge.n	8009a82 <_malloc_usable_size_r+0xe>
 8009a7e:	580b      	ldr	r3, [r1, r0]
 8009a80:	18c0      	adds	r0, r0, r3
 8009a82:	4770      	bx	lr

08009a84 <_raise_r>:
 8009a84:	b570      	push	{r4, r5, r6, lr}
 8009a86:	0004      	movs	r4, r0
 8009a88:	000d      	movs	r5, r1
 8009a8a:	291f      	cmp	r1, #31
 8009a8c:	d904      	bls.n	8009a98 <_raise_r+0x14>
 8009a8e:	2316      	movs	r3, #22
 8009a90:	6003      	str	r3, [r0, #0]
 8009a92:	2001      	movs	r0, #1
 8009a94:	4240      	negs	r0, r0
 8009a96:	bd70      	pop	{r4, r5, r6, pc}
 8009a98:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d004      	beq.n	8009aa8 <_raise_r+0x24>
 8009a9e:	008a      	lsls	r2, r1, #2
 8009aa0:	189b      	adds	r3, r3, r2
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	2a00      	cmp	r2, #0
 8009aa6:	d108      	bne.n	8009aba <_raise_r+0x36>
 8009aa8:	0020      	movs	r0, r4
 8009aaa:	f000 f831 	bl	8009b10 <_getpid_r>
 8009aae:	002a      	movs	r2, r5
 8009ab0:	0001      	movs	r1, r0
 8009ab2:	0020      	movs	r0, r4
 8009ab4:	f000 f81a 	bl	8009aec <_kill_r>
 8009ab8:	e7ed      	b.n	8009a96 <_raise_r+0x12>
 8009aba:	2000      	movs	r0, #0
 8009abc:	2a01      	cmp	r2, #1
 8009abe:	d0ea      	beq.n	8009a96 <_raise_r+0x12>
 8009ac0:	1c51      	adds	r1, r2, #1
 8009ac2:	d103      	bne.n	8009acc <_raise_r+0x48>
 8009ac4:	2316      	movs	r3, #22
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	e7e4      	b.n	8009a96 <_raise_r+0x12>
 8009acc:	2400      	movs	r4, #0
 8009ace:	0028      	movs	r0, r5
 8009ad0:	601c      	str	r4, [r3, #0]
 8009ad2:	4790      	blx	r2
 8009ad4:	0020      	movs	r0, r4
 8009ad6:	e7de      	b.n	8009a96 <_raise_r+0x12>

08009ad8 <raise>:
 8009ad8:	b510      	push	{r4, lr}
 8009ada:	4b03      	ldr	r3, [pc, #12]	; (8009ae8 <raise+0x10>)
 8009adc:	0001      	movs	r1, r0
 8009ade:	6818      	ldr	r0, [r3, #0]
 8009ae0:	f7ff ffd0 	bl	8009a84 <_raise_r>
 8009ae4:	bd10      	pop	{r4, pc}
 8009ae6:	46c0      	nop			; (mov r8, r8)
 8009ae8:	20000044 	.word	0x20000044

08009aec <_kill_r>:
 8009aec:	2300      	movs	r3, #0
 8009aee:	b570      	push	{r4, r5, r6, lr}
 8009af0:	4d06      	ldr	r5, [pc, #24]	; (8009b0c <_kill_r+0x20>)
 8009af2:	0004      	movs	r4, r0
 8009af4:	0008      	movs	r0, r1
 8009af6:	0011      	movs	r1, r2
 8009af8:	602b      	str	r3, [r5, #0]
 8009afa:	f7f9 ffe5 	bl	8003ac8 <_kill>
 8009afe:	1c43      	adds	r3, r0, #1
 8009b00:	d103      	bne.n	8009b0a <_kill_r+0x1e>
 8009b02:	682b      	ldr	r3, [r5, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d000      	beq.n	8009b0a <_kill_r+0x1e>
 8009b08:	6023      	str	r3, [r4, #0]
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}
 8009b0c:	20000470 	.word	0x20000470

08009b10 <_getpid_r>:
 8009b10:	b510      	push	{r4, lr}
 8009b12:	f7f9 ffd3 	bl	8003abc <_getpid>
 8009b16:	bd10      	pop	{r4, pc}

08009b18 <__sread>:
 8009b18:	b570      	push	{r4, r5, r6, lr}
 8009b1a:	000c      	movs	r4, r1
 8009b1c:	250e      	movs	r5, #14
 8009b1e:	5f49      	ldrsh	r1, [r1, r5]
 8009b20:	f000 f8a4 	bl	8009c6c <_read_r>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	db03      	blt.n	8009b30 <__sread+0x18>
 8009b28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009b2a:	181b      	adds	r3, r3, r0
 8009b2c:	6563      	str	r3, [r4, #84]	; 0x54
 8009b2e:	bd70      	pop	{r4, r5, r6, pc}
 8009b30:	89a3      	ldrh	r3, [r4, #12]
 8009b32:	4a02      	ldr	r2, [pc, #8]	; (8009b3c <__sread+0x24>)
 8009b34:	4013      	ands	r3, r2
 8009b36:	81a3      	strh	r3, [r4, #12]
 8009b38:	e7f9      	b.n	8009b2e <__sread+0x16>
 8009b3a:	46c0      	nop			; (mov r8, r8)
 8009b3c:	ffffefff 	.word	0xffffefff

08009b40 <__swrite>:
 8009b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b42:	001f      	movs	r7, r3
 8009b44:	898b      	ldrh	r3, [r1, #12]
 8009b46:	0005      	movs	r5, r0
 8009b48:	000c      	movs	r4, r1
 8009b4a:	0016      	movs	r6, r2
 8009b4c:	05db      	lsls	r3, r3, #23
 8009b4e:	d505      	bpl.n	8009b5c <__swrite+0x1c>
 8009b50:	230e      	movs	r3, #14
 8009b52:	5ec9      	ldrsh	r1, [r1, r3]
 8009b54:	2200      	movs	r2, #0
 8009b56:	2302      	movs	r3, #2
 8009b58:	f000 f874 	bl	8009c44 <_lseek_r>
 8009b5c:	89a3      	ldrh	r3, [r4, #12]
 8009b5e:	4a05      	ldr	r2, [pc, #20]	; (8009b74 <__swrite+0x34>)
 8009b60:	0028      	movs	r0, r5
 8009b62:	4013      	ands	r3, r2
 8009b64:	81a3      	strh	r3, [r4, #12]
 8009b66:	0032      	movs	r2, r6
 8009b68:	230e      	movs	r3, #14
 8009b6a:	5ee1      	ldrsh	r1, [r4, r3]
 8009b6c:	003b      	movs	r3, r7
 8009b6e:	f000 f81f 	bl	8009bb0 <_write_r>
 8009b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b74:	ffffefff 	.word	0xffffefff

08009b78 <__sseek>:
 8009b78:	b570      	push	{r4, r5, r6, lr}
 8009b7a:	000c      	movs	r4, r1
 8009b7c:	250e      	movs	r5, #14
 8009b7e:	5f49      	ldrsh	r1, [r1, r5]
 8009b80:	f000 f860 	bl	8009c44 <_lseek_r>
 8009b84:	89a3      	ldrh	r3, [r4, #12]
 8009b86:	1c42      	adds	r2, r0, #1
 8009b88:	d103      	bne.n	8009b92 <__sseek+0x1a>
 8009b8a:	4a05      	ldr	r2, [pc, #20]	; (8009ba0 <__sseek+0x28>)
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	81a3      	strh	r3, [r4, #12]
 8009b90:	bd70      	pop	{r4, r5, r6, pc}
 8009b92:	2280      	movs	r2, #128	; 0x80
 8009b94:	0152      	lsls	r2, r2, #5
 8009b96:	4313      	orrs	r3, r2
 8009b98:	81a3      	strh	r3, [r4, #12]
 8009b9a:	6560      	str	r0, [r4, #84]	; 0x54
 8009b9c:	e7f8      	b.n	8009b90 <__sseek+0x18>
 8009b9e:	46c0      	nop			; (mov r8, r8)
 8009ba0:	ffffefff 	.word	0xffffefff

08009ba4 <__sclose>:
 8009ba4:	b510      	push	{r4, lr}
 8009ba6:	230e      	movs	r3, #14
 8009ba8:	5ec9      	ldrsh	r1, [r1, r3]
 8009baa:	f000 f815 	bl	8009bd8 <_close_r>
 8009bae:	bd10      	pop	{r4, pc}

08009bb0 <_write_r>:
 8009bb0:	b570      	push	{r4, r5, r6, lr}
 8009bb2:	0004      	movs	r4, r0
 8009bb4:	0008      	movs	r0, r1
 8009bb6:	0011      	movs	r1, r2
 8009bb8:	001a      	movs	r2, r3
 8009bba:	2300      	movs	r3, #0
 8009bbc:	4d05      	ldr	r5, [pc, #20]	; (8009bd4 <_write_r+0x24>)
 8009bbe:	602b      	str	r3, [r5, #0]
 8009bc0:	f7f9 ffbb 	bl	8003b3a <_write>
 8009bc4:	1c43      	adds	r3, r0, #1
 8009bc6:	d103      	bne.n	8009bd0 <_write_r+0x20>
 8009bc8:	682b      	ldr	r3, [r5, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d000      	beq.n	8009bd0 <_write_r+0x20>
 8009bce:	6023      	str	r3, [r4, #0]
 8009bd0:	bd70      	pop	{r4, r5, r6, pc}
 8009bd2:	46c0      	nop			; (mov r8, r8)
 8009bd4:	20000470 	.word	0x20000470

08009bd8 <_close_r>:
 8009bd8:	2300      	movs	r3, #0
 8009bda:	b570      	push	{r4, r5, r6, lr}
 8009bdc:	4d06      	ldr	r5, [pc, #24]	; (8009bf8 <_close_r+0x20>)
 8009bde:	0004      	movs	r4, r0
 8009be0:	0008      	movs	r0, r1
 8009be2:	602b      	str	r3, [r5, #0]
 8009be4:	f7f9 ffc5 	bl	8003b72 <_close>
 8009be8:	1c43      	adds	r3, r0, #1
 8009bea:	d103      	bne.n	8009bf4 <_close_r+0x1c>
 8009bec:	682b      	ldr	r3, [r5, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d000      	beq.n	8009bf4 <_close_r+0x1c>
 8009bf2:	6023      	str	r3, [r4, #0]
 8009bf4:	bd70      	pop	{r4, r5, r6, pc}
 8009bf6:	46c0      	nop			; (mov r8, r8)
 8009bf8:	20000470 	.word	0x20000470

08009bfc <_fstat_r>:
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	b570      	push	{r4, r5, r6, lr}
 8009c00:	4d06      	ldr	r5, [pc, #24]	; (8009c1c <_fstat_r+0x20>)
 8009c02:	0004      	movs	r4, r0
 8009c04:	0008      	movs	r0, r1
 8009c06:	0011      	movs	r1, r2
 8009c08:	602b      	str	r3, [r5, #0]
 8009c0a:	f7f9 ffbc 	bl	8003b86 <_fstat>
 8009c0e:	1c43      	adds	r3, r0, #1
 8009c10:	d103      	bne.n	8009c1a <_fstat_r+0x1e>
 8009c12:	682b      	ldr	r3, [r5, #0]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d000      	beq.n	8009c1a <_fstat_r+0x1e>
 8009c18:	6023      	str	r3, [r4, #0]
 8009c1a:	bd70      	pop	{r4, r5, r6, pc}
 8009c1c:	20000470 	.word	0x20000470

08009c20 <_isatty_r>:
 8009c20:	2300      	movs	r3, #0
 8009c22:	b570      	push	{r4, r5, r6, lr}
 8009c24:	4d06      	ldr	r5, [pc, #24]	; (8009c40 <_isatty_r+0x20>)
 8009c26:	0004      	movs	r4, r0
 8009c28:	0008      	movs	r0, r1
 8009c2a:	602b      	str	r3, [r5, #0]
 8009c2c:	f7f9 ffb9 	bl	8003ba2 <_isatty>
 8009c30:	1c43      	adds	r3, r0, #1
 8009c32:	d103      	bne.n	8009c3c <_isatty_r+0x1c>
 8009c34:	682b      	ldr	r3, [r5, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d000      	beq.n	8009c3c <_isatty_r+0x1c>
 8009c3a:	6023      	str	r3, [r4, #0]
 8009c3c:	bd70      	pop	{r4, r5, r6, pc}
 8009c3e:	46c0      	nop			; (mov r8, r8)
 8009c40:	20000470 	.word	0x20000470

08009c44 <_lseek_r>:
 8009c44:	b570      	push	{r4, r5, r6, lr}
 8009c46:	0004      	movs	r4, r0
 8009c48:	0008      	movs	r0, r1
 8009c4a:	0011      	movs	r1, r2
 8009c4c:	001a      	movs	r2, r3
 8009c4e:	2300      	movs	r3, #0
 8009c50:	4d05      	ldr	r5, [pc, #20]	; (8009c68 <_lseek_r+0x24>)
 8009c52:	602b      	str	r3, [r5, #0]
 8009c54:	f7f9 ffae 	bl	8003bb4 <_lseek>
 8009c58:	1c43      	adds	r3, r0, #1
 8009c5a:	d103      	bne.n	8009c64 <_lseek_r+0x20>
 8009c5c:	682b      	ldr	r3, [r5, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d000      	beq.n	8009c64 <_lseek_r+0x20>
 8009c62:	6023      	str	r3, [r4, #0]
 8009c64:	bd70      	pop	{r4, r5, r6, pc}
 8009c66:	46c0      	nop			; (mov r8, r8)
 8009c68:	20000470 	.word	0x20000470

08009c6c <_read_r>:
 8009c6c:	b570      	push	{r4, r5, r6, lr}
 8009c6e:	0004      	movs	r4, r0
 8009c70:	0008      	movs	r0, r1
 8009c72:	0011      	movs	r1, r2
 8009c74:	001a      	movs	r2, r3
 8009c76:	2300      	movs	r3, #0
 8009c78:	4d05      	ldr	r5, [pc, #20]	; (8009c90 <_read_r+0x24>)
 8009c7a:	602b      	str	r3, [r5, #0]
 8009c7c:	f7f9 ff40 	bl	8003b00 <_read>
 8009c80:	1c43      	adds	r3, r0, #1
 8009c82:	d103      	bne.n	8009c8c <_read_r+0x20>
 8009c84:	682b      	ldr	r3, [r5, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d000      	beq.n	8009c8c <_read_r+0x20>
 8009c8a:	6023      	str	r3, [r4, #0]
 8009c8c:	bd70      	pop	{r4, r5, r6, pc}
 8009c8e:	46c0      	nop			; (mov r8, r8)
 8009c90:	20000470 	.word	0x20000470

08009c94 <_init>:
 8009c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c96:	46c0      	nop			; (mov r8, r8)
 8009c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c9a:	bc08      	pop	{r3}
 8009c9c:	469e      	mov	lr, r3
 8009c9e:	4770      	bx	lr

08009ca0 <_fini>:
 8009ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca2:	46c0      	nop			; (mov r8, r8)
 8009ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ca6:	bc08      	pop	{r3}
 8009ca8:	469e      	mov	lr, r3
 8009caa:	4770      	bx	lr
